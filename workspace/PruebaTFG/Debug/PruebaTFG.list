
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08005108  08005108  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005108  08005108  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002234  20000090  080051a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022c4  080051a0  000222c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001384b  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f1  00000000  00000000  0003394e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00036340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eec  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ae3  00000000  00000000  00038594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fc7  00000000  00000000  00060077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c998  00000000  00000000  0007503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005330  00000000  00000000  001819d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00186d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080050e0 	.word	0x080050e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	080050e0 	.word	0x080050e0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc66 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f84f 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000226:	f000 fa0f 	bl	8000648 <MX_DMA_Init>
  MX_GPIO_Init();
 800022a:	f000 fa3f 	bl	80006ac <MX_GPIO_Init>
  MX_TIM3_Init();
 800022e:	f000 f9bd 	bl	80005ac <MX_TIM3_Init>
  MX_DAC3_Init();
 8000232:	f000 f90f 	bl	8000454 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 8000236:	f000 f947 	bl	80004c8 <MX_OPAMP6_Init>
  MX_ADC1_Init();
 800023a:	f000 f88f 	bl	800035c <MX_ADC1_Init>
  MX_TIM2_Init();
 800023e:	f000 f969 	bl	8000514 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000242:	4818      	ldr	r0, [pc, #96]	; (80002a4 <main+0x8c>)
 8000244:	f004 f9c8 	bl	80045d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <main+0x90>)
 800024a:	f004 f9c5 	bl	80045d8 <HAL_TIM_Base_Start>

  if(HAL_OK != HAL_OPAMP_Start(&hopamp6)) { Error_Handler();}
 800024e:	4817      	ldr	r0, [pc, #92]	; (80002ac <main+0x94>)
 8000250:	f003 f93e 	bl	80034d0 <HAL_OPAMP_Start>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <main+0x46>
 800025a:	f000 fa4b 	bl	80006f4 <Error_Handler>

  //DAC
  if(HAL_DACEx_DualSetValue(&hdac3, DAC_ALIGN_12B_R, 0, 0) != HAL_OK) { Error_Handler();}
 800025e:	2300      	movs	r3, #0
 8000260:	2200      	movs	r2, #0
 8000262:	2100      	movs	r1, #0
 8000264:	4812      	ldr	r0, [pc, #72]	; (80002b0 <main+0x98>)
 8000266:	f002 fbf3 	bl	8002a50 <HAL_DACEx_DualSetValue>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0x5c>
 8000270:	f000 fa40 	bl	80006f4 <Error_Handler>
  if(HAL_DACEx_DualStart_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)lut,lut_size,DAC_ALIGN_12B_R))
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0x9c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2200      	movs	r2, #0
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <main+0xa0>)
 800027e:	2100      	movs	r1, #0
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <main+0x98>)
 8000282:	f002 fb2f 	bl	80028e4 <HAL_DACEx_DualStart_DMA>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d00a      	beq.n	80002a2 <main+0x8a>

  //ADC
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_buffer,4096) != HAL_OK)		{  	 Error_Handler();    }
 800028c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000290:	490a      	ldr	r1, [pc, #40]	; (80002bc <main+0xa4>)
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <main+0xa8>)
 8000294:	f001 f8a2 	bl	80013dc <HAL_ADC_Start_DMA>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <main+0x8a>
 800029e:	f000 fa29 	bl	80006f4 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <main+0x8a>
 80002a4:	20000274 	.word	0x20000274
 80002a8:	20000228 	.word	0x20000228
 80002ac:	200001ec 	.word	0x200001ec
 80002b0:	20000178 	.word	0x20000178
 80002b4:	20000080 	.word	0x20000080
 80002b8:	20000000 	.word	0x20000000
 80002bc:	200002c0 	.word	0x200002c0
 80002c0:	200000ac 	.word	0x200000ac

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	; 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2238      	movs	r2, #56	; 0x38
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 fed8 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f003 f924 	bl	8003534 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2340      	movs	r3, #64	; 0x40
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fe:	2302      	movs	r3, #2
 8000300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000302:	2304      	movs	r3, #4
 8000304:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000306:	2355      	movs	r3, #85	; 0x55
 8000308:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f003 f9ae 	bl	800367c <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000326:	f000 f9e5 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2104      	movs	r1, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f003 fcb1 	bl	8003cac <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000350:	f000 f9d0 	bl	80006f4 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3750      	adds	r7, #80	; 0x50
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08c      	sub	sp, #48	; 0x30
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2220      	movs	r2, #32
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f004 fe87 	bl	8005088 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800037a:	4b33      	ldr	r3, [pc, #204]	; (8000448 <MX_ADC1_Init+0xec>)
 800037c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000382:	4b31      	ldr	r3, [pc, #196]	; (8000448 <MX_ADC1_Init+0xec>)
 8000384:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000388:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_ADC1_Init+0xec>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000390:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_ADC1_Init+0xec>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000396:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_ADC1_Init+0xec>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039c:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <MX_ADC1_Init+0xec>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_ADC1_Init+0xec>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <MX_ADC1_Init+0xec>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_ADC1_Init+0xec>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_ADC1_Init+0xec>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_ADC1_Init+0xec>)
 80003bc:	2200      	movs	r2, #0
 80003be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_ADC1_Init+0xec>)
 80003c4:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <MX_ADC1_Init+0xec>)
 80003cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003d2:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_ADC1_Init+0xec>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_ADC1_Init+0xec>)
 80003dc:	2200      	movs	r2, #0
 80003de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <MX_ADC1_Init+0xec>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <MX_ADC1_Init+0xec>)
 80003ea:	f000 fe35 	bl	8001058 <HAL_ADC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80003f4:	f000 f97e 	bl	80006f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000400:	4619      	mov	r1, r3
 8000402:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_ADC1_Init+0xec>)
 8000404:	f001 fe38 	bl	8002078 <HAL_ADCEx_MultiModeConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800040e:	f000 f971 	bl	80006f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_ADC1_Init+0xf0>)
 8000414:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000416:	2306      	movs	r3, #6
 8000418:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_ADC1_Init+0xf4>)
 8000420:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000422:	2304      	movs	r3, #4
 8000424:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4619      	mov	r1, r3
 800042e:	4806      	ldr	r0, [pc, #24]	; (8000448 <MX_ADC1_Init+0xec>)
 8000430:	f001 f8c6 	bl	80015c0 <HAL_ADC_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800043a:	f000 f95b 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	3730      	adds	r7, #48	; 0x30
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200000ac 	.word	0x200000ac
 800044c:	04300002 	.word	0x04300002
 8000450:	407f0000 	.word	0x407f0000

08000454 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08c      	sub	sp, #48	; 0x30
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800045a:	463b      	mov	r3, r7
 800045c:	2230      	movs	r2, #48	; 0x30
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f004 fe11 	bl	8005088 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_DAC3_Init+0x6c>)
 8000468:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <MX_DAC3_Init+0x70>)
 800046a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <MX_DAC3_Init+0x6c>)
 800046e:	f002 f81a 	bl	80024a6 <HAL_DAC_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000478:	f000 f93c 	bl	80006f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800047c:	2302      	movs	r3, #2
 800047e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 800048c:	2322      	movs	r3, #34	; 0x22
 800048e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000494:	2302      	movs	r3, #2
 8000496:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000498:	2302      	movs	r3, #2
 800049a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_DAC3_Init+0x6c>)
 80004a8:	f002 f83e 	bl	8002528 <HAL_DAC_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80004b2:	f000 f91f 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3730      	adds	r7, #48	; 0x30
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000178 	.word	0x20000178
 80004c4:	50001000 	.word	0x50001000

080004c8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004ce:	4a10      	ldr	r2, [pc, #64]	; (8000510 <MX_OPAMP6_Init+0x48>)
 80004d0:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004da:	2260      	movs	r2, #96	; 0x60
 80004dc:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004e0:	220c      	movs	r2, #12
 80004e2:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_OPAMP6_Init+0x44>)
 80004f8:	f002 ff1a 	bl	8003330 <HAL_OPAMP_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000502:	f000 f8f7 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200001ec 	.word	0x200001ec
 8000510:	40010314 	.word	0x40010314

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000538:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_TIM2_Init+0x94>)
 800053c:	2201      	movs	r2, #1
 800053e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 52;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000548:	2234      	movs	r2, #52	; 0x34
 800054a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <MX_TIM2_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <MX_TIM2_Init+0x94>)
 800055a:	f003 ffe5 	bl	8004528 <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000564:	f000 f8c6 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000576:	f004 fa1f 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000580:	f000 f8b8 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000584:	2320      	movs	r3, #32
 8000586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_TIM2_Init+0x94>)
 8000592:	f004 fc9d 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800059c:	f000 f8aa 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000228 	.word	0x20000228

080005ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_TIM3_Init+0x94>)
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <MX_TIM3_Init+0x98>)
 80005ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_TIM3_Init+0x94>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_TIM3_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_TIM3_Init+0x94>)
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_TIM3_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_TIM3_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_TIM3_Init+0x94>)
 80005f0:	f003 ff9a 	bl	8004528 <HAL_TIM_Base_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 f87b 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_TIM3_Init+0x94>)
 800060c:	f004 f9d4 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 f86d 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800061a:	2320      	movs	r3, #32
 800061c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_TIM3_Init+0x94>)
 8000628:	f004 fc52 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000632:	f000 f85f 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000274 	.word	0x20000274
 8000644:	40000400 	.word	0x40000400

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_DMA_Init+0x60>)
 8000650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_DMA_Init+0x60>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6493      	str	r3, [r2, #72]	; 0x48
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_DMA_Init+0x60>)
 800065c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_DMA_Init+0x60>)
 8000668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_DMA_Init+0x60>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6493      	str	r3, [r2, #72]	; 0x48
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_DMA_Init+0x60>)
 8000674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f001 fedb 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f001 fef2 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200c      	movs	r0, #12
 8000694:	f001 fed3 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000698:	200c      	movs	r0, #12
 800069a:	f001 feea 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	; 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09e      	sub	sp, #120	; 0x78
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2254      	movs	r2, #84	; 0x54
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 fc8d 	bl	8005088 <memset>
  if(hadc->Instance==ADC1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000776:	d160      	bne.n	800083a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800077e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fc7f 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000794:	f7ff ffae 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000798:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	4a29      	ldr	r2, [pc, #164]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 800079e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <HAL_ADC_MspInit+0xfc>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007c8:	2303      	movs	r3, #3
 80007ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007cc:	2303      	movs	r3, #3
 80007ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f002 fc25 	bl	800302c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_ADC_MspInit+0x100>)
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_ADC_MspInit+0x104>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <HAL_ADC_MspInit+0x100>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_ADC_MspInit+0x100>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_ADC_MspInit+0x100>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_ADC_MspInit+0x100>)
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000806:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_ADC_MspInit+0x100>)
 800080a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000820:	f002 f992 	bl	8002b48 <HAL_DMA_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800082a:	f7ff ff63 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000832:	655a      	str	r2, [r3, #84]	; 0x54
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_ADC_MspInit+0x100>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3778      	adds	r7, #120	; 0x78
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	20000118 	.word	0x20000118
 800084c:	4002001c 	.word	0x4002001c

08000850 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <HAL_DAC_MspInit+0x8c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d137      	bne.n	80008d2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <HAL_DAC_MspInit+0x90>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <HAL_DAC_MspInit+0x90>)
 8000868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_DAC_MspInit+0x90>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 800087c:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <HAL_DAC_MspInit+0x98>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 8000882:	2266      	movs	r2, #102	; 0x66
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 8000888:	2210      	movs	r2, #16
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a6:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008aa:	2220      	movs	r2, #32
 80008ac:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008b8:	f002 f946 	bl	8002b48 <HAL_DMA_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 80008c2:	f7ff ff17 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_DAC_MspInit+0x94>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	50001000 	.word	0x50001000
 80008e0:	40021000 	.word	0x40021000
 80008e4:	2000018c 	.word	0x2000018c
 80008e8:	40020008 	.word	0x40020008

080008ec <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP6)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_OPAMP_MspInit+0x5c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d118      	bne.n	8000940 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP6_MspInit 0 */

  /* USER CODE END OPAMP6_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_OPAMP_MspInit+0x60>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_OPAMP_MspInit+0x60>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_OPAMP_MspInit+0x60>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP6 GPIO Configuration
    PB11     ------> OPAMP6_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800092a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092c:	2303      	movs	r3, #3
 800092e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_OPAMP_MspInit+0x64>)
 800093c:	f002 fb76 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40010314 	.word	0x40010314
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400

08000954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000964:	d114      	bne.n	8000990 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	201c      	movs	r0, #28
 8000984:	f001 fd5b 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000988:	201c      	movs	r0, #28
 800098a:	f001 fd72 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800098e:	e018      	b.n	80009c2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_TIM_Base_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d113      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_TIM_Base_MspInit+0x78>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	201d      	movs	r0, #29
 80009b8:	f001 fd41 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009bc:	201d      	movs	r0, #29
 80009be:	f001 fd58 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40000400 	.word	0x40000400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f8b8 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Channel1_IRQHandler+0x10>)
 8000a2e:	f002 f9ae 	bl	8002d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000018c 	.word	0x2000018c

08000a3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <DMA1_Channel2_IRQHandler+0x10>)
 8000a42:	f002 f9a4 	bl	8002d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000118 	.word	0x20000118

08000a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM2_IRQHandler+0x10>)
 8000a56:	f003 fe2f 	bl	80046b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000228 	.word	0x20000228

08000a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM3_IRQHandler+0x10>)
 8000a6a:	f003 fe25 	bl	80046b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000274 	.word	0x20000274

08000a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x2>)
 8000a9e:	4685      	mov	sp, r0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x6>)
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopForever+0xa>)
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopForever+0xe>)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:
 8000aaa:	58d4      	ldr	r4, [r2, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:
 8000ab0:	18c4      	adds	r4, r0, r3
 8000ab2:	428c      	cmp	r4, r1
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopForever+0x12>)
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopForever+0x16>)
 8000aba:	2300      	movs	r3, #0
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:
 8000ac2:	42a2      	cmp	r2, r4
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>
 8000ac6:	f7ff ffd7 	bl	8000a78 <SystemInit>
 8000aca:	f004 fae5 	bl	8005098 <__libc_init_array>
 8000ace:	f7ff fba3 	bl	8000218 <main>

08000ad2 <LoopForever>:
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
 8000ad4:	20020000 	.word	0x20020000
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	08005110 	.word	0x08005110
 8000ae4:	20000090 	.word	0x20000090
 8000ae8:	200022c4 	.word	0x200022c4

08000aec <ADC1_2_IRQHandler>:
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f001 fc95 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f80e 	bl	8000b20 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fdf6 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_InitTick+0x68>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d022      	beq.n	8000b7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_InitTick+0x6c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_InitTick+0x68>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fca0 	bl	800248e <HAL_SYSTICK_Config>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d809      	bhi.n	8000b6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	f001 fc6c 	bl	800243e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0x70>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e004      	b.n	8000b7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e001      	b.n	8000b7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000008c 	.word	0x2000008c
 8000b8c:	20000084 	.word	0x20000084
 8000b90:	20000088 	.word	0x20000088

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_IncTick+0x1c>)
 8000ba4:	6013      	str	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	200022c0 	.word	0x200022c0
 8000bb4:	2000008c 	.word	0x2000008c

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200022c0 	.word	0x200022c0

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d004      	beq.n	8000bf4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_Delay+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf4:	bf00      	nop
 8000bf6:	f7ff ffdf 	bl	8000bb8 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8f7      	bhi.n	8000bf6 <HAL_Delay+0x26>
  {
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3360      	adds	r3, #96	; 0x60
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <LL_ADC_SetOffset+0x44>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	4313      	orrs	r3, r2
 8000cac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cb4:	bf00      	nop
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	03fff000 	.word	0x03fff000

08000cc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3360      	adds	r3, #96	; 0x60
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3360      	adds	r3, #96	; 0x60
 8000d00:	461a      	mov	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d1a:	bf00      	nop
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b087      	sub	sp, #28
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3360      	adds	r3, #96	; 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3360      	adds	r3, #96	; 0x60
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	615a      	str	r2, [r3, #20]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b087      	sub	sp, #28
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3330      	adds	r3, #48	; 0x30
 8000dee:	461a      	mov	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	4413      	add	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	f003 031f 	and.w	r3, r3, #31
 8000e08:	211f      	movs	r1, #31
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0e9b      	lsrs	r3, r3, #26
 8000e16:	f003 011f 	and.w	r1, r3, #31
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e2a:	bf00      	nop
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b087      	sub	sp, #28
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3314      	adds	r3, #20
 8000e46:	461a      	mov	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	0e5b      	lsrs	r3, r3, #25
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	0d1b      	lsrs	r3, r3, #20
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2107      	movs	r1, #7
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	0d1b      	lsrs	r3, r3, #20
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e80:	bf00      	nop
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d10a      	bne.n	8000eb6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eac:	431a      	orrs	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	407f0000 	.word	0x407f0000

08000edc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6093      	str	r3, [r2, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <LL_ADC_IsEnabled+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_ADC_IsEnabled+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff6:	f043 0204 	orr.w	r2, r3, #4
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b04      	cmp	r3, #4
 800101c:	d101      	bne.n	8001022 <LL_ADC_REG_IsConversionOngoing+0x18>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b08      	cmp	r3, #8
 8001042:	d101      	bne.n	8001048 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e1af      	b.n	80013d2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fb61 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff3f 	bl	8000f1c <LL_ADC_IsDeepPowerDownEnabled>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff25 	bl	8000ef8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff5a 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff3e 	bl	8000f44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010c8:	4b9f      	ldr	r3, [pc, #636]	; (8001348 <HAL_ADC_Init+0x2f0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	099b      	lsrs	r3, r3, #6
 80010ce:	4a9f      	ldr	r2, [pc, #636]	; (800134c <HAL_ADC_Init+0x2f4>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	099b      	lsrs	r3, r3, #6
 80010d6:	3301      	adds	r3, #1
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010dc:	e002      	b.n	80010e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f9      	bne.n	80010de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff3c 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10d      	bne.n	8001116 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff75 	bl	800100a <LL_ADC_REG_IsConversionOngoing>
 8001120:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 8148 	bne.w	80013c0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 8144 	bne.w	80013c0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001140:	f043 0202 	orr.w	r2, r3, #2
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff35 	bl	8000fbc <LL_ADC_IsEnabled>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d141      	bne.n	80011dc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001160:	d004      	beq.n	800116c <HAL_ADC_Init+0x114>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7a      	ldr	r2, [pc, #488]	; (8001350 <HAL_ADC_Init+0x2f8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d10f      	bne.n	800118c <HAL_ADC_Init+0x134>
 800116c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001170:	f7ff ff24 	bl	8000fbc <LL_ADC_IsEnabled>
 8001174:	4604      	mov	r4, r0
 8001176:	4876      	ldr	r0, [pc, #472]	; (8001350 <HAL_ADC_Init+0x2f8>)
 8001178:	f7ff ff20 	bl	8000fbc <LL_ADC_IsEnabled>
 800117c:	4603      	mov	r3, r0
 800117e:	4323      	orrs	r3, r4
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e012      	b.n	80011b2 <HAL_ADC_Init+0x15a>
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <HAL_ADC_Init+0x2fc>)
 800118e:	f7ff ff15 	bl	8000fbc <LL_ADC_IsEnabled>
 8001192:	4604      	mov	r4, r0
 8001194:	4870      	ldr	r0, [pc, #448]	; (8001358 <HAL_ADC_Init+0x300>)
 8001196:	f7ff ff11 	bl	8000fbc <LL_ADC_IsEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	431c      	orrs	r4, r3
 800119e:	486f      	ldr	r0, [pc, #444]	; (800135c <HAL_ADC_Init+0x304>)
 80011a0:	f7ff ff0c 	bl	8000fbc <LL_ADC_IsEnabled>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4323      	orrs	r3, r4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d012      	beq.n	80011dc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011be:	d004      	beq.n	80011ca <HAL_ADC_Init+0x172>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a62      	ldr	r2, [pc, #392]	; (8001350 <HAL_ADC_Init+0x2f8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Init+0x176>
 80011ca:	4a65      	ldr	r2, [pc, #404]	; (8001360 <HAL_ADC_Init+0x308>)
 80011cc:	e000      	b.n	80011d0 <HAL_ADC_Init+0x178>
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_ADC_Init+0x30c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4610      	mov	r0, r2
 80011d8:	f7ff fd1c 	bl	8000c14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7f5b      	ldrb	r3, [r3, #29]
 80011e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	3b01      	subs	r3, #1
 8001210:	045b      	lsls	r3, r3, #17
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_ADC_Init+0x310>)
 800123c:	4013      	ands	r3, r2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	430b      	orrs	r3, r1
 8001246:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fed1 	bl	800100a <LL_ADC_REG_IsConversionOngoing>
 8001268:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fede 	bl	8001030 <LL_ADC_INJ_IsConversionOngoing>
 8001274:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d17f      	bne.n	800137c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d17c      	bne.n	800137c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001286:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800128e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800129e:	f023 0302 	bic.w	r3, r3, #2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d017      	beq.n	80012e4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6911      	ldr	r1, [r2, #16]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80012e2:	e013      	b.n	800130c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12a      	bne.n	800136c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001338:	430a      	orrs	r2, r1
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	e019      	b.n	800137c <HAL_ADC_Init+0x324>
 8001348:	20000084 	.word	0x20000084
 800134c:	053e2d63 	.word	0x053e2d63
 8001350:	50000100 	.word	0x50000100
 8001354:	50000400 	.word	0x50000400
 8001358:	50000500 	.word	0x50000500
 800135c:	50000600 	.word	0x50000600
 8001360:	50000300 	.word	0x50000300
 8001364:	50000700 	.word	0x50000700
 8001368:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10c      	bne.n	800139e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f023 010f 	bic.w	r1, r3, #15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	e007      	b.n	80013ae <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 020f 	bic.w	r2, r2, #15
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80013be:	e007      	b.n	80013d0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	f043 0210 	orr.w	r2, r3, #16
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop

080013dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f0:	d004      	beq.n	80013fc <HAL_ADC_Start_DMA+0x20>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_ADC_Start_DMA+0x184>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_Start_DMA+0x24>
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_ADC_Start_DMA+0x188>)
 80013fe:	e000      	b.n	8001402 <HAL_ADC_Start_DMA+0x26>
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_ADC_Start_DMA+0x18c>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd6a 	bl	8000edc <LL_ADC_GetMultimode>
 8001408:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fdfb 	bl	800100a <LL_ADC_REG_IsConversionOngoing>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 809b 	bne.w	8001552 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADC_Start_DMA+0x4e>
 8001426:	2302      	movs	r3, #2
 8001428:	e096      	b.n	8001558 <HAL_ADC_Start_DMA+0x17c>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_ADC_Start_DMA+0x190>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d008      	beq.n	800144e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d002      	beq.n	800144e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b09      	cmp	r3, #9
 800144c:	d17a      	bne.n	8001544 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fcf6 	bl	8001e40 <ADC_Enable>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d16d      	bne.n	800153a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_ADC_Start_DMA+0x184>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d009      	beq.n	8001490 <HAL_ADC_Start_DMA+0xb4>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <HAL_ADC_Start_DMA+0x194>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d002      	beq.n	800148c <HAL_ADC_Start_DMA+0xb0>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	e003      	b.n	8001494 <HAL_ADC_Start_DMA+0xb8>
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_ADC_Start_DMA+0x198>)
 800148e:	e001      	b.n	8001494 <HAL_ADC_Start_DMA+0xb8>
 8001490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4293      	cmp	r3, r2
 800149a:	d002      	beq.n	80014a2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f023 0206 	bic.w	r2, r3, #6
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	661a      	str	r2, [r3, #96]	; 0x60
 80014c6:	e002      	b.n	80014ce <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	4a29      	ldr	r2, [pc, #164]	; (8001578 <HAL_ADC_Start_DMA+0x19c>)
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_ADC_Start_DMA+0x1a0>)
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_ADC_Start_DMA+0x1a4>)
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	221c      	movs	r2, #28
 80014ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0210 	orr.w	r2, r2, #16
 8001504:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3340      	adds	r3, #64	; 0x40
 8001520:	4619      	mov	r1, r3
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f001 fbb7 	bl	8002c98 <HAL_DMA_Start_IT>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd55 	bl	8000fe2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001538:	e00d      	b.n	8001556 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001542:	e008      	b.n	8001556 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001550:	e001      	b.n	8001556 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001556:	7dfb      	ldrb	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	50000100 	.word	0x50000100
 8001564:	50000300 	.word	0x50000300
 8001568:	50000700 	.word	0x50000700
 800156c:	50000600 	.word	0x50000600
 8001570:	50000500 	.word	0x50000500
 8001574:	50000400 	.word	0x50000400
 8001578:	08001f05 	.word	0x08001f05
 800157c:	08001fdd 	.word	0x08001fdd
 8001580:	08001ff9 	.word	0x08001ff9

08001584 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0b6      	sub	sp, #216	; 0xd8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d102      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x24>
 80015de:	2302      	movs	r3, #2
 80015e0:	f000 bc13 	b.w	8001e0a <HAL_ADC_ConfigChannel+0x84a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fd0a 	bl	800100a <LL_ADC_REG_IsConversionOngoing>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 83f3 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	f7ff fbe7 	bl	8000dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fcf8 	bl	800100a <LL_ADC_REG_IsConversionOngoing>
 800161a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fd04 	bl	8001030 <LL_ADC_INJ_IsConversionOngoing>
 8001628:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800162c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 81d9 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 81d4 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001648:	d10f      	bne.n	800166a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fbee 	bl	8000e36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb95 	bl	8000d92 <LL_ADC_SetSamplingTimeCommonConfig>
 8001668:	e00e      	b.n	8001688 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	461a      	mov	r2, r3
 8001678:	f7ff fbdd 	bl	8000e36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb85 	bl	8000d92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d022      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016ba:	f7ff fadf 	bl	8000c7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f7ff fb2b 	bl	8000d26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6919      	ldr	r1, [r3, #16]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7f1b      	ldrb	r3, [r3, #28]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x126>
 80016e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e4:	e000      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x128>
 80016e6:	2300      	movs	r3, #0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fb37 	bl	8000d5c <LL_ADC_SetOffsetSaturation>
 80016ee:	e17b      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fae4 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <HAL_ADC_ConfigChannel+0x15c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fad9 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	0e9b      	lsrs	r3, r3, #26
 8001716:	f003 021f 	and.w	r2, r3, #31
 800171a:	e01e      	b.n	800175a <HAL_ADC_ConfigChannel+0x19a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff face 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800173a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800173e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800174a:	2320      	movs	r3, #32
 800174c:	e004      	b.n	8001758 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800174e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x1b2>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	e018      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1e4>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800178e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e004      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800179a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa9d 	bl	8000cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2101      	movs	r1, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa81 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10a      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x222>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fa76 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	0e9b      	lsrs	r3, r3, #26
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	e01e      	b.n	8001820 <HAL_ADC_ConfigChannel+0x260>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fa6b 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e004      	b.n	800181e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x278>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0e9b      	lsrs	r3, r3, #26
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	e018      	b.n	800186a <HAL_ADC_ConfigChannel+0x2aa>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800184c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e004      	b.n	800186a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800186a:	429a      	cmp	r2, r3
 800186c:	d106      	bne.n	800187c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	2101      	movs	r1, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa3a 	bl	8000cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2102      	movs	r1, #2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa1e 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x2e8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2102      	movs	r1, #2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fa13 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	0e9b      	lsrs	r3, r3, #26
 80018a2:	f003 021f 	and.w	r2, r3, #31
 80018a6:	e01e      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x326>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa08 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e004      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80018da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x33e>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	e016      	b.n	800192c <HAL_ADC_ConfigChannel+0x36c>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800191e:	2320      	movs	r3, #32
 8001920:	e004      	b.n	800192c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800192c:	429a      	cmp	r2, r3
 800192e:	d106      	bne.n	800193e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	2102      	movs	r1, #2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f9d9 	bl	8000cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2103      	movs	r1, #3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f9bd 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_ADC_ConfigChannel+0x3aa>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2103      	movs	r1, #3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9b2 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	e017      	b.n	800199a <HAL_ADC_ConfigChannel+0x3da>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2103      	movs	r1, #3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f9a7 	bl	8000cc4 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001984:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e003      	b.n	8001998 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x3f2>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	e011      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x416>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80019ca:	2320      	movs	r3, #32
 80019cc:	e003      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80019ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	2103      	movs	r1, #3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f984 	bl	8000cf0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fae5 	bl	8000fbc <LL_ADC_IsEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 813d 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7ff fa40 	bl	8000e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4aa2      	ldr	r2, [pc, #648]	; (8001c9c <HAL_ADC_ConfigChannel+0x6dc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f040 812e 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10b      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x480>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	bf94      	ite	ls
 8001a38:	2301      	movls	r3, #1
 8001a3a:	2300      	movhi	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e019      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x4b4>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e003      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	bf94      	ite	ls
 8001a6e:	2301      	movls	r3, #1
 8001a70:	2300      	movhi	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d079      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x4d4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	069b      	lsls	r3, r3, #26
 8001a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a92:	e015      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x500>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	069b      	lsls	r3, r3, #26
 8001abc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x520>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	e017      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x550>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e003      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	ea42 0103 	orr.w	r1, r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x576>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e9b      	lsrs	r3, r3, #26
 8001b26:	3301      	adds	r3, #1
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	051b      	lsls	r3, r3, #20
 8001b34:	e018      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x5a8>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	e003      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	e07e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x5c8>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	3301      	adds	r3, #1
 8001b80:	069b      	lsls	r3, r3, #26
 8001b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b86:	e015      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x5f4>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	e003      	b.n	8001bac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	069b      	lsls	r3, r3, #26
 8001bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x614>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	e017      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x644>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	61fb      	str	r3, [r7, #28]
  return result;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	ea42 0103 	orr.w	r1, r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x670>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0e9b      	lsrs	r3, r3, #26
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	3b1e      	subs	r3, #30
 8001c28:	051b      	lsls	r3, r3, #20
 8001c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	e01b      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x6a8>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	613b      	str	r3, [r7, #16]
  return result;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	e003      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	051b      	lsls	r3, r3, #20
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff f8e1 	bl	8000e36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_ADC_ConfigChannel+0x6e0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80be 	beq.w	8001dfe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8a:	d004      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x6d6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_ADC_ConfigChannel+0x6e4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x6ec>
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_ADC_ConfigChannel+0x6e8>)
 8001c98:	e009      	b.n	8001cae <HAL_ADC_ConfigChannel+0x6ee>
 8001c9a:	bf00      	nop
 8001c9c:	407f0000 	.word	0x407f0000
 8001ca0:	80080000 	.word	0x80080000
 8001ca4:	50000100 	.word	0x50000100
 8001ca8:	50000300 	.word	0x50000300
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_ADC_ConfigChannel+0x854>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ffd6 	bl	8000c60 <LL_ADC_GetCommonPathInternalCh>
 8001cb4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	; (8001e18 <HAL_ADC_ConfigChannel+0x858>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_ADC_ConfigChannel+0x70c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_ADC_ConfigChannel+0x85c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d13a      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d134      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce0:	d005      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x72e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4e      	ldr	r2, [pc, #312]	; (8001e20 <HAL_ADC_ConfigChannel+0x860>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f040 8085 	bne.w	8001df8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_ConfigChannel+0x742>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_ADC_ConfigChannel+0x864>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x746>
 8001d02:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_ADC_ConfigChannel+0x868>)
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x748>
 8001d06:	4a43      	ldr	r2, [pc, #268]	; (8001e14 <HAL_ADC_ConfigChannel+0x854>)
 8001d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7fe ff91 	bl	8000c3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_ADC_ConfigChannel+0x86c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	4a44      	ldr	r2, [pc, #272]	; (8001e30 <HAL_ADC_ConfigChannel+0x870>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d32:	e002      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f9      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d40:	e05a      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_ADC_ConfigChannel+0x874>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d125      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x7d8>
 8001d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11f      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_ADC_ConfigChannel+0x864>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d104      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x7ac>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_ADC_ConfigChannel+0x878>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d047      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d74:	d004      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x7c0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_ADC_ConfigChannel+0x864>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x7c4>
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_ADC_ConfigChannel+0x868>)
 8001d82:	e000      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x7c6>
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <HAL_ADC_ConfigChannel+0x854>)
 8001d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f7fe ff52 	bl	8000c3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d96:	e031      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_ADC_ConfigChannel+0x87c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12d      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d127      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <HAL_ADC_ConfigChannel+0x864>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x80c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_ADC_ConfigChannel+0x864>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x810>
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_ADC_ConfigChannel+0x868>)
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x812>
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_ADC_ConfigChannel+0x854>)
 8001dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f7fe ff2c 	bl	8000c3a <LL_ADC_SetCommonPathInternalCh>
 8001de2:	e00c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001df6:	e002      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001df8:	bf00      	nop
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	37d8      	adds	r7, #216	; 0xd8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	50000700 	.word	0x50000700
 8001e18:	c3210000 	.word	0xc3210000
 8001e1c:	90c00010 	.word	0x90c00010
 8001e20:	50000600 	.word	0x50000600
 8001e24:	50000100 	.word	0x50000100
 8001e28:	50000300 	.word	0x50000300
 8001e2c:	20000084 	.word	0x20000084
 8001e30:	053e2d63 	.word	0x053e2d63
 8001e34:	c7520000 	.word	0xc7520000
 8001e38:	50000500 	.word	0x50000500
 8001e3c:	cb840000 	.word	0xcb840000

08001e40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f8b5 	bl	8000fbc <LL_ADC_IsEnabled>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d14d      	bne.n	8001ef4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <ADC_Enable+0xc0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e039      	b.n	8001ef6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f884 	bl	8000f94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fe94 	bl	8000bb8 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e92:	e028      	b.n	8001ee6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f88f 	bl	8000fbc <LL_ADC_IsEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f873 	bl	8000f94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eae:	f7fe fe83 	bl	8000bb8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d914      	bls.n	8001ee6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d00d      	beq.n	8001ee6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e007      	b.n	8001ef6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d1cf      	bne.n	8001e94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	8000003f 	.word	0x8000003f

08001f04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d14b      	bne.n	8001fb6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d021      	beq.n	8001f7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ff3b 	bl	8000db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d032      	beq.n	8001fae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d12b      	bne.n	8001fae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11f      	bne.n	8001fae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f7a:	e018      	b.n	8001fae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fae8 	bl	8001584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fb4:	e00e      	b.n	8001fd4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff faf2 	bl	80015ac <HAL_ADC_ErrorCallback>
}
 8001fc8:	e004      	b.n	8001fd4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7ff fad4 	bl	8001598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f043 0204 	orr.w	r2, r3, #4
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff fac4 	bl	80015ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <LL_ADC_IsEnabled>:
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <LL_ADC_IsEnabled+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_IsEnabled+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_REG_IsConversionOngoing>:
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d101      	bne.n	800206a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b0a1      	sub	sp, #132	; 0x84
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002092:	2302      	movs	r3, #2
 8002094:	e0e7      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800209e:	2300      	movs	r3, #0
 80020a0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80020a2:	2300      	movs	r3, #0
 80020a4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ae:	d102      	bne.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020b0:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	e009      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	e001      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0be      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffb1 	bl	8002052 <LL_ADC_REG_IsConversionOngoing>
 80020f0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ffab 	bl	8002052 <LL_ADC_REG_IsConversionOngoing>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80a0 	bne.w	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 809c 	bne.w	8002244 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002114:	d004      	beq.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002120:	4b56      	ldr	r3, [pc, #344]	; (800227c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002122:	e000      	b.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002126:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d04b      	beq.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002142:	035b      	lsls	r3, r3, #13
 8002144:	430b      	orrs	r3, r1
 8002146:	431a      	orrs	r2, r3
 8002148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002154:	d004      	beq.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d10f      	bne.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002160:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002164:	f7ff ff62 	bl	800202c <LL_ADC_IsEnabled>
 8002168:	4604      	mov	r4, r0
 800216a:	4841      	ldr	r0, [pc, #260]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800216c:	f7ff ff5e 	bl	800202c <LL_ADC_IsEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	4323      	orrs	r3, r4
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e012      	b.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002180:	483c      	ldr	r0, [pc, #240]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002182:	f7ff ff53 	bl	800202c <LL_ADC_IsEnabled>
 8002186:	4604      	mov	r4, r0
 8002188:	483b      	ldr	r0, [pc, #236]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800218a:	f7ff ff4f 	bl	800202c <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	431c      	orrs	r4, r3
 8002192:	483c      	ldr	r0, [pc, #240]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002194:	f7ff ff4a 	bl	800202c <LL_ADC_IsEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	4323      	orrs	r3, r4
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d056      	beq.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	430a      	orrs	r2, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021c6:	e047      	b.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021dc:	d004      	beq.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10f      	bne.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80021e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ec:	f7ff ff1e 	bl	800202c <LL_ADC_IsEnabled>
 80021f0:	4604      	mov	r4, r0
 80021f2:	481f      	ldr	r0, [pc, #124]	; (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021f4:	f7ff ff1a 	bl	800202c <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4323      	orrs	r3, r4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e012      	b.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002208:	481a      	ldr	r0, [pc, #104]	; (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800220a:	f7ff ff0f 	bl	800202c <LL_ADC_IsEnabled>
 800220e:	4604      	mov	r4, r0
 8002210:	4819      	ldr	r0, [pc, #100]	; (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002212:	f7ff ff0b 	bl	800202c <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	431c      	orrs	r4, r3
 800221a:	481a      	ldr	r0, [pc, #104]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800221c:	f7ff ff06 	bl	800202c <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	4323      	orrs	r3, r4
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800223a:	f023 030f 	bic.w	r3, r3, #15
 800223e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002240:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002242:	e009      	b.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002256:	e000      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002258:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002262:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002266:	4618      	mov	r0, r3
 8002268:	3784      	adds	r7, #132	; 0x84
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	50000100 	.word	0x50000100
 8002274:	50000400 	.word	0x50000400
 8002278:	50000500 	.word	0x50000500
 800227c:	50000300 	.word	0x50000300
 8002280:	50000700 	.word	0x50000700
 8002284:	50000600 	.word	0x50000600

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff29 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff40 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff90 	bl	800237c <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5f 	bl	8002328 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff33 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa4 	bl	80023e4 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e014      	b.n	80024e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7fe f9c1 	bl	8000850 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	795b      	ldrb	r3, [r3, #5]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_DAC_ConfigChannel+0x18>
 800253c:	2302      	movs	r3, #2
 800253e:	e192      	b.n	8002866 <HAL_DAC_ConfigChannel+0x33e>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2202      	movs	r2, #2
 800254a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d174      	bne.n	800263e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002554:	f7fe fb30 	bl	8000bb8 <HAL_GetTick>
 8002558:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d134      	bne.n	80025ca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002560:	e011      	b.n	8002586 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002562:	f7fe fb29 	bl	8000bb8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d90a      	bls.n	8002586 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f043 0208 	orr.w	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2203      	movs	r2, #3
 8002580:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e16f      	b.n	8002866 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e6      	bne.n	8002562 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002594:	2001      	movs	r0, #1
 8002596:	f7fe fb1b 	bl	8000bd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
 80025a4:	e01e      	b.n	80025e4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025a6:	f7fe fb07 	bl	8000bb8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d90a      	bls.n	80025ca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f043 0208 	orr.w	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2203      	movs	r2, #3
 80025c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e14d      	b.n	8002866 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dbe8      	blt.n	80025a6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe fafb 	bl	8000bd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	ea02 0103 	and.w	r1, r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	21ff      	movs	r1, #255	; 0xff
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	ea02 0103 	and.w	r1, r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d11d      	bne.n	8002682 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	4013      	ands	r3, r2
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002676:	4313      	orrs	r3, r2
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2207      	movs	r2, #7
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4013      	ands	r3, r2
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	e00f      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d102      	bne.n	80026ba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80026b4:	2301      	movs	r3, #1
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	e008      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80026c2:	2301      	movs	r3, #1
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	e001      	b.n	80026cc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	6a3a      	ldr	r2, [r7, #32]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	4013      	ands	r3, r2
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_DAC_ConfigChannel+0x1d8>
 80026fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fe:	e000      	b.n	8002702 <HAL_DAC_ConfigChannel+0x1da>
 8002700:	2300      	movs	r3, #0
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	4013      	ands	r3, r2
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	795b      	ldrb	r3, [r3, #5]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_DAC_ConfigChannel+0x204>
 8002726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272a:	e000      	b.n	800272e <HAL_DAC_ConfigChannel+0x206>
 800272c:	2300      	movs	r3, #0
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d114      	bne.n	800276e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002744:	f001 fc50 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8002748:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <HAL_DAC_ConfigChannel+0x348>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d904      	bls.n	800275c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e00f      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_DAC_ConfigChannel+0x34c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d90a      	bls.n	800277a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	e006      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	4313      	orrs	r3, r2
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	e000      	b.n	800277c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800277a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4313      	orrs	r3, r2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	400a      	ands	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	4013      	ands	r3, r2
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	4313      	orrs	r3, r2
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	22c0      	movs	r2, #192	; 0xc0
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43da      	mvns	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	400a      	ands	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	f640 710f 	movw	r1, #3855	; 0xf0f
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	ea02 0103 	and.w	r1, r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	09896800 	.word	0x09896800
 8002874:	04c4b400 	.word	0x04c4b400

08002878 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fe2f 	bl	80024ea <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	711a      	strb	r2, [r3, #4]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fe28 	bl	80024fe <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff fe1e 	bl	8002512 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	711a      	strb	r2, [r3, #4]
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0UL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  /* Ensure Channel 2 exists for this particular DAC instance */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	795b      	ldrb	r3, [r3, #5]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DACEx_DualStart_DMA+0x1e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e095      	b.n	8002a2e <HAL_DACEx_DualStart_DMA+0x14a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2202      	movs	r2, #2
 800290c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d114      	bne.n	800293e <HAL_DACEx_DualStart_DMA+0x5a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_DACEx_DualStart_DMA+0x154>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <HAL_DACEx_DualStart_DMA+0x158>)
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a45      	ldr	r2, [pc, #276]	; (8002a40 <HAL_DACEx_DualStart_DMA+0x15c>)
 800292a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e013      	b.n	8002966 <HAL_DACEx_DualStart_DMA+0x82>
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_DACEx_DualStart_DMA+0x160>)
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <HAL_DACEx_DualStart_DMA+0x164>)
 800294c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <HAL_DACEx_DualStart_DMA+0x168>)
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002964:	601a      	str	r2, [r3, #0]
  }

  switch (Alignment)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d013      	beq.n	8002994 <HAL_DACEx_DualStart_DMA+0xb0>
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2b08      	cmp	r3, #8
 8002970:	d815      	bhi.n	800299e <HAL_DACEx_DualStart_DMA+0xba>
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DACEx_DualStart_DMA+0x9c>
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b04      	cmp	r3, #4
 800297c:	d005      	beq.n	800298a <HAL_DACEx_DualStart_DMA+0xa6>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
      break;
    default:
      break;
 800297e:	e00e      	b.n	800299e <HAL_DACEx_DualStart_DMA+0xba>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3320      	adds	r3, #32
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	e00a      	b.n	80029a0 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	613b      	str	r3, [r7, #16]
      break;
 8002992:	e005      	b.n	80029a0 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3328      	adds	r3, #40	; 0x28
 800299a:	613b      	str	r3, [r7, #16]
      break;
 800299c:	e000      	b.n	80029a0 <HAL_DACEx_DualStart_DMA+0xbc>
      break;
 800299e:	bf00      	nop
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d111      	bne.n	80029ca <HAL_DACEx_DualStart_DMA+0xe6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6898      	ldr	r0, [r3, #8]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	f000 f96a 	bl	8002c98 <HAL_DMA_Start_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]
 80029c8:	e010      	b.n	80029ec <HAL_DACEx_DualStart_DMA+0x108>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68d8      	ldr	r0, [r3, #12]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	f000 f958 	bl	8002c98 <HAL_DMA_Start_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <HAL_DACEx_DualStart_DMA+0x13c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a16:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7fe f8d9 	bl	8000bd0 <HAL_Delay>
 8002a1e:	e005      	b.n	8002a2c <HAL_DACEx_DualStart_DMA+0x148>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08002879 	.word	0x08002879
 8002a3c:	0800289b 	.word	0x0800289b
 8002a40:	080028b7 	.word	0x080028b7
 8002a44:	08002adb 	.word	0x08002adb
 8002a48:	08002afd 	.word	0x08002afd
 8002a4c:	08002b19 	.word	0x08002b19

08002a50 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d105      	bne.n	8002a70 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e004      	b.n	8002a7a <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	3320      	adds	r3, #32
 8002a88:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ffd8 	bl	8002a9e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	711a      	strb	r2, [r3, #4]
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff ffd1 	bl	8002ab2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ffc7 	bl	8002ac6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	711a      	strb	r2, [r3, #4]
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08d      	b.n	8002c76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_DMA_Init+0x138>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d80f      	bhi.n	8002b86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b45      	ldr	r3, [pc, #276]	; (8002c84 <HAL_DMA_Init+0x13c>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a45      	ldr	r2, [pc, #276]	; (8002c88 <HAL_DMA_Init+0x140>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_DMA_Init+0x144>)
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
 8002b84:	e00e      	b.n	8002ba4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <HAL_DMA_Init+0x148>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_DMA_Init+0x140>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_DMA_Init+0x14c>)
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9b6 	bl	8002f68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c04:	d102      	bne.n	8002c0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c20:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_DMA_Init+0x104>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d80c      	bhi.n	8002c4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9d6 	bl	8002fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e008      	b.n	8002c5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40020407 	.word	0x40020407
 8002c84:	bffdfff8 	.word	0xbffdfff8
 8002c88:	cccccccd 	.word	0xcccccccd
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	bffdfbf8 	.word	0xbffdfbf8
 8002c94:	40020400 	.word	0x40020400

08002c98 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Start_IT+0x20>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e066      	b.n	8002d86 <HAL_DMA_Start_IT+0xee>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d155      	bne.n	8002d78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f8fb 	bl	8002eec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 020e 	orr.w	r2, r2, #14
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e00f      	b.n	8002d30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 020a 	orr.w	r2, r2, #10
 8002d2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e005      	b.n	8002d84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d026      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x7a>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d021      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0204 	bic.w	r2, r2, #4
 8002de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2104      	movs	r1, #4
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d071      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e06:	e06c      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2202      	movs	r2, #2
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02e      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d029      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020a 	bic.w	r2, r2, #10
 8002e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2102      	movs	r1, #2
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d038      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e78:	e033      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2208      	movs	r2, #8
 8002e84:	409a      	lsls	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d025      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 020e 	bic.w	r2, r2, #14
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
}
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d802      	bhi.n	8002f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e001      	b.n	8002f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f84:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3b08      	subs	r3, #8
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2201      	movs	r2, #1
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40020407 	.word	0x40020407
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020820 	.word	0x40020820
 8002fdc:	cccccccd 	.word	0xcccccccd
 8002fe0:	40020880 	.word	0x40020880

08002fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003006:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2201      	movs	r2, #1
 8003012:	409a      	lsls	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	1000823f 	.word	0x1000823f
 8003028:	40020940 	.word	0x40020940

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800303a:	e15a      	b.n	80032f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 814c 	beq.w	80032ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d005      	beq.n	800306c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003068:	2b02      	cmp	r3, #2
 800306a:	d130      	bne.n	80030ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a2:	2201      	movs	r2, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0201 	and.w	r2, r3, #1
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d017      	beq.n	800310a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d123      	bne.n	800315e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a6 	beq.w	80032ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_GPIO_Init+0x2e4>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_GPIO_Init+0x2e4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6613      	str	r3, [r2, #96]	; 0x60
 80031ac:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_GPIO_Init+0x2e4>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b8:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e2:	d01f      	beq.n	8003224 <HAL_GPIO_Init+0x1f8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a4c      	ldr	r2, [pc, #304]	; (8003318 <HAL_GPIO_Init+0x2ec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d019      	beq.n	8003220 <HAL_GPIO_Init+0x1f4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a4b      	ldr	r2, [pc, #300]	; (800331c <HAL_GPIO_Init+0x2f0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_GPIO_Init+0x1f0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_GPIO_Init+0x2f4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_GPIO_Init+0x1ec>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a49      	ldr	r2, [pc, #292]	; (8003324 <HAL_GPIO_Init+0x2f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <HAL_GPIO_Init+0x1e8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a48      	ldr	r2, [pc, #288]	; (8003328 <HAL_GPIO_Init+0x2fc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_Init+0x1e4>
 800320c:	2305      	movs	r3, #5
 800320e:	e00a      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 8003210:	2306      	movs	r3, #6
 8003212:	e008      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 8003214:	2304      	movs	r3, #4
 8003216:	e006      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 8003218:	2303      	movs	r3, #3
 800321a:	e004      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 800321c:	2302      	movs	r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_GPIO_Init+0x1fa>
 8003224:	2300      	movs	r3, #0
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4093      	lsls	r3, r2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003236:	4937      	ldr	r1, [pc, #220]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003244:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_GPIO_Init+0x300>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003268:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_GPIO_Init+0x300>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_GPIO_Init+0x300>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003292:	4a26      	ldr	r2, [pc, #152]	; (800332c <HAL_GPIO_Init+0x300>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_GPIO_Init+0x300>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_GPIO_Init+0x300>)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_GPIO_Init+0x300>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_GPIO_Init+0x300>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3301      	adds	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f ae9d 	bne.w	800303c <HAL_GPIO_Init+0x10>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000
 8003318:	48000400 	.word	0x48000400
 800331c:	48000800 	.word	0x48000800
 8003320:	48000c00 	.word	0x48000c00
 8003324:	48001000 	.word	0x48001000
 8003328:	48001400 	.word	0x48001400
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0bb      	b.n	80034be <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b05      	cmp	r3, #5
 8003350:	d101      	bne.n	8003356 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0b3      	b.n	80034be <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d101      	bne.n	8003366 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0ab      	b.n	80034be <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_OPAMP_Init+0x198>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_OPAMP_Init+0x198>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6613      	str	r3, [r2, #96]	; 0x60
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <HAL_OPAMP_Init+0x198>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd faaa 	bl	80008ec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d003      	beq.n	80033a8 <HAL_OPAMP_Init+0x78>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d133      	bne.n	8003410 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0110 	bic.w	r1, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_OPAMP_Init+0x19c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6851      	ldr	r1, [r2, #4]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6892      	ldr	r2, [r2, #8]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	7d09      	ldrb	r1, [r1, #20]
 80033dc:	2901      	cmp	r1, #1
 80033de:	d102      	bne.n	80033e6 <HAL_OPAMP_Init+0xb6>
 80033e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033e4:	e000      	b.n	80033e8 <HAL_OPAMP_Init+0xb8>
 80033e6:	2100      	movs	r1, #0
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033f4:	4311      	orrs	r1, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033fa:	04d2      	lsls	r2, r2, #19
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003402:	0612      	lsls	r2, r2, #24
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	430b      	orrs	r3, r1
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e035      	b.n	800347c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 0110 	bic.w	r1, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_OPAMP_Init+0x19c>)
 800342e:	4013      	ands	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6851      	ldr	r1, [r2, #4]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	4311      	orrs	r1, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6912      	ldr	r2, [r2, #16]
 8003444:	430a      	orrs	r2, r1
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	7d09      	ldrb	r1, [r1, #20]
 800344a:	2901      	cmp	r1, #1
 800344c:	d102      	bne.n	8003454 <HAL_OPAMP_Init+0x124>
 800344e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003452:	e000      	b.n	8003456 <HAL_OPAMP_Init+0x126>
 8003454:	2100      	movs	r1, #0
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003468:	04d2      	lsls	r2, r2, #19
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003470:	0612      	lsls	r2, r2, #24
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db10      	blt.n	80034a8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	e0003e11 	.word	0xe0003e11

080034d0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e01d      	b.n	8003524 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d102      	bne.n	80034fa <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e014      	b.n	8003524 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10c      	bne.n	8003520 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800351e:	e001      	b.n	8003524 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d141      	bne.n	80035c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003542:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d131      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003550:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003556:	4a46      	ldr	r2, [pc, #280]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003568:	4a41      	ldr	r2, [pc, #260]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800356e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2232      	movs	r2, #50	; 0x32
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	4a3f      	ldr	r2, [pc, #252]	; (8003678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	0c9b      	lsrs	r3, r3, #18
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003586:	e002      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3b01      	subs	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d102      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f2      	bne.n	8003588 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d158      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e057      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b4:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035c4:	e04d      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035cc:	d141      	bne.n	8003652 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d131      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e2:	4a23      	ldr	r2, [pc, #140]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2232      	movs	r2, #50	; 0x32
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003612:	e002      	b.n	800361a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3b01      	subs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d102      	bne.n	800362e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f2      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d112      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e011      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003650:	e007      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003660:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40007000 	.word	0x40007000
 8003674:	20000084 	.word	0x20000084
 8003678:	431bde83 	.word	0x431bde83

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e306      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4b94      	ldr	r3, [pc, #592]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e2e1      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b85      	ldr	r3, [pc, #532]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7e      	ldr	r2, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7b      	ldr	r2, [pc, #492]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a77      	ldr	r2, [pc, #476]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a74      	ldr	r2, [pc, #464]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fa40 	bl	8000bb8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fa3c 	bl	8000bb8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e2a6      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd fa2c 	bl	8000bb8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fa28 	bl	8000bb8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e292      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	4b60      	ldr	r3, [pc, #384]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d075      	beq.n	800387e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379c:	4b56      	ldr	r3, [pc, #344]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_OscConfig+0x136>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_OscConfig+0x13c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11f      	bne.n	80037f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x154>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e265      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4946      	ldr	r1, [pc, #280]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037e4:	4b45      	ldr	r3, [pc, #276]	; (80038fc <HAL_RCC_OscConfig+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd f999 	bl	8000b20 <HAL_InitTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d043      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e251      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd f9d4 	bl	8000bb8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd f9d0 	bl	8000bb8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e23a      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	492d      	ldr	r1, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
 8003846:	e01a      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800384e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd f9b0 	bl	8000bb8 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fd f9ac 	bl	8000bb8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e216      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e0>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d041      	beq.n	800390e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01c      	beq.n	80038cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fd f989 	bl	8000bb8 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd f985 	bl	8000bb8 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1ef      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ef      	beq.n	80038aa <HAL_RCC_OscConfig+0x22e>
 80038ca:	e020      	b.n	800390e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd f96c 	bl	8000bb8 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e2:	e00d      	b.n	8003900 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd f968 	bl	8000bb8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d906      	bls.n	8003900 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1d2      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ea      	bne.n	80038e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80a6 	beq.w	8003a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003920:	4b84      	ldr	r3, [pc, #528]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_OscConfig+0x2b4>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x2b6>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4a7e      	ldr	r2, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	4b7c      	ldr	r3, [pc, #496]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4b79      	ldr	r3, [pc, #484]	; (8003b38 <HAL_RCC_OscConfig+0x4bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x4bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x4bc>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fd f925 	bl	8000bb8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd f921 	bl	8000bb8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e18b      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x4bc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_RCC_OscConfig+0x32e>
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	e024      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d110      	bne.n	80039d4 <HAL_RCC_OscConfig+0x358>
 80039b2:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	4a5e      	ldr	r2, [pc, #376]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	4a5a      	ldr	r2, [pc, #360]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039d4:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d016      	beq.n	8003a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd f8dc 	bl	8000bb8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd f8d8 	bl	8000bb8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e140      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ed      	beq.n	8003a04 <HAL_RCC_OscConfig+0x388>
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd f8c5 	bl	8000bb8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd f8c1 	bl	8000bb8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e129      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a48:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ed      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03c      	beq.n	8003aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd f894 	bl	8000bb8 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a94:	f7fd f890 	bl	8000bb8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0fa      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ef      	beq.n	8003a94 <HAL_RCC_OscConfig+0x418>
 8003ab4:	e01b      	b.n	8003aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd f877 	bl	8000bb8 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ace:	f7fd f873 	bl	8000bb8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0dd      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ef      	bne.n	8003ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80d1 	beq.w	8003c9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f000 808b 	beq.w	8003c1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d15e      	bne.n	8003bcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fd f84d 	bl	8000bb8 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	e00c      	b.n	8003b3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd f849 	bl	8000bb8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d905      	bls.n	8003b3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0b3      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ec      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b48:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <HAL_RCC_OscConfig+0x62c>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6a11      	ldr	r1, [r2, #32]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b62:	0212      	lsls	r2, r2, #8
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0552      	lsls	r2, r2, #21
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b76:	0852      	lsrs	r2, r2, #1
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0652      	lsls	r2, r2, #25
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b82:	06d2      	lsls	r2, r2, #27
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4947      	ldr	r1, [pc, #284]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a44      	ldr	r2, [pc, #272]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b98:	4b42      	ldr	r3, [pc, #264]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd f808 	bl	8000bb8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd f804 	bl	8000bb8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e06e      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x530>
 8003bca:	e066      	b.n	8003c9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003be4:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003bea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fc ffe0 	bl	8000bb8 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fc ffdc 	bl	8000bb8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e046      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x580>
 8003c1a:	e03e      	b.n	8003c9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e039      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <HAL_RCC_OscConfig+0x628>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d12c      	bne.n	8003c96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	3b01      	subs	r3, #1
 8003c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d123      	bne.n	8003c96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11b      	bne.n	8003c96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d113      	bne.n	8003c96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	019f800c 	.word	0x019f800c

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e11e      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b91      	ldr	r3, [pc, #580]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 020f 	bic.w	r2, r3, #15
 8003cda:	498c      	ldr	r1, [pc, #560]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b8a      	ldr	r3, [pc, #552]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e106      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d073      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d129      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0f4      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d18:	f000 f972 	bl	8004000 <RCC_GetSysClockFreqFromPLLSource>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d93f      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d26:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12f      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e024      	b.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0c6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0be      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d84:	f000 f8ce 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a61      	ldr	r2, [pc, #388]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d909      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4957      	ldr	r1, [pc, #348]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fc fefe 	bl	8000bb8 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fc fefa 	bl	8000bb8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e095      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4936      	ldr	r1, [pc, #216]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d21d      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 020f 	bic.w	r2, r3, #15
 8003e64:	4929      	ldr	r1, [pc, #164]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e6c:	f7fc fea4 	bl	8000bb8 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fc fea0 	bl	8000bb8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e03b      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1ed      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4917      	ldr	r1, [pc, #92]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490f      	ldr	r1, [pc, #60]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ed6:	f000 f825 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490c      	ldr	r1, [pc, #48]	; (8003f18 <HAL_RCC_ClockConfig+0x26c>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x270>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fe10 	bl	8000b20 <HAL_InitTick>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	04c4b400 	.word	0x04c4b400
 8003f18:	080050f8 	.word	0x080050f8
 8003f1c:	20000084 	.word	0x20000084
 8003f20:	20000088 	.word	0x20000088

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f36:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e047      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e03e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f4e:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d136      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	68d2      	ldr	r2, [r2, #12]
 8003f84:	0a12      	lsrs	r2, r2, #8
 8003f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0a12      	lsrs	r2, r2, #8
 8003fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
      break;
 8003faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0e5b      	lsrs	r3, r3, #25
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e001      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fcc:	693b      	ldr	r3, [r7, #16]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000084 	.word	0x20000084

08004000 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3301      	adds	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d10c      	bne.n	800403e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800402e:	68d2      	ldr	r2, [r2, #12]
 8004030:	0a12      	lsrs	r2, r2, #8
 8004032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	617b      	str	r3, [r7, #20]
    break;
 800403c:	e00c      	b.n	8004058 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	0a12      	lsrs	r2, r2, #8
 800404c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    break;
 8004056:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0e5b      	lsrs	r3, r3, #25
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004072:	687b      	ldr	r3, [r7, #4]
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40021000 	.word	0x40021000
 8004084:	007a1200 	.word	0x007a1200
 8004088:	00f42400 	.word	0x00f42400

0800408c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004094:	2300      	movs	r3, #0
 8004096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004098:	2300      	movs	r3, #0
 800409a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8098 	beq.w	80041da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d6:	4b3a      	ldr	r3, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a39      	ldr	r2, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e2:	f7fc fd69 	bl	8000bb8 <HAL_GetTick>
 80040e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e8:	e009      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fc fd65 	bl	8000bb8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	74fb      	strb	r3, [r7, #19]
        break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ef      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d159      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01e      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d019      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412c:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004148:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fc fd25 	bl	8000bb8 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004170:	e00b      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fc fd21 	bl	8000bb8 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d902      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	74fb      	strb	r3, [r7, #19]
            break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ec      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	74bb      	strb	r3, [r7, #18]
 80041ba:	e005      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c8:	7c7b      	ldrb	r3, [r7, #17]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4ba7      	ldr	r3, [pc, #668]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4aa6      	ldr	r2, [pc, #664]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e6:	4ba1      	ldr	r3, [pc, #644]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f023 0203 	bic.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	499d      	ldr	r1, [pc, #628]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004208:	4b98      	ldr	r3, [pc, #608]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 020c 	bic.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4995      	ldr	r1, [pc, #596]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422a:	4b90      	ldr	r3, [pc, #576]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	498c      	ldr	r1, [pc, #560]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800424c:	4b87      	ldr	r3, [pc, #540]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	4984      	ldr	r1, [pc, #528]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800426e:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	497b      	ldr	r1, [pc, #492]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004290:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	4973      	ldr	r1, [pc, #460]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b2:	4b6e      	ldr	r3, [pc, #440]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	496a      	ldr	r1, [pc, #424]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d4:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4962      	ldr	r1, [pc, #392]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f6:	4b5d      	ldr	r3, [pc, #372]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	4959      	ldr	r1, [pc, #356]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004318:	4b54      	ldr	r3, [pc, #336]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	4951      	ldr	r1, [pc, #324]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433a:	4b4c      	ldr	r3, [pc, #304]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4948      	ldr	r1, [pc, #288]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4940      	ldr	r1, [pc, #256]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437c:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a3a      	ldr	r2, [pc, #232]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004386:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	4932      	ldr	r1, [pc, #200]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043cc:	4b27      	ldr	r3, [pc, #156]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	4924      	ldr	r1, [pc, #144]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a10      	ldr	r2, [pc, #64]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d019      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445a:	d109      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a02      	ldr	r2, [pc, #8]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4926      	ldr	r1, [pc, #152]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	4918      	ldr	r1, [pc, #96]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d105      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	490a      	ldr	r1, [pc, #40]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004516:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004518:	7cbb      	ldrb	r3, [r7, #18]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e049      	b.n	80045ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fa00 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fb6e 	bl	8004c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e04c      	b.n	800468a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a26      	ldr	r2, [pc, #152]	; (8004698 <HAL_TIM_Base_Start+0xc0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d022      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d01d      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_TIM_Base_Start+0xc4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a21      	ldr	r2, [pc, #132]	; (80046a0 <HAL_TIM_Base_Start+0xc8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_TIM_Base_Start+0xcc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_TIM_Base_Start+0xd0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <HAL_TIM_Base_Start+0xd4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIM_Base_Start+0x70>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_TIM_Base_Start+0xd8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d115      	bne.n	8004674 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_TIM_Base_Start+0xdc>)
 8004650:	4013      	ands	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b06      	cmp	r3, #6
 8004658:	d015      	beq.n	8004686 <HAL_TIM_Base_Start+0xae>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d011      	beq.n	8004686 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	e008      	b.n	8004686 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e000      	b.n	8004688 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40015000 	.word	0x40015000
 80046b4:	00010007 	.word	0x00010007

080046b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d122      	bne.n	8004714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d11b      	bne.n	8004714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0202 	mvn.w	r2, #2
 80046e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa86 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa78 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fa89 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0204 	mvn.w	r2, #4
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa5c 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa4e 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fa5f 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b08      	cmp	r3, #8
 8004774:	d122      	bne.n	80047bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d11b      	bne.n	80047bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0208 	mvn.w	r2, #8
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2204      	movs	r2, #4
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa32 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa24 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fa35 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d122      	bne.n	8004810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d11b      	bne.n	8004810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0210 	mvn.w	r2, #16
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2208      	movs	r2, #8
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa08 	bl	8004c0c <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9fa 	bl	8004bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa0b 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10e      	bne.n	800483c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0201 	mvn.w	r2, #1
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9d4 	bl	8004be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d10e      	bne.n	8004868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d107      	bne.n	8004868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fbd4 	bl	8005010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d10e      	bne.n	8004896 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d107      	bne.n	8004896 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fbc7 	bl	8005024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d10e      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d107      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9b9 	bl	8004c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d10e      	bne.n	80048ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d107      	bne.n	80048ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0220 	mvn.w	r2, #32
 80048e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb87 	bl	8004ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fc:	d10f      	bne.n	800491e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490c:	d107      	bne.n	800491e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb8d 	bl	8005038 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492c:	d10f      	bne.n	800494e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb7f 	bl	800504c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495c:	d10f      	bne.n	800497e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fb71 	bl	8005060 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800499c:	d107      	bne.n	80049ae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb63 	bl	8005074 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0f6      	b.n	8004bc2 <HAL_TIM_ConfigClockSource+0x20a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80049f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6f      	ldr	r2, [pc, #444]	; (8004bcc <HAL_TIM_ConfigClockSource+0x214>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f000 80c1 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a14:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <HAL_TIM_ConfigClockSource+0x214>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f200 80c6 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a1c:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <HAL_TIM_ConfigClockSource+0x218>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	f000 80b9 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a24:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_TIM_ConfigClockSource+0x218>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f200 80be 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2c:	4a69      	ldr	r2, [pc, #420]	; (8004bd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	f000 80b1 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a34:	4a67      	ldr	r2, [pc, #412]	; (8004bd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	f200 80b6 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	4a66      	ldr	r2, [pc, #408]	; (8004bd8 <HAL_TIM_ConfigClockSource+0x220>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	f000 80a9 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a44:	4a64      	ldr	r2, [pc, #400]	; (8004bd8 <HAL_TIM_ConfigClockSource+0x220>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	f200 80ae 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	4a63      	ldr	r2, [pc, #396]	; (8004bdc <HAL_TIM_ConfigClockSource+0x224>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f000 80a1 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a54:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <HAL_TIM_ConfigClockSource+0x224>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	f200 80a6 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a5c:	4a60      	ldr	r2, [pc, #384]	; (8004be0 <HAL_TIM_ConfigClockSource+0x228>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	f000 8099 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a64:	4a5e      	ldr	r2, [pc, #376]	; (8004be0 <HAL_TIM_ConfigClockSource+0x228>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f200 809e 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a70:	f000 8091 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a78:	f200 8096 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a80:	f000 8089 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a88:	f200 808e 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a90:	d03e      	beq.n	8004b10 <HAL_TIM_ConfigClockSource+0x158>
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a96:	f200 8087 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9e:	f000 8086 	beq.w	8004bae <HAL_TIM_ConfigClockSource+0x1f6>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d87f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d01a      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x12a>
 8004aac:	2b70      	cmp	r3, #112	; 0x70
 8004aae:	d87b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ab0:	2b60      	cmp	r3, #96	; 0x60
 8004ab2:	d050      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x19e>
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d877      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ab8:	2b50      	cmp	r3, #80	; 0x50
 8004aba:	d03c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x17e>
 8004abc:	2b50      	cmp	r3, #80	; 0x50
 8004abe:	d873      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d058      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x1be>
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d86f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d064      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004acc:	2b30      	cmp	r3, #48	; 0x30
 8004ace:	d86b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d060      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d867      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05c      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d05a      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x1de>
 8004ae0:	e062      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6899      	ldr	r1, [r3, #8]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f000 f9cd 	bl	8004e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
      break;
 8004b0e:	e04f      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6899      	ldr	r1, [r3, #8]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f000 f9b6 	bl	8004e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b32:	609a      	str	r2, [r3, #8]
      break;
 8004b34:	e03c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 f928 	bl	8004d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2150      	movs	r1, #80	; 0x50
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f981 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004b54:	e02c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 f947 	bl	8004df6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2160      	movs	r1, #96	; 0x60
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f971 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004b74:	e01c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f908 	bl	8004d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f961 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e00c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 f958 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004ba6:	e003      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	00100070 	.word	0x00100070
 8004bd0:	00100060 	.word	0x00100060
 8004bd4:	00100050 	.word	0x00100050
 8004bd8:	00100040 	.word	0x00100040
 8004bdc:	00100030 	.word	0x00100030
 8004be0:	00100020 	.word	0x00100020

08004be4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d017      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d013      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <TIM_Base_SetConfig+0x130>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <TIM_Base_SetConfig+0x134>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <TIM_Base_SetConfig+0x138>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0x48>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <TIM_Base_SetConfig+0x140>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d023      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d01f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	; (8004d78 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <TIM_Base_SetConfig+0x134>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2e      	ldr	r2, [pc, #184]	; (8004d80 <TIM_Base_SetConfig+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	; (8004d8c <TIM_Base_SetConfig+0x144>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <TIM_Base_SetConfig+0x148>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <TIM_Base_SetConfig+0x14c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0xaa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <TIM_Base_SetConfig+0x140>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <TIM_Base_SetConfig+0x12c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <TIM_Base_SetConfig+0x110>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <TIM_Base_SetConfig+0x13c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x110>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_Base_SetConfig+0x144>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x110>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <TIM_Base_SetConfig+0x148>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x110>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_Base_SetConfig+0x14c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x110>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <TIM_Base_SetConfig+0x140>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40015000 	.word	0x40015000
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0210 	bic.w	r2, r3, #16
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f043 0307 	orr.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e074      	b.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a34      	ldr	r2, [pc, #208]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a33      	ldr	r2, [pc, #204]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d01d      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40015000 	.word	0x40015000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40014000 	.word	0x40014000

08004ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	; (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	; (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	; (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	; (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 f818 	bl	80050e0 <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	08005108 	.word	0x08005108
 80050d4:	08005108 	.word	0x08005108
 80050d8:	08005108 	.word	0x08005108
 80050dc:	0800510c 	.word	0x0800510c

080050e0 <_init>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

080050ec <_fini>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr
