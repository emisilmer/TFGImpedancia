
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006fe0  08006fe0  00016fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080071c8  080071c8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071c8  080071c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080071d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  20000018  080071e8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023c4  080071e8  000223c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b3a  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4d  00000000  00000000  00033bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00036618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f07  00000000  00000000  000379a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284d5  00000000  00000000  000388a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001531e  00000000  00000000  00060d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001102a2  00000000  00000000  0007609a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000578c  00000000  00000000  0018633c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0018bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006fc8 	.word	0x08006fc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08006fc8 	.word	0x08006fc8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 ff22 	bl	80017d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f88f 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000992:	f000 fa9d 	bl	8000ed0 <MX_DMA_Init>
  MX_GPIO_Init();
 8000996:	f000 facd 	bl	8000f34 <MX_GPIO_Init>
  MX_TIM3_Init();
 800099a:	f000 fa4b 	bl	8000e34 <MX_TIM3_Init>
  MX_DAC3_Init();
 800099e:	f000 f94f 	bl	8000c40 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 80009a2:	f000 f9d5 	bl	8000d50 <MX_OPAMP6_Init>
  MX_ADC1_Init();
 80009a6:	f000 f8cf 	bl	8000b48 <MX_ADC1_Init>
  MX_TIM2_Init();
 80009aa:	f000 f9f7 	bl	8000d9c <MX_TIM2_Init>
  MX_OPAMP3_Init();
 80009ae:	f000 f981 	bl	8000cb4 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 80009b2:	f000 f9a5 	bl	8000d00 <MX_OPAMP4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_DeInit(&htim2);
 80009b6:	4834      	ldr	r0, [pc, #208]	; (8000a88 <main+0x104>)
 80009b8:	f004 fce3 	bl	8005382 <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim3);
 80009bc:	4833      	ldr	r0, [pc, #204]	; (8000a8c <main+0x108>)
 80009be:	f004 fce0 	bl	8005382 <HAL_TIM_Base_DeInit>

  ajustaTimers();
 80009c2:	f000 fb4b 	bl	800105c <ajustaTimers>
  calculaLut();
 80009c6:	f000 faf3 	bl	8000fb0 <calculaLut>

  //Timers
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK){Error_Handler();}
 80009ca:	482f      	ldr	r0, [pc, #188]	; (8000a88 <main+0x104>)
 80009cc:	f004 fc82 	bl	80052d4 <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <main+0x56>
 80009d6:	f000 fc8d 	bl	80012f4 <Error_Handler>
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK){Error_Handler();}
 80009da:	482c      	ldr	r0, [pc, #176]	; (8000a8c <main+0x108>)
 80009dc:	f004 fc7a 	bl	80052d4 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <main+0x66>
 80009e6:	f000 fc85 	bl	80012f4 <Error_Handler>

  HAL_TIM_Base_Start(&htim2);
 80009ea:	4827      	ldr	r0, [pc, #156]	; (8000a88 <main+0x104>)
 80009ec:	f004 fd26 	bl	800543c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <main+0x108>)
 80009f2:	f004 fd23 	bl	800543c <HAL_TIM_Base_Start>

  //OPAMS
  if(HAL_OK != HAL_OPAMP_Start(&hopamp6)) { Error_Handler();}
 80009f6:	4826      	ldr	r0, [pc, #152]	; (8000a90 <main+0x10c>)
 80009f8:	f003 fc40 	bl	800427c <HAL_OPAMP_Start>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <main+0x82>
 8000a02:	f000 fc77 	bl	80012f4 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp4)) { Error_Handler();}
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <main+0x110>)
 8000a08:	f003 fc38 	bl	800427c <HAL_OPAMP_Start>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <main+0x92>
 8000a12:	f000 fc6f 	bl	80012f4 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp3)) { Error_Handler();}
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <main+0x114>)
 8000a18:	f003 fc30 	bl	800427c <HAL_OPAMP_Start>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <main+0xa2>
 8000a22:	f000 fc67 	bl	80012f4 <Error_Handler>

  //DAC
  if(HAL_DACEx_DualSetValue(&hdac3, DAC_ALIGN_12B_R, 0, 0) != HAL_OK) { Error_Handler();}
 8000a26:	2300      	movs	r3, #0
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <main+0x118>)
 8000a2e:	f002 feb3 	bl	8003798 <HAL_DACEx_DualSetValue>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <main+0xb8>
 8000a38:	f000 fc5c 	bl	80012f4 <Error_Handler>
  if(HAL_DACEx_DualStart_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)lut,lut_size,DAC_ALIGN_12B_R)!= HAL_OK){ Error_Handler();}
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <main+0x11c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <main+0x120>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <main+0x118>)
 8000a4a:	f002 fdef 	bl	800362c <HAL_DACEx_DualStart_DMA>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <main+0xd4>
 8000a54:	f000 fc4e 	bl	80012f4 <Error_Handler>

  HAL_Delay(10);		// Wait 10ms so that the signal is stable.
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f000 ff2b 	bl	80018b4 <HAL_Delay>

  //ADC
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_buffer,4096) != HAL_OK)		{  	 Error_Handler();    }
 8000a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a62:	4911      	ldr	r1, [pc, #68]	; (8000aa8 <main+0x124>)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <main+0x128>)
 8000a66:	f001 fb2b 	bl	80020c0 <HAL_ADC_Start_DMA>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <main+0xf0>
 8000a70:	f000 fc40 	bl	80012f4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a74:	2120      	movs	r1, #32
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f003 fb15 	bl	80040a8 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a82:	f000 ff17 	bl	80018b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a86:	e7f5      	b.n	8000a74 <main+0xf0>
 8000a88:	20000228 	.word	0x20000228
 8000a8c:	20000274 	.word	0x20000274
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	200001b0 	.word	0x200001b0
 8000a98:	20000174 	.word	0x20000174
 8000a9c:	20000100 	.word	0x20000100
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200002c0 	.word	0x200002c0
 8000aa8:	200003c0 	.word	0x200003c0
 8000aac:	20000034 	.word	0x20000034

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2238      	movs	r2, #56	; 0x38
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fa14 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 fc04 	bl	80042e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000af2:	2355      	movs	r3, #85	; 0x55
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fc8e 	bl	8004428 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b12:	f000 fbef 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 ff91 	bl	8004a58 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b3c:	f000 fbda 	bl	80012f4 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 f9c3 	bl	8005eec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bb0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd4:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bd6:	f001 f8b1 	bl	8001d3c <HAL_ADC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000be0:	f000 fb88 	bl	80012f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000bf0:	f002 f8b4 	bl	8002d5c <HAL_ADCEx_MultiModeConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000bfa:	f000 fb7b 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_ADC1_Init+0xf0>)
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c02:	2306      	movs	r3, #6
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_ADC1_Init+0xf4>)
 8000c0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_ADC1_Init+0xec>)
 8000c1c:	f001 fb42 	bl	80022a4 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c26:	f000 fb65 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000034 	.word	0x20000034
 8000c38:	04300002 	.word	0x04300002
 8000c3c:	407f0000 	.word	0x407f0000

08000c40 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2230      	movs	r2, #48	; 0x30
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 f94d 	bl	8005eec <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_DAC3_Init+0x6c>)
 8000c54:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <MX_DAC3_Init+0x70>)
 8000c56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000c58:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_DAC3_Init+0x6c>)
 8000c5a:	f002 fac8 	bl	80031ee <HAL_DAC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000c64:	f000 fb46 	bl	80012f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8000c78:	2322      	movs	r3, #34	; 0x22
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000c80:	2302      	movs	r3, #2
 8000c82:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_DAC3_Init+0x6c>)
 8000c94:	f002 faec 	bl	8003270 <HAL_DAC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000c9e:	f000 fb29 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000100 	.word	0x20000100
 8000cb0:	50001000 	.word	0x50001000

08000cb4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <MX_OPAMP3_Init+0x48>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cc6:	2260      	movs	r2, #96	; 0x60
 8000cc8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_OPAMP3_Init+0x44>)
 8000ce4:	f003 f9fa 	bl	80040dc <HAL_OPAMP_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000cee:	f000 fb01 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000174 	.word	0x20000174
 8000cfc:	40010308 	.word	0x40010308

08000d00 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <MX_OPAMP4_Init+0x4c>)
 8000d08:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_OPAMP4_Init+0x48>)
 8000d36:	f003 f9d1 	bl	80040dc <HAL_OPAMP_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 8000d40:	f000 fad8 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001b0 	.word	0x200001b0
 8000d4c:	4001030c 	.word	0x4001030c

08000d50 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <MX_OPAMP6_Init+0x48>)
 8000d58:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d62:	2260      	movs	r2, #96	; 0x60
 8000d64:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d68:	220c      	movs	r2, #12
 8000d6a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_OPAMP6_Init+0x44>)
 8000d80:	f003 f9ac 	bl	80040dc <HAL_OPAMP_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000d8a:	f000 fab3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001ec 	.word	0x200001ec
 8000d98:	40010314 	.word	0x40010314

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 52;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd0:	2234      	movs	r2, #52	; 0x34
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000de2:	f004 fa77 	bl	80052d4 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 fa82 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dfe:	f004 fd0d 	bl	800581c <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 fa74 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000e1a:	f004 ff8b 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 fa66 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000228 	.word	0x20000228

08000e34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e54:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <MX_TIM3_Init+0x98>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e66:	2234      	movs	r2, #52	; 0x34
 8000e68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e78:	f004 fa2c 	bl	80052d4 <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 fa37 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000e94:	f004 fcc2 	bl	800581c <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 fa29 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_TIM3_Init+0x94>)
 8000eb0:	f004 ff40 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000eba:	f000 fa1b 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000274 	.word	0x20000274
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_DMA_Init+0x60>)
 8000ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_DMA_Init+0x60>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_DMA_Init+0x60>)
 8000ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_DMA_Init+0x60>)
 8000ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <MX_DMA_Init+0x60>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6493      	str	r3, [r2, #72]	; 0x48
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_DMA_Init+0x60>)
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	200b      	movs	r0, #11
 8000f0c:	f002 f92d 	bl	800316a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f10:	200b      	movs	r0, #11
 8000f12:	f002 f944 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	200c      	movs	r0, #12
 8000f1c:	f002 f925 	bl	800316a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f20:	200c      	movs	r0, #12
 8000f22:	f002 f93c 	bl	800319e <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_GPIO_Init+0x78>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f003 f879 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f86:	2320      	movs	r3, #32
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 fee8 	bl	8003d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <calculaLut>:

/* USER CODE BEGIN 4 */
void calculaLut(void){
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
	float step = 2*M_PI/TAM_LUT;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <calculaLut+0xa0>)
 8000fb8:	60bb      	str	r3, [r7, #8]
	uint32_t i = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 8000fbe:	e03e      	b.n	800103e <calculaLut+0x8e>
		uint32_t v = (uint32_t)((sin(i * step)*amp/sin(2*M_PI/4))+amp); //sin(TAM_LUT/4*step) = 0xFFF
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	ee17 0a90 	vmov	r0, s15
 8000fd6:	f7ff fbad 	bl	8000734 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	ec43 2b10 	vmov	d0, r2, r3
 8000fe2:	f004 ffb1 	bl	8005f48 <sin>
 8000fe6:	ec55 4b10 	vmov	r4, r5, d0
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <calculaLut+0xa4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fb7e 	bl	80006f0 <__aeabi_ui2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f90c 	bl	8000218 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <calculaLut+0xa4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fb6f 	bl	80006f0 <__aeabi_ui2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4620      	mov	r0, r4
 8001018:	4629      	mov	r1, r5
 800101a:	f7ff fa2d 	bl	8000478 <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fc8d 	bl	8000944 <__aeabi_d2uiz>
 800102a:	4603      	mov	r3, r0
 800102c:	607b      	str	r3, [r7, #4]
		lut[i] = v;
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <calculaLut+0xa8>)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b3f      	cmp	r3, #63	; 0x3f
 8001042:	d9bd      	bls.n	8000fc0 <calculaLut+0x10>
	}
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}
 800104e:	bf00      	nop
 8001050:	3dc90fdb 	.word	0x3dc90fdb
 8001054:	20000000 	.word	0x20000000
 8001058:	200002c0 	.word	0x200002c0

0800105c <ajustaTimers>:

void ajustaTimers(void){
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	//10hz,50hz,100hz,200hz,500hz,700hz,1khz,10khz,50khz,100khz,200khz,500khz
	//f_deseada = f_timer/((ARR+1)x(PSC+1))
	//uint32_t f_timer = HAL_RCC_GetSysClockFreq();

	//tim3 ARR 16 bits y tim2 ARR 32bits
	switch(frequency){
 8001060:	4b9d      	ldr	r3, [pc, #628]	; (80012d8 <ajustaTimers+0x27c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a9d      	ldr	r2, [pc, #628]	; (80012dc <ajustaTimers+0x280>)
 8001066:	4293      	cmp	r3, r2
 8001068:	f000 8116 	beq.w	8001298 <ajustaTimers+0x23c>
 800106c:	4a9b      	ldr	r2, [pc, #620]	; (80012dc <ajustaTimers+0x280>)
 800106e:	4293      	cmp	r3, r2
 8001070:	f200 811f 	bhi.w	80012b2 <ajustaTimers+0x256>
 8001074:	4a9a      	ldr	r2, [pc, #616]	; (80012e0 <ajustaTimers+0x284>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f000 8101 	beq.w	800127e <ajustaTimers+0x222>
 800107c:	4a98      	ldr	r2, [pc, #608]	; (80012e0 <ajustaTimers+0x284>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f200 8117 	bhi.w	80012b2 <ajustaTimers+0x256>
 8001084:	4a97      	ldr	r2, [pc, #604]	; (80012e4 <ajustaTimers+0x288>)
 8001086:	4293      	cmp	r3, r2
 8001088:	f000 80ec 	beq.w	8001264 <ajustaTimers+0x208>
 800108c:	4a95      	ldr	r2, [pc, #596]	; (80012e4 <ajustaTimers+0x288>)
 800108e:	4293      	cmp	r3, r2
 8001090:	f200 810f 	bhi.w	80012b2 <ajustaTimers+0x256>
 8001094:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001098:	4293      	cmp	r3, r2
 800109a:	f000 80d6 	beq.w	800124a <ajustaTimers+0x1ee>
 800109e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f200 8105 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f000 80bf 	beq.w	8001230 <ajustaTimers+0x1d4>
 80010b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f200 80fb 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c0:	f000 80a7 	beq.w	8001212 <ajustaTimers+0x1b6>
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c8:	f200 80f3 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010cc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80010d0:	f000 8091 	beq.w	80011f6 <ajustaTimers+0x19a>
 80010d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80010d8:	f200 80eb 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e0:	d07a      	beq.n	80011d8 <ajustaTimers+0x17c>
 80010e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e6:	f200 80e4 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010ea:	2bc8      	cmp	r3, #200	; 0xc8
 80010ec:	d065      	beq.n	80011ba <ajustaTimers+0x15e>
 80010ee:	2bc8      	cmp	r3, #200	; 0xc8
 80010f0:	f200 80df 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d051      	beq.n	800119c <ajustaTimers+0x140>
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	f200 80da 	bhi.w	80012b2 <ajustaTimers+0x256>
 80010fe:	2b32      	cmp	r3, #50	; 0x32
 8001100:	d03d      	beq.n	800117e <ajustaTimers+0x122>
 8001102:	2b32      	cmp	r3, #50	; 0x32
 8001104:	f200 80d5 	bhi.w	80012b2 <ajustaTimers+0x256>
 8001108:	2b0b      	cmp	r3, #11
 800110a:	d007      	beq.n	800111c <ajustaTimers+0xc0>
 800110c:	2b0b      	cmp	r3, #11
 800110e:	f200 80d0 	bhi.w	80012b2 <ajustaTimers+0x256>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d013      	beq.n	800113e <ajustaTimers+0xe2>
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d022      	beq.n	8001160 <ajustaTimers+0x104>
 800111a:	e0ca      	b.n	80012b2 <ajustaTimers+0x256>
		case 11://0.1 100mHz
			htim2.Init.Prescaler = 2999;
 800111c:	4b72      	ldr	r3, [pc, #456]	; (80012e8 <ajustaTimers+0x28c>)
 800111e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001122:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 2999;
 8001124:	4b71      	ldr	r3, [pc, #452]	; (80012ec <ajustaTimers+0x290>)
 8001126:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800112a:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 17740;
 800112c:	4b6e      	ldr	r3, [pc, #440]	; (80012e8 <ajustaTimers+0x28c>)
 800112e:	f244 524c 	movw	r2, #17740	; 0x454c
 8001132:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 17740;
 8001134:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <ajustaTimers+0x290>)
 8001136:	f244 524c 	movw	r2, #17740	; 0x454c
 800113a:	60da      	str	r2, [r3, #12]
			break;
 800113c:	e0c6      	b.n	80012cc <ajustaTimers+0x270>
		case 1://1
			htim2.Init.Prescaler = 299;
 800113e:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <ajustaTimers+0x28c>)
 8001140:	f240 122b 	movw	r2, #299	; 0x12b
 8001144:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 299;
 8001146:	4b69      	ldr	r3, [pc, #420]	; (80012ec <ajustaTimers+0x290>)
 8001148:	f240 122b 	movw	r2, #299	; 0x12b
 800114c:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 17740;
 800114e:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <ajustaTimers+0x28c>)
 8001150:	f244 524c 	movw	r2, #17740	; 0x454c
 8001154:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 17740;
 8001156:	4b65      	ldr	r3, [pc, #404]	; (80012ec <ajustaTimers+0x290>)
 8001158:	f244 524c 	movw	r2, #17740	; 0x454c
 800115c:	60da      	str	r2, [r3, #12]
			break;
 800115e:	e0b5      	b.n	80012cc <ajustaTimers+0x270>
		case 10://10
			htim2.Init.Prescaler = 29;
 8001160:	4b61      	ldr	r3, [pc, #388]	; (80012e8 <ajustaTimers+0x28c>)
 8001162:	221d      	movs	r2, #29
 8001164:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 29;
 8001166:	4b61      	ldr	r3, [pc, #388]	; (80012ec <ajustaTimers+0x290>)
 8001168:	221d      	movs	r2, #29
 800116a:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 17740;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <ajustaTimers+0x28c>)
 800116e:	f244 524c 	movw	r2, #17740	; 0x454c
 8001172:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 17740;
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <ajustaTimers+0x290>)
 8001176:	f244 524c 	movw	r2, #17740	; 0x454c
 800117a:	60da      	str	r2, [r3, #12]
			break;
 800117c:	e0a6      	b.n	80012cc <ajustaTimers+0x270>
		case 50://50
			htim2.Init.Prescaler = 5;
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <ajustaTimers+0x28c>)
 8001180:	2205      	movs	r2, #5
 8001182:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 5;
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <ajustaTimers+0x290>)
 8001186:	2205      	movs	r2, #5
 8001188:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 17740;
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <ajustaTimers+0x28c>)
 800118c:	f244 524c 	movw	r2, #17740	; 0x454c
 8001190:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 17740;
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <ajustaTimers+0x290>)
 8001194:	f244 524c 	movw	r2, #17740	; 0x454c
 8001198:	60da      	str	r2, [r3, #12]
			break;
 800119a:	e097      	b.n	80012cc <ajustaTimers+0x270>
		case 100://100
			htim2.Init.Prescaler = 2;
 800119c:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <ajustaTimers+0x28c>)
 800119e:	2202      	movs	r2, #2
 80011a0:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 2;
 80011a2:	4b52      	ldr	r3, [pc, #328]	; (80012ec <ajustaTimers+0x290>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 17740;
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <ajustaTimers+0x28c>)
 80011aa:	f244 524c 	movw	r2, #17740	; 0x454c
 80011ae:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 17740;
 80011b0:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <ajustaTimers+0x290>)
 80011b2:	f244 524c 	movw	r2, #17740	; 0x454c
 80011b6:	60da      	str	r2, [r3, #12]
			break;
 80011b8:	e088      	b.n	80012cc <ajustaTimers+0x270>
		case 200://200
			htim2.Init.Prescaler = 2;
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <ajustaTimers+0x28c>)
 80011bc:	2202      	movs	r2, #2
 80011be:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 2;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <ajustaTimers+0x290>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 8870;
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <ajustaTimers+0x28c>)
 80011c8:	f242 22a6 	movw	r2, #8870	; 0x22a6
 80011cc:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 8870;
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <ajustaTimers+0x290>)
 80011d0:	f242 22a6 	movw	r2, #8870	; 0x22a6
 80011d4:	60da      	str	r2, [r3, #12]
			break;
 80011d6:	e079      	b.n	80012cc <ajustaTimers+0x270>
		case 500: //500
			htim2.Init.Prescaler = 4;
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <ajustaTimers+0x28c>)
 80011da:	2204      	movs	r2, #4
 80011dc:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 4;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <ajustaTimers+0x290>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 2129;
 80011e4:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <ajustaTimers+0x28c>)
 80011e6:	f640 0251 	movw	r2, #2129	; 0x851
 80011ea:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 2129;
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <ajustaTimers+0x290>)
 80011ee:	f640 0251 	movw	r2, #2129	; 0x851
 80011f2:	60da      	str	r2, [r3, #12]
			break;
 80011f4:	e06a      	b.n	80012cc <ajustaTimers+0x270>
		case 700://
			htim2.Init.Prescaler = 1;
 80011f6:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <ajustaTimers+0x28c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 3;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <ajustaTimers+0x290>)
 80011fe:	2203      	movs	r2, #3
 8001200:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 121428;
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <ajustaTimers+0x28c>)
 8001204:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <ajustaTimers+0x294>)
 8001206:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 60819;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <ajustaTimers+0x290>)
 800120a:	f64e 5293 	movw	r2, #60819	; 0xed93
 800120e:	60da      	str	r2, [r3, #12]
			break;
 8001210:	e05c      	b.n	80012cc <ajustaTimers+0x270>
		case 1000://1000
			htim2.Init.Prescaler = 2;
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <ajustaTimers+0x28c>)
 8001214:	2202      	movs	r2, #2
 8001216:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 2;
 8001218:	4b34      	ldr	r3, [pc, #208]	; (80012ec <ajustaTimers+0x290>)
 800121a:	2202      	movs	r2, #2
 800121c:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 1774;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <ajustaTimers+0x28c>)
 8001220:	f240 62ee 	movw	r2, #1774	; 0x6ee
 8001224:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 1774;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <ajustaTimers+0x290>)
 8001228:	f240 62ee 	movw	r2, #1774	; 0x6ee
 800122c:	60da      	str	r2, [r3, #12]
			break;
 800122e:	e04d      	b.n	80012cc <ajustaTimers+0x270>
		case 10000://10000
			htim2.Init.Prescaler = 2;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <ajustaTimers+0x28c>)
 8001232:	2202      	movs	r2, #2
 8001234:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 2;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <ajustaTimers+0x290>)
 8001238:	2202      	movs	r2, #2
 800123a:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 177;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <ajustaTimers+0x28c>)
 800123e:	22b1      	movs	r2, #177	; 0xb1
 8001240:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 177;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <ajustaTimers+0x290>)
 8001244:	22b1      	movs	r2, #177	; 0xb1
 8001246:	60da      	str	r2, [r3, #12]
			break;
 8001248:	e040      	b.n	80012cc <ajustaTimers+0x270>
		case 50000://50000
			htim2.Init.Prescaler = 0;
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <ajustaTimers+0x28c>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 0;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <ajustaTimers+0x290>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 105;
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <ajustaTimers+0x28c>)
 8001258:	2269      	movs	r2, #105	; 0x69
 800125a:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 105;
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <ajustaTimers+0x290>)
 800125e:	2269      	movs	r2, #105	; 0x69
 8001260:	60da      	str	r2, [r3, #12]
			break;
 8001262:	e033      	b.n	80012cc <ajustaTimers+0x270>
		case 100000://100000
			htim2.Init.Prescaler = 0;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <ajustaTimers+0x28c>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 0;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <ajustaTimers+0x290>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 52;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <ajustaTimers+0x28c>)
 8001272:	2234      	movs	r2, #52	; 0x34
 8001274:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 52;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <ajustaTimers+0x290>)
 8001278:	2234      	movs	r2, #52	; 0x34
 800127a:	60da      	str	r2, [r3, #12]
			break;
 800127c:	e026      	b.n	80012cc <ajustaTimers+0x270>
		case 200000://200000
			htim2.Init.Prescaler = 0;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <ajustaTimers+0x28c>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 0;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <ajustaTimers+0x290>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 25;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <ajustaTimers+0x28c>)
 800128c:	2219      	movs	r2, #25
 800128e:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 25;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <ajustaTimers+0x290>)
 8001292:	2219      	movs	r2, #25
 8001294:	60da      	str	r2, [r3, #12]
			break;
 8001296:	e019      	b.n	80012cc <ajustaTimers+0x270>
		case 500000://500000
			htim2.Init.Prescaler = 0;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <ajustaTimers+0x28c>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 0;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <ajustaTimers+0x290>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 4;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <ajustaTimers+0x28c>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 4;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <ajustaTimers+0x290>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	60da      	str	r2, [r3, #12]
			break;
 80012b0:	e00c      	b.n	80012cc <ajustaTimers+0x270>
		default:
			htim2.Init.Prescaler = 0;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <ajustaTimers+0x28c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
			htim3.Init.Prescaler = 0;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <ajustaTimers+0x290>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]

			htim2.Init.Period = 4;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <ajustaTimers+0x28c>)
 80012c0:	2204      	movs	r2, #4
 80012c2:	60da      	str	r2, [r3, #12]
			htim3.Init.Period = 4;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <ajustaTimers+0x290>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	60da      	str	r2, [r3, #12]
			break;
 80012ca:	bf00      	nop

	}
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000004 	.word	0x20000004
 80012dc:	0007a120 	.word	0x0007a120
 80012e0:	00030d40 	.word	0x00030d40
 80012e4:	000186a0 	.word	0x000186a0
 80012e8:	20000228 	.word	0x20000228
 80012ec:	20000274 	.word	0x20000274
 80012f0:	0001da54 	.word	0x0001da54

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2120      	movs	r1, #32
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f002 feb8 	bl	8004078 <HAL_GPIO_WritePin>
 8001308:	e7f8      	b.n	80012fc <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6613      	str	r3, [r2, #96]	; 0x60
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x44>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x44>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b09e      	sub	sp, #120	; 0x78
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2254      	movs	r2, #84	; 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fdb9 	bl	8005eec <memset>
  if(hadc->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d160      	bne.n	8001446 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001388:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800138a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fd4f 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f7ff ffa8 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_ADC_MspInit+0xfc>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d4:	2303      	movs	r3, #3
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f002 fcc3 	bl	8003d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_ADC_MspInit+0x100>)
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_ADC_MspInit+0x104>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_ADC_MspInit+0x100>)
 80013f6:	2205      	movs	r2, #5
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_ADC_MspInit+0x100>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_ADC_MspInit+0x100>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_ADC_MspInit+0x100>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_ADC_MspInit+0x100>)
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_ADC_MspInit+0x100>)
 8001416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_ADC_MspInit+0x100>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_ADC_MspInit+0x100>)
 8001424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001428:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_ADC_MspInit+0x100>)
 800142c:	f002 fa30 	bl	8003890 <HAL_DMA_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001436:	f7ff ff5d 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0x100>)
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_ADC_MspInit+0x100>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3778      	adds	r7, #120	; 0x78
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	200000a0 	.word	0x200000a0
 8001458:	4002001c 	.word	0x4002001c

0800145c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_DAC_MspInit+0x8c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d137      	bne.n	80014de <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_DAC_MspInit+0x90>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_DAC_MspInit+0x90>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_DAC_MspInit+0x90>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_DAC_MspInit+0x98>)
 800148a:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 800148e:	2266      	movs	r2, #102	; 0x66
 8001490:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 8001494:	2210      	movs	r2, #16
 8001496:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b2:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014b6:	2220      	movs	r2, #32
 80014b8:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014c4:	f002 f9e4 	bl	8003890 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 80014ce:	f7ff ff11 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_DAC_MspInit+0x94>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	50001000 	.word	0x50001000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	20000114 	.word	0x20000114
 80014f4:	40020008 	.word	0x40020008

080014f8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_OPAMP_MspInit+0xd8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d118      	bne.n	800154c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001532:	2303      	movs	r3, #3
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4824      	ldr	r0, [pc, #144]	; (80015d8 <HAL_OPAMP_MspInit+0xe0>)
 8001546:	f002 fc15 	bl	8003d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 800154a:	e03c      	b.n	80015c6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP4)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_OPAMP_MspInit+0xe4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d119      	bne.n	800158a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800156e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001574:	2303      	movs	r3, #3
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <HAL_OPAMP_MspInit+0xe0>)
 8001584:	f002 fbf6 	bl	8003d74 <HAL_GPIO_Init>
}
 8001588:	e01d      	b.n	80015c6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP6)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <HAL_OPAMP_MspInit+0xe8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d118      	bne.n	80015c6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_OPAMP_MspInit+0xdc>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_OPAMP_MspInit+0xe0>)
 80015c2:	f002 fbd7 	bl	8003d74 <HAL_GPIO_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010308 	.word	0x40010308
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	4001030c 	.word	0x4001030c
 80015e0:	40010314 	.word	0x40010314

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f4:	d114      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201c      	movs	r0, #28
 8001614:	f001 fda9 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001618:	201c      	movs	r0, #28
 800161a:	f001 fdc0 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800161e:	e018      	b.n	8001652 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	201d      	movs	r0, #29
 8001648:	f001 fd8f 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800164c:	201d      	movs	r0, #29
 800164e:	f001 fda6 	bl	800319e <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40000400 	.word	0x40000400

08001664 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d109      	bne.n	800168a <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_TIM_Base_MspDeInit+0x4c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_TIM_Base_MspDeInit+0x4c>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001682:	201c      	movs	r0, #28
 8001684:	f001 fd99 	bl	80031ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8001688:	e00d      	b.n	80016a6 <HAL_TIM_Base_MspDeInit+0x42>
  else if(htim_base->Instance==TIM3)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspDeInit+0x50>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d108      	bne.n	80016a6 <HAL_TIM_Base_MspDeInit+0x42>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_TIM_Base_MspDeInit+0x4c>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_TIM_Base_MspDeInit+0x4c>)
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80016a0:	201d      	movs	r0, #29
 80016a2:	f001 fd8a 	bl	80031ba <HAL_NVIC_DisableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40000400 	.word	0x40000400

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001704:	f000 f8b8 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA1_Channel1_IRQHandler+0x10>)
 8001712:	f002 f9e0 	bl	8003ad6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000114 	.word	0x20000114

08001720 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Channel2_IRQHandler+0x10>)
 8001726:	f002 f9d6 	bl	8003ad6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000a0 	.word	0x200000a0

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f003 feef 	bl	800551c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000228 	.word	0x20000228

08001748 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM3_IRQHandler+0x10>)
 800174e:	f003 fee5 	bl	800551c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000274 	.word	0x20000274

0800175c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001782:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f004 fba5 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7ff f8e7 	bl	8000984 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   r0, =_estack
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017c4:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 80017c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017cc:	200023c4 	.word	0x200023c4

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>

080017d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f001 fcb9 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f80e 	bl	8001804 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e001      	b.n	80017f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f4:	f7ff fd8a 	bl	800130c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f8:	79fb      	ldrb	r3, [r7, #7]

}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_InitTick+0x68>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_InitTick+0x6c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_InitTick+0x68>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f001 fcd2 	bl	80031d6 <HAL_SYSTICK_Config>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d809      	bhi.n	8001852 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f04f 30ff 	mov.w	r0, #4294967295
 8001846:	f001 fc90 	bl	800316a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0x70>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e007      	b.n	8001862 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e004      	b.n	8001862 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000014 	.word	0x20000014
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000010 	.word	0x20000010

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_IncTick+0x1c>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200023c0 	.word	0x200023c0
 8001898:	20000014 	.word	0x20000014

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200023c0 	.word	0x200023c0

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d004      	beq.n	80018d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_Delay+0x40>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d8:	bf00      	nop
 80018da:	f7ff ffdf 	bl	800189c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8f7      	bhi.n	80018da <HAL_Delay+0x26>
  {
  }
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000014 	.word	0x20000014

080018f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3360      	adds	r3, #96	; 0x60
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <LL_ADC_SetOffset+0x44>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	4313      	orrs	r3, r2
 8001990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	03fff000 	.word	0x03fff000

080019a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3360      	adds	r3, #96	; 0x60
 80019b6:	461a      	mov	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3360      	adds	r3, #96	; 0x60
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a34:	bf00      	nop
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3360      	adds	r3, #96	; 0x60
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	615a      	str	r2, [r3, #20]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3330      	adds	r3, #48	; 0x30
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	211f      	movs	r1, #31
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	f003 011f 	and.w	r1, r3, #31
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0e5b      	lsrs	r3, r3, #25
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0d1b      	lsrs	r3, r3, #20
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2107      	movs	r1, #7
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0d1b      	lsrs	r3, r3, #20
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d10a      	bne.n	8001b9a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	401a      	ands	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	407f0000 	.word	0x407f0000

08001bc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6093      	str	r3, [r2, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_IsEnabled+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_IsEnabled+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d101      	bne.n	8001d2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1af      	b.n	80020b6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff faf5 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff3f 	bl	8001c00 <LL_ADC_IsDeepPowerDownEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff25 	bl	8001bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff5a 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff3e 	bl	8001c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dac:	4b9f      	ldr	r3, [pc, #636]	; (800202c <HAL_ADC_Init+0x2f0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	4a9f      	ldr	r2, [pc, #636]	; (8002030 <HAL_ADC_Init+0x2f4>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff3c 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff75 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8001e04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 8148 	bne.w	80020a4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 8144 	bne.w	80020a4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e24:	f043 0202 	orr.w	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff35 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d141      	bne.n	8001ec0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_Init+0x114>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_ADC_Init+0x2f8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10f      	bne.n	8001e70 <HAL_ADC_Init+0x134>
 8001e50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e54:	f7ff ff24 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4876      	ldr	r0, [pc, #472]	; (8002034 <HAL_ADC_Init+0x2f8>)
 8001e5c:	f7ff ff20 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4323      	orrs	r3, r4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e012      	b.n	8001e96 <HAL_ADC_Init+0x15a>
 8001e70:	4871      	ldr	r0, [pc, #452]	; (8002038 <HAL_ADC_Init+0x2fc>)
 8001e72:	f7ff ff15 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e76:	4604      	mov	r4, r0
 8001e78:	4870      	ldr	r0, [pc, #448]	; (800203c <HAL_ADC_Init+0x300>)
 8001e7a:	f7ff ff11 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	431c      	orrs	r4, r3
 8001e82:	486f      	ldr	r0, [pc, #444]	; (8002040 <HAL_ADC_Init+0x304>)
 8001e84:	f7ff ff0c 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d012      	beq.n	8001ec0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea2:	d004      	beq.n	8001eae <HAL_ADC_Init+0x172>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a62      	ldr	r2, [pc, #392]	; (8002034 <HAL_ADC_Init+0x2f8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x176>
 8001eae:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_ADC_Init+0x308>)
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Init+0x178>
 8001eb2:	4a65      	ldr	r2, [pc, #404]	; (8002048 <HAL_ADC_Init+0x30c>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7ff fd1c 	bl	80018f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f5b      	ldrb	r3, [r3, #29]
 8001ec4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ed0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ed6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ede:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_ADC_Init+0x310>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fed1 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fede 	bl	8001d14 <LL_ADC_INJ_IsConversionOngoing>
 8001f58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d17f      	bne.n	8002060 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d17c      	bne.n	8002060 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f82:	f023 0302 	bic.w	r3, r3, #2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fa6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fb0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6911      	ldr	r1, [r2, #16]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001fc6:	e013      	b.n	8001ff0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12a      	bne.n	8002050 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800201c:	430a      	orrs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	e019      	b.n	8002060 <HAL_ADC_Init+0x324>
 800202c:	2000000c 	.word	0x2000000c
 8002030:	053e2d63 	.word	0x053e2d63
 8002034:	50000100 	.word	0x50000100
 8002038:	50000400 	.word	0x50000400
 800203c:	50000500 	.word	0x50000500
 8002040:	50000600 	.word	0x50000600
 8002044:	50000300 	.word	0x50000300
 8002048:	50000700 	.word	0x50000700
 800204c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10c      	bne.n	8002082 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f023 010f 	bic.w	r1, r3, #15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
 8002080:	e007      	b.n	8002092 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 020f 	bic.w	r2, r2, #15
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020a2:	e007      	b.n	80020b4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}
 80020be:	bf00      	nop

080020c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_Start_DMA+0x20>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5a      	ldr	r2, [pc, #360]	; (8002244 <HAL_ADC_Start_DMA+0x184>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_Start_DMA+0x24>
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_ADC_Start_DMA+0x188>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_Start_DMA+0x26>
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_ADC_Start_DMA+0x18c>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd6a 	bl	8001bc0 <LL_ADC_GetMultimode>
 80020ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fdfb 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 809b 	bne.w	8002236 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADC_Start_DMA+0x4e>
 800210a:	2302      	movs	r3, #2
 800210c:	e096      	b.n	800223c <HAL_ADC_Start_DMA+0x17c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_ADC_Start_DMA+0x190>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d008      	beq.n	8002132 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d002      	beq.n	8002132 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b09      	cmp	r3, #9
 8002130:	d17a      	bne.n	8002228 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fcf6 	bl	8002b24 <ADC_Enable>
 8002138:	4603      	mov	r3, r0
 800213a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d16d      	bne.n	800221e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_ADC_Start_DMA+0x184>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_ADC_Start_DMA+0xb4>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <HAL_ADC_Start_DMA+0x194>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d002      	beq.n	8002170 <HAL_ADC_Start_DMA+0xb0>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e003      	b.n	8002178 <HAL_ADC_Start_DMA+0xb8>
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_ADC_Start_DMA+0x198>)
 8002172:	e001      	b.n	8002178 <HAL_ADC_Start_DMA+0xb8>
 8002174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4293      	cmp	r3, r2
 800217e:	d002      	beq.n	8002186 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	f023 0206 	bic.w	r2, r3, #6
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	661a      	str	r2, [r3, #96]	; 0x60
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_ADC_Start_DMA+0x19c>)
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	4a28      	ldr	r2, [pc, #160]	; (8002260 <HAL_ADC_Start_DMA+0x1a0>)
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_ADC_Start_DMA+0x1a4>)
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	221c      	movs	r2, #28
 80021d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0210 	orr.w	r2, r2, #16
 80021e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3340      	adds	r3, #64	; 0x40
 8002204:	4619      	mov	r1, r3
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f001 fbe9 	bl	80039e0 <HAL_DMA_Start_IT>
 800220e:	4603      	mov	r3, r0
 8002210:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd55 	bl	8001cc6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800221c:	e00d      	b.n	800223a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002226:	e008      	b.n	800223a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002234:	e001      	b.n	800223a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	50000100 	.word	0x50000100
 8002248:	50000300 	.word	0x50000300
 800224c:	50000700 	.word	0x50000700
 8002250:	50000600 	.word	0x50000600
 8002254:	50000500 	.word	0x50000500
 8002258:	50000400 	.word	0x50000400
 800225c:	08002be9 	.word	0x08002be9
 8002260:	08002cc1 	.word	0x08002cc1
 8002264:	08002cdd 	.word	0x08002cdd

08002268 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0b6      	sub	sp, #216	; 0xd8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x24>
 80022c2:	2302      	movs	r3, #2
 80022c4:	f000 bc13 	b.w	8002aee <HAL_ADC_ConfigChannel+0x84a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fd0a 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 83f3 	bne.w	8002ac8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f7ff fbe7 	bl	8001ac2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fcf8 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 80022fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd04 	bl	8001d14 <LL_ADC_INJ_IsConversionOngoing>
 800230c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 81d9 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800231a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 81d4 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800232c:	d10f      	bne.n	800234e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	f7ff fbee 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fb95 	bl	8001a76 <LL_ADC_SetSamplingTimeCommonConfig>
 800234c:	e00e      	b.n	800236c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fbdd 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb85 	bl	8001a76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d022      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800239e:	f7ff fadf 	bl	8001960 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6919      	ldr	r1, [r3, #16]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff fb2b 	bl	8001a0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7f1b      	ldrb	r3, [r3, #28]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x126>
 80023c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c8:	e000      	b.n	80023cc <HAL_ADC_ConfigChannel+0x128>
 80023ca:	2300      	movs	r3, #0
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff fb37 	bl	8001a40 <LL_ADC_SetOffsetSaturation>
 80023d2:	e17b      	b.n	80026cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fae4 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x15c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fad9 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e01e      	b.n	800243e <HAL_ADC_ConfigChannel+0x19a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff face 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x1b2>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e018      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1e4>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800246a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800246e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e004      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800247e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fa9d 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fa81 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x222>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa76 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	e01e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x260>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fa6b 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e004      	b.n	8002502 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_ConfigChannel+0x278>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	e018      	b.n	800254e <HAL_ADC_ConfigChannel+0x2aa>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e004      	b.n	800254e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800254e:	429a      	cmp	r2, r3
 8002550:	d106      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fa3a 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fa1e 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_ADC_ConfigChannel+0x2e8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fa13 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	e01e      	b.n	80025ca <HAL_ADC_ConfigChannel+0x326>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2102      	movs	r1, #2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fa08 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e004      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80025be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x33e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	e016      	b.n	8002610 <HAL_ADC_ConfigChannel+0x36c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f9d9 	bl	80019d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2103      	movs	r1, #3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f9bd 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_ADC_ConfigChannel+0x3aa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2103      	movs	r1, #3
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f9b2 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	e017      	b.n	800267e <HAL_ADC_ConfigChannel+0x3da>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2103      	movs	r1, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f9a7 	bl	80019a8 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002668:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800266a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x3f2>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	e011      	b.n	80026ba <HAL_ADC_ConfigChannel+0x416>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80026b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d106      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2103      	movs	r1, #3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f984 	bl	80019d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fae5 	bl	8001ca0 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 813d 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f7ff fa40 	bl	8001b70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4aa2      	ldr	r2, [pc, #648]	; (8002980 <HAL_ADC_ConfigChannel+0x6dc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 812e 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x480>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b09      	cmp	r3, #9
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e019      	b.n	8002758 <HAL_ADC_ConfigChannel+0x4b4>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2b09      	cmp	r3, #9
 8002750:	bf94      	ite	ls
 8002752:	2301      	movls	r3, #1
 8002754:	2300      	movhi	r3, #0
 8002756:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002758:	2b00      	cmp	r3, #0
 800275a:	d079      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x4d4>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	069b      	lsls	r3, r3, #26
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002776:	e015      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x500>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002788:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x520>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	e017      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x550>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	ea42 0103 	orr.w	r1, r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <HAL_ADC_ConfigChannel+0x576>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	051b      	lsls	r3, r3, #20
 8002818:	e018      	b.n	800284c <HAL_ADC_ConfigChannel+0x5a8>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284c:	430b      	orrs	r3, r1
 800284e:	e07e      	b.n	800294e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_ADC_ConfigChannel+0x5c8>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	3301      	adds	r3, #1
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286a:	e015      	b.n	8002898 <HAL_ADC_ConfigChannel+0x5f4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x614>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x644>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	61fb      	str	r3, [r7, #28]
  return result;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e003      	b.n	80028dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	ea42 0103 	orr.w	r1, r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x670>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	3b1e      	subs	r3, #30
 800290c:	051b      	lsls	r3, r3, #20
 800290e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002912:	e01b      	b.n	800294c <HAL_ADC_ConfigChannel+0x6a8>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	613b      	str	r3, [r7, #16]
  return result;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	3b1e      	subs	r3, #30
 8002946:	051b      	lsls	r3, r3, #20
 8002948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294c:	430b      	orrs	r3, r1
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	4619      	mov	r1, r3
 8002954:	f7ff f8e1 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_ADC_ConfigChannel+0x6e0>)
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80be 	beq.w	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x6d6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_ADC_ConfigChannel+0x6e4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x6ec>
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_ADC_ConfigChannel+0x6e8>)
 800297c:	e009      	b.n	8002992 <HAL_ADC_ConfigChannel+0x6ee>
 800297e:	bf00      	nop
 8002980:	407f0000 	.word	0x407f0000
 8002984:	80080000 	.word	0x80080000
 8002988:	50000100 	.word	0x50000100
 800298c:	50000300 	.word	0x50000300
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe ffd6 	bl	8001944 <LL_ADC_GetCommonPathInternalCh>
 8002998:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_ADC_ConfigChannel+0x858>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x70c>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <HAL_ADC_ConfigChannel+0x85c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d13a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d134      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c4:	d005      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x72e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4e      	ldr	r2, [pc, #312]	; (8002b04 <HAL_ADC_ConfigChannel+0x860>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f040 8085 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x742>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x746>
 80029e6:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 80029e8:	e000      	b.n	80029ec <HAL_ADC_ConfigChannel+0x748>
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 80029ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7fe ff91 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fc:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_ADC_ConfigChannel+0x86c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_ADC_ConfigChannel+0x870>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a24:	e05a      	b.n	8002adc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_ADC_ConfigChannel+0x874>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d125      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x7d8>
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11f      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d104      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x7ac>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_ADC_ConfigChannel+0x878>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d047      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x7c0>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7c4>
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 8002a66:	e000      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7c6>
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7fe ff52 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a7a:	e031      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <HAL_ADC_ConfigChannel+0x87c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12d      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d127      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x80c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x810>
 8002ab0:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x812>
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7fe ff2c 	bl	800191e <LL_ADC_SetCommonPathInternalCh>
 8002ac6:	e00c      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ada:	e002      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	37d8      	adds	r7, #216	; 0xd8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	50000700 	.word	0x50000700
 8002afc:	c3210000 	.word	0xc3210000
 8002b00:	90c00010 	.word	0x90c00010
 8002b04:	50000600 	.word	0x50000600
 8002b08:	50000100 	.word	0x50000100
 8002b0c:	50000300 	.word	0x50000300
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	053e2d63 	.word	0x053e2d63
 8002b18:	c7520000 	.word	0xc7520000
 8002b1c:	50000500 	.word	0x50000500
 8002b20:	cb840000 	.word	0xcb840000

08002b24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f8b5 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d14d      	bne.n	8002bd8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <ADC_Enable+0xc0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e039      	b.n	8002bda <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f884 	bl	8001c78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fe94 	bl	800189c <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b76:	e028      	b.n	8002bca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f88f 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f873 	bl	8001c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b92:	f7fe fe83 	bl	800189c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d914      	bls.n	8002bca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d00d      	beq.n	8002bca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d1cf      	bne.n	8002b78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	8000003f 	.word	0x8000003f

08002be8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d14b      	bne.n	8002c9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d021      	beq.n	8002c60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe ff3b 	bl	8001a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d032      	beq.n	8002c92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d12b      	bne.n	8002c92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11f      	bne.n	8002c92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c5e:	e018      	b.n	8002c92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d111      	bne.n	8002c92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fae8 	bl	8002268 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c98:	e00e      	b.n	8002cb8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff faf2 	bl	8002290 <HAL_ADC_ErrorCallback>
}
 8002cac:	e004      	b.n	8002cb8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fad4 	bl	800227c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fac4 	bl	8002290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <LL_ADC_IsEnabled>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0a1      	sub	sp, #132	; 0x84
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0e7      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d82:	2300      	movs	r3, #0
 8002d84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d86:	2300      	movs	r3, #0
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d92:	d102      	bne.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d94:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	e009      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d102      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002da4:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	e001      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0be      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffb1 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002dd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffab 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 80a0 	bne.w	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 809c 	bne.w	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df8:	d004      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e04:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002e06:	e000      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e08:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002e0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d04b      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e26:	035b      	lsls	r3, r3, #13
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e38:	d004      	beq.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a45      	ldr	r2, [pc, #276]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10f      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e48:	f7ff ff62 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4841      	ldr	r0, [pc, #260]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e50:	f7ff ff5e 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e012      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e64:	483c      	ldr	r0, [pc, #240]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e66:	f7ff ff53 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	483b      	ldr	r0, [pc, #236]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e6e:	f7ff ff4f 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	431c      	orrs	r4, r3
 8002e76:	483c      	ldr	r0, [pc, #240]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e78:	f7ff ff4a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4323      	orrs	r3, r4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d056      	beq.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eaa:	e047      	b.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10f      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ecc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ed0:	f7ff ff1e 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	481f      	ldr	r0, [pc, #124]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ed8:	f7ff ff1a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4323      	orrs	r3, r4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eee:	f7ff ff0f 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4819      	ldr	r0, [pc, #100]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ef6:	f7ff ff0b 	bl	8002d10 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	431c      	orrs	r4, r3
 8002efe:	481a      	ldr	r0, [pc, #104]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f00:	f7ff ff06 	bl	8002d10 <LL_ADC_IsEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4323      	orrs	r3, r4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f1e:	f023 030f 	bic.w	r3, r3, #15
 8002f22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f26:	e009      	b.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f3a:	e000      	b.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3784      	adds	r7, #132	; 0x84
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	50000100 	.word	0x50000100
 8002f58:	50000400 	.word	0x50000400
 8002f5c:	50000500 	.word	0x50000500
 8002f60:	50000300 	.word	0x50000300
 8002f64:	50000700 	.word	0x50000700
 8002f68:	50000600 	.word	0x50000600

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	; (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db12      	blt.n	8003044 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	490a      	ldr	r1, [pc, #40]	; (8003050 <__NVIC_DisableIRQ+0x44>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	3320      	adds	r3, #32
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003038:	f3bf 8f4f 	dsb	sy
}
 800303c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800303e:	f3bf 8f6f 	isb	sy
}
 8003042:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	; (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff05 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff1c 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff90 	bl	80030a8 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5f 	bl	8003054 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff0f 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff1f 	bl	800300c <__NVIC_DisableIRQ>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff96 	bl	8003110 <SysTick_Config>
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e014      	b.n	800322a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe f923 	bl	800145c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	795b      	ldrb	r3, [r3, #5]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_DAC_ConfigChannel+0x18>
 8003284:	2302      	movs	r3, #2
 8003286:	e192      	b.n	80035ae <HAL_DAC_ConfigChannel+0x33e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d174      	bne.n	8003386 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800329c:	f7fe fafe 	bl	800189c <HAL_GetTick>
 80032a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d134      	bne.n	8003312 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032a8:	e011      	b.n	80032ce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032aa:	f7fe faf7 	bl	800189c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d90a      	bls.n	80032ce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f043 0208 	orr.w	r2, r3, #8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2203      	movs	r2, #3
 80032c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e16f      	b.n	80035ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e6      	bne.n	80032aa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fe fae9 	bl	80018b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
 80032ec:	e01e      	b.n	800332c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032ee:	f7fe fad5 	bl	800189c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d90a      	bls.n	8003312 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f043 0208 	orr.w	r2, r3, #8
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2203      	movs	r2, #3
 800330c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e14d      	b.n	80035ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	2b00      	cmp	r3, #0
 800331a:	dbe8      	blt.n	80032ee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800331c:	2001      	movs	r0, #1
 800331e:	f7fe fac9 	bl	80018b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	ea02 0103 	and.w	r1, r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	409a      	lsls	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	21ff      	movs	r1, #255	; 0xff
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	ea02 0103 	and.w	r1, r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	409a      	lsls	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d11d      	bne.n	80033ca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	4013      	ands	r3, r2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	4313      	orrs	r3, r2
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2207      	movs	r2, #7
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	4013      	ands	r3, r2
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d102      	bne.n	80033f4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	e00f      	b.n	8003414 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d102      	bne.n	8003402 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033fc:	2301      	movs	r3, #1
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	e008      	b.n	8003414 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800340a:	2301      	movs	r3, #1
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	e001      	b.n	8003414 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	6a3a      	ldr	r2, [r7, #32]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	4013      	ands	r3, r2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_DAC_ConfigChannel+0x1d8>
 8003442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003446:	e000      	b.n	800344a <HAL_DAC_ConfigChannel+0x1da>
 8003448:	2300      	movs	r3, #0
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	4013      	ands	r3, r2
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	795b      	ldrb	r3, [r3, #5]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_DAC_ConfigChannel+0x204>
 800346e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003472:	e000      	b.n	8003476 <HAL_DAC_ConfigChannel+0x206>
 8003474:	2300      	movs	r3, #0
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d114      	bne.n	80034b6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800348c:	f001 fc82 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8003490:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_DAC_ConfigChannel+0x348>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d904      	bls.n	80034a4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e00f      	b.n	80034c4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4a45      	ldr	r2, [pc, #276]	; (80035bc <HAL_DAC_ConfigChannel+0x34c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d90a      	bls.n	80034c2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	e006      	b.n	80034c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4313      	orrs	r3, r2
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	e000      	b.n	80034c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034c2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	4313      	orrs	r3, r2
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4013      	ands	r3, r2
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	4313      	orrs	r3, r2
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	22c0      	movs	r2, #192	; 0xc0
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43da      	mvns	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	ea02 0103 	and.w	r1, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	09896800 	.word	0x09896800
 80035bc:	04c4b400 	.word	0x04c4b400

080035c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fe2f 	bl	8003232 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	711a      	strb	r2, [r3, #4]
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fe28 	bl	8003246 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fe1e 	bl	800325a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	711a      	strb	r2, [r3, #4]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0UL;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  /* Ensure Channel 2 exists for this particular DAC instance */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	795b      	ldrb	r3, [r3, #5]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DACEx_DualStart_DMA+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e095      	b.n	8003776 <HAL_DACEx_DualStart_DMA+0x14a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2202      	movs	r2, #2
 8003654:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <HAL_DACEx_DualStart_DMA+0x5a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a47      	ldr	r2, [pc, #284]	; (8003780 <HAL_DACEx_DualStart_DMA+0x154>)
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_DACEx_DualStart_DMA+0x158>)
 800366a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a45      	ldr	r2, [pc, #276]	; (8003788 <HAL_DACEx_DualStart_DMA+0x15c>)
 8003672:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e013      	b.n	80036ae <HAL_DACEx_DualStart_DMA+0x82>
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a40      	ldr	r2, [pc, #256]	; (800378c <HAL_DACEx_DualStart_DMA+0x160>)
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_DACEx_DualStart_DMA+0x164>)
 8003694:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a3e      	ldr	r2, [pc, #248]	; (8003794 <HAL_DACEx_DualStart_DMA+0x168>)
 800369c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036ac:	601a      	str	r2, [r3, #0]
  }

  switch (Alignment)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d013      	beq.n	80036dc <HAL_DACEx_DualStart_DMA+0xb0>
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d815      	bhi.n	80036e6 <HAL_DACEx_DualStart_DMA+0xba>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_DACEx_DualStart_DMA+0x9c>
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d005      	beq.n	80036d2 <HAL_DACEx_DualStart_DMA+0xa6>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
      break;
    default:
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_DACEx_DualStart_DMA+0xba>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3320      	adds	r3, #32
 80036ce:	613b      	str	r3, [r7, #16]
      break;
 80036d0:	e00a      	b.n	80036e8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	613b      	str	r3, [r7, #16]
      break;
 80036da:	e005      	b.n	80036e8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3328      	adds	r3, #40	; 0x28
 80036e2:	613b      	str	r3, [r7, #16]
      break;
 80036e4:	e000      	b.n	80036e8 <HAL_DACEx_DualStart_DMA+0xbc>
      break;
 80036e6:	bf00      	nop
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d111      	bne.n	8003712 <HAL_DACEx_DualStart_DMA+0xe6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6898      	ldr	r0, [r3, #8]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	f000 f96a 	bl	80039e0 <HAL_DMA_Start_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]
 8003710:	e010      	b.n	8003734 <HAL_DACEx_DualStart_DMA+0x108>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003720:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68d8      	ldr	r0, [r3, #12]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	f000 f958 	bl	80039e0 <HAL_DMA_Start_IT>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d113      	bne.n	8003768 <HAL_DACEx_DualStart_DMA+0x13c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800375e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003760:	2001      	movs	r0, #1
 8003762:	f7fe f8a7 	bl	80018b4 <HAL_Delay>
 8003766:	e005      	b.n	8003774 <HAL_DACEx_DualStart_DMA+0x148>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	080035c1 	.word	0x080035c1
 8003784:	080035e3 	.word	0x080035e3
 8003788:	080035ff 	.word	0x080035ff
 800378c:	08003823 	.word	0x08003823
 8003790:	08003845 	.word	0x08003845
 8003794:	08003861 	.word	0x08003861

08003798 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d105      	bne.n	80037b8 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e004      	b.n	80037c2 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	3320      	adds	r3, #32
 80037d0:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7ff ffd8 	bl	80037e6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	711a      	strb	r2, [r3, #4]
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff ffd1 	bl	80037fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f043 0204 	orr.w	r2, r3, #4
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ffc7 	bl	800380e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	711a      	strb	r2, [r3, #4]
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e08d      	b.n	80039be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_DMA_Init+0x138>)
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d80f      	bhi.n	80038ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b45      	ldr	r3, [pc, #276]	; (80039cc <HAL_DMA_Init+0x13c>)
 80038b6:	4413      	add	r3, r2
 80038b8:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <HAL_DMA_Init+0x140>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_DMA_Init+0x144>)
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
 80038cc:	e00e      	b.n	80038ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_DMA_Init+0x148>)
 80038d6:	4413      	add	r3, r2
 80038d8:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <HAL_DMA_Init+0x140>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_Init+0x14c>)
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9b6 	bl	8003cb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394c:	d102      	bne.n	8003954 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003968:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <HAL_DMA_Init+0x104>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d80c      	bhi.n	8003994 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9d6 	bl	8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e008      	b.n	80039a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40020407 	.word	0x40020407
 80039cc:	bffdfff8 	.word	0xbffdfff8
 80039d0:	cccccccd 	.word	0xcccccccd
 80039d4:	40020000 	.word	0x40020000
 80039d8:	bffdfbf8 	.word	0xbffdfbf8
 80039dc:	40020400 	.word	0x40020400

080039e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Start_IT+0x20>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e066      	b.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d155      	bne.n	8003ac0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f8fb 	bl	8003c34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 020e 	orr.w	r2, r2, #14
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e00f      	b.n	8003a78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 020a 	orr.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e005      	b.n	8003acc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2204      	movs	r2, #4
 8003af8:	409a      	lsls	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d026      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x7a>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d021      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d107      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f003 021f 	and.w	r2, r3, #31
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2104      	movs	r1, #4
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d071      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b4e:	e06c      	b.n	8003c2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2202      	movs	r2, #2
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d029      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020a 	bic.w	r2, r2, #10
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d038      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bc0:	e033      	b.n	8003c2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2208      	movs	r2, #8
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02a      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d025      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 020e 	bic.w	r2, r2, #14
 8003bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
}
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d108      	bne.n	8003c94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c92:	e007      	b.n	8003ca4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d802      	bhi.n	8003cca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e001      	b.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ccc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b08      	subs	r3, #8
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	009a      	lsls	r2, r3, #2
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40020407 	.word	0x40020407
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020820 	.word	0x40020820
 8003d24:	cccccccd 	.word	0xcccccccd
 8003d28:	40020880 	.word	0x40020880

08003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d4e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2201      	movs	r2, #1
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	1000823f 	.word	0x1000823f
 8003d70:	40020940 	.word	0x40020940

08003d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d82:	e15a      	b.n	800403a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 814c 	beq.w	8004034 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d005      	beq.n	8003db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d130      	bne.n	8003e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dea:	2201      	movs	r2, #1
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0201 	and.w	r2, r3, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d017      	beq.n	8003e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d123      	bne.n	8003ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	08da      	lsrs	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3208      	adds	r2, #8
 8003e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	220f      	movs	r2, #15
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3208      	adds	r2, #8
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0203 	and.w	r2, r3, #3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80a6 	beq.w	8004034 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <HAL_GPIO_Init+0x2e4>)
 8003eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eec:	4a5a      	ldr	r2, [pc, #360]	; (8004058 <HAL_GPIO_Init+0x2e4>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_GPIO_Init+0x2e4>)
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f00:	4a56      	ldr	r2, [pc, #344]	; (800405c <HAL_GPIO_Init+0x2e8>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	3302      	adds	r3, #2
 8003f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	220f      	movs	r2, #15
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f2a:	d01f      	beq.n	8003f6c <HAL_GPIO_Init+0x1f8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a4c      	ldr	r2, [pc, #304]	; (8004060 <HAL_GPIO_Init+0x2ec>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d019      	beq.n	8003f68 <HAL_GPIO_Init+0x1f4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a4b      	ldr	r2, [pc, #300]	; (8004064 <HAL_GPIO_Init+0x2f0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_GPIO_Init+0x1f0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <HAL_GPIO_Init+0x2f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00d      	beq.n	8003f60 <HAL_GPIO_Init+0x1ec>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a49      	ldr	r2, [pc, #292]	; (800406c <HAL_GPIO_Init+0x2f8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <HAL_GPIO_Init+0x1e8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a48      	ldr	r2, [pc, #288]	; (8004070 <HAL_GPIO_Init+0x2fc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_GPIO_Init+0x1e4>
 8003f54:	2305      	movs	r3, #5
 8003f56:	e00a      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f58:	2306      	movs	r3, #6
 8003f5a:	e008      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1fa>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f7e:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_GPIO_Init+0x2e8>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_GPIO_Init+0x300>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_GPIO_Init+0x300>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_GPIO_Init+0x300>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_GPIO_Init+0x300>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_GPIO_Init+0x300>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_GPIO_Init+0x300>)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_GPIO_Init+0x300>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_GPIO_Init+0x300>)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f ae9d 	bne.w	8003d84 <HAL_GPIO_Init+0x10>
  }
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40021000 	.word	0x40021000
 800405c:	40010000 	.word	0x40010000
 8004060:	48000400 	.word	0x48000400
 8004064:	48000800 	.word	0x48000800
 8004068:	48000c00 	.word	0x48000c00
 800406c:	48001000 	.word	0x48001000
 8004070:	48001400 	.word	0x48001400
 8004074:	40010400 	.word	0x40010400

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004094:	e002      	b.n	800409c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43d9      	mvns	r1, r3
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	400b      	ands	r3, r1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0bb      	b.n	800426a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d101      	bne.n	8004102 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0b3      	b.n	800426a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d101      	bne.n	8004112 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0ab      	b.n	800426a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_OPAMP_Init+0x198>)
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_OPAMP_Init+0x198>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6613      	str	r3, [r2, #96]	; 0x60
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <HAL_OPAMP_Init+0x198>)
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd f9da 	bl	80014f8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d003      	beq.n	8004154 <HAL_OPAMP_Init+0x78>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d133      	bne.n	80041bc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0110 	bic.w	r1, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_OPAMP_Init+0x19c>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6851      	ldr	r1, [r2, #4]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6912      	ldr	r2, [r2, #16]
 8004182:	430a      	orrs	r2, r1
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	7d09      	ldrb	r1, [r1, #20]
 8004188:	2901      	cmp	r1, #1
 800418a:	d102      	bne.n	8004192 <HAL_OPAMP_Init+0xb6>
 800418c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004190:	e000      	b.n	8004194 <HAL_OPAMP_Init+0xb8>
 8004192:	2100      	movs	r1, #0
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041a6:	04d2      	lsls	r2, r2, #19
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ae:	0612      	lsls	r2, r2, #24
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e035      	b.n	8004228 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 0110 	bic.w	r1, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_OPAMP_Init+0x19c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6851      	ldr	r1, [r2, #4]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6912      	ldr	r2, [r2, #16]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	7d09      	ldrb	r1, [r1, #20]
 80041f6:	2901      	cmp	r1, #1
 80041f8:	d102      	bne.n	8004200 <HAL_OPAMP_Init+0x124>
 80041fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fe:	e000      	b.n	8004202 <HAL_OPAMP_Init+0x126>
 8004200:	2100      	movs	r1, #0
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004214:	04d2      	lsls	r2, r2, #19
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800421c:	0612      	lsls	r2, r2, #24
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db10      	blt.n	8004254 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	e0003e11 	.word	0xe0003e11

0800427c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	e01d      	b.n	80042d0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b05      	cmp	r3, #5
 800429e:	d102      	bne.n	80042a6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e014      	b.n	80042d0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10c      	bne.n	80042cc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80042ca:	e001      	b.n	80042d0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d141      	bne.n	8004372 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d131      	bne.n	8004360 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042fc:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004302:	4a46      	ldr	r2, [pc, #280]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004314:	4a41      	ldr	r2, [pc, #260]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800431a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800431c:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2232      	movs	r2, #50	; 0x32
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	4a3f      	ldr	r2, [pc, #252]	; (8004424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	0c9b      	lsrs	r3, r3, #18
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004332:	e002      	b.n	800433a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800433a:	4b38      	ldr	r3, [pc, #224]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d102      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f2      	bne.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800434e:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d158      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e057      	b.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800436c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004370:	e04d      	b.n	800440e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d141      	bne.n	80043fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800437a:	4b28      	ldr	r3, [pc, #160]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d131      	bne.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438e:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004398:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2232      	movs	r2, #50	; 0x32
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	0c9b      	lsrs	r3, r3, #18
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043be:	e002      	b.n	80043c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d102      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f2      	bne.n	80043c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d112      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e011      	b.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043fc:	e007      	b.n	800440e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004406:	4a05      	ldr	r2, [pc, #20]	; (800441c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800440c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40007000 	.word	0x40007000
 8004420:	2000000c 	.word	0x2000000c
 8004424:	431bde83 	.word	0x431bde83

08004428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e306      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d075      	beq.n	8004532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004446:	4b97      	ldr	r3, [pc, #604]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004450:	4b94      	ldr	r3, [pc, #592]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d102      	bne.n	8004466 <HAL_RCC_OscConfig+0x3e>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d002      	beq.n	800446c <HAL_RCC_OscConfig+0x44>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d10b      	bne.n	8004484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d05b      	beq.n	8004530 <HAL_RCC_OscConfig+0x108>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d157      	bne.n	8004530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e2e1      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448c:	d106      	bne.n	800449c <HAL_RCC_OscConfig+0x74>
 800448e:	4b85      	ldr	r3, [pc, #532]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a84      	ldr	r2, [pc, #528]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e01d      	b.n	80044d8 <HAL_RCC_OscConfig+0xb0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x98>
 80044a6:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7b      	ldr	r2, [pc, #492]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e00b      	b.n	80044d8 <HAL_RCC_OscConfig+0xb0>
 80044c0:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a77      	ldr	r2, [pc, #476]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a74      	ldr	r2, [pc, #464]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd f9dc 	bl	800189c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fd f9d8 	bl	800189c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e2a6      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fa:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0xc0>
 8004506:	e014      	b.n	8004532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd f9c8 	bl	800189c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd f9c4 	bl	800189c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e292      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0xe8>
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d075      	beq.n	800462a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004548:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b0c      	cmp	r3, #12
 8004556:	d102      	bne.n	800455e <HAL_RCC_OscConfig+0x136>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d002      	beq.n	8004564 <HAL_RCC_OscConfig+0x13c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d11f      	bne.n	80045a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x154>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e265      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b49      	ldr	r3, [pc, #292]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4946      	ldr	r1, [pc, #280]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <HAL_RCC_OscConfig+0x280>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fd f935 	bl	8001804 <HAL_InitTick>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d043      	beq.n	8004628 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e251      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d023      	beq.n	80045f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ac:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd f970 	bl	800189c <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c0:	f7fd f96c 	bl	800189c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e23a      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d2:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	061b      	lsls	r3, r3, #24
 80045ec:	492d      	ldr	r1, [pc, #180]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
 80045f2:	e01a      	b.n	800462a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 80045fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f94c 	bl	800189c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fd f948 	bl	800189c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e216      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x1e0>
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d041      	beq.n	80046ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01c      	beq.n	8004678 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fd f925 	bl	800189c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004656:	f7fd f921 	bl	800189c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1ef      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ef      	beq.n	8004656 <HAL_RCC_OscConfig+0x22e>
 8004676:	e020      	b.n	80046ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800467a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd f908 	bl	800189c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468e:	e00d      	b.n	80046ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fd f904 	bl	800189c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d906      	bls.n	80046ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1d2      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ac:	4b8c      	ldr	r3, [pc, #560]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80046ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ea      	bne.n	8004690 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a6 	beq.w	8004814 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046cc:	4b84      	ldr	r3, [pc, #528]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_OscConfig+0x2b4>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x2b6>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	4a7e      	ldr	r2, [pc, #504]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6593      	str	r3, [r2, #88]	; 0x58
 80046ee:	4b7c      	ldr	r3, [pc, #496]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046fa:	2301      	movs	r3, #1
 80046fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fe:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <HAL_RCC_OscConfig+0x4bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d118      	bne.n	800473c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470a:	4b76      	ldr	r3, [pc, #472]	; (80048e4 <HAL_RCC_OscConfig+0x4bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a75      	ldr	r2, [pc, #468]	; (80048e4 <HAL_RCC_OscConfig+0x4bc>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fd f8c1 	bl	800189c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fd f8bd 	bl	800189c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e18b      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	4b6c      	ldr	r3, [pc, #432]	; (80048e4 <HAL_RCC_OscConfig+0x4bc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d108      	bne.n	8004756 <HAL_RCC_OscConfig+0x32e>
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	e024      	b.n	80047a0 <HAL_RCC_OscConfig+0x378>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d110      	bne.n	8004780 <HAL_RCC_OscConfig+0x358>
 800475e:	4b60      	ldr	r3, [pc, #384]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	4a5e      	ldr	r2, [pc, #376]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	f043 0304 	orr.w	r3, r3, #4
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800476e:	4b5c      	ldr	r3, [pc, #368]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	4a5a      	ldr	r2, [pc, #360]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800477e:	e00f      	b.n	80047a0 <HAL_RCC_OscConfig+0x378>
 8004780:	4b57      	ldr	r3, [pc, #348]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a56      	ldr	r2, [pc, #344]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d016      	beq.n	80047d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd f878 	bl	800189c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd f874 	bl	800189c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e140      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0ed      	beq.n	80047b0 <HAL_RCC_OscConfig+0x388>
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fd f861 	bl	800189c <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd f85d 	bl	800189c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e129      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f4:	4b3a      	ldr	r3, [pc, #232]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ed      	bne.n	80047de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004802:	7ffb      	ldrb	r3, [r7, #31]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03c      	beq.n	800489a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01c      	beq.n	8004862 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800482a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482e:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd f830 	bl	800189c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004840:	f7fd f82c 	bl	800189c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0fa      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <HAL_RCC_OscConfig+0x418>
 8004860:	e01b      	b.n	800489a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004862:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 8004864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fd f813 	bl	800189c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487a:	f7fd f80f 	bl	800189c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0dd      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 800488e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ef      	bne.n	800487a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80d1 	beq.w	8004a46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	f000 808b 	beq.w	80049c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d15e      	bne.n	8004978 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fc ffe9 	bl	800189c <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048cc:	e00c      	b.n	80048e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fc ffe5 	bl	800189c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d905      	bls.n	80048e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0b3      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ec      	bne.n	80048ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f4:	4b56      	ldr	r3, [pc, #344]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <HAL_RCC_OscConfig+0x62c>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6a11      	ldr	r1, [r2, #32]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004904:	3a01      	subs	r2, #1
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800490e:	0212      	lsls	r2, r2, #8
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004916:	0852      	lsrs	r2, r2, #1
 8004918:	3a01      	subs	r2, #1
 800491a:	0552      	lsls	r2, r2, #21
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0652      	lsls	r2, r2, #25
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800492e:	06d2      	lsls	r2, r2, #27
 8004930:	430a      	orrs	r2, r1
 8004932:	4947      	ldr	r1, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 8004934:	4313      	orrs	r3, r2
 8004936:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004938:	4b45      	ldr	r3, [pc, #276]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a44      	ldr	r2, [pc, #272]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800493e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004942:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004944:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a41      	ldr	r2, [pc, #260]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fc ffa4 	bl	800189c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fc ffa0 	bl	800189c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e06e      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x530>
 8004976:	e066      	b.n	8004a46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800497e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004982:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004984:	4b32      	ldr	r3, [pc, #200]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4a31      	ldr	r2, [pc, #196]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 8004996:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fc ff7c 	bl	800189c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc ff78 	bl	800189c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e046      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x580>
 80049c6:	e03e      	b.n	8004a46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e039      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <HAL_RCC_OscConfig+0x628>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0203 	and.w	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d12c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	3b01      	subs	r3, #1
 80049f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d123      	bne.n	8004a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11b      	bne.n	8004a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d113      	bne.n	8004a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	3b01      	subs	r3, #1
 8004a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	019f800c 	.word	0x019f800c

08004a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e11e      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b91      	ldr	r3, [pc, #580]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d910      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b8e      	ldr	r3, [pc, #568]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 020f 	bic.w	r2, r3, #15
 8004a86:	498c      	ldr	r1, [pc, #560]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e106      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d073      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d129      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab4:	4b81      	ldr	r3, [pc, #516]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0f4      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ac4:	f000 f972 	bl	8004dac <RCC_GetSysClockFreqFromPLLSource>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4a7c      	ldr	r2, [pc, #496]	; (8004cc0 <HAL_RCC_ClockConfig+0x268>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d93f      	bls.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ad2:	4b7a      	ldr	r3, [pc, #488]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d033      	beq.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d12f      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004af2:	4b72      	ldr	r3, [pc, #456]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afa:	4a70      	ldr	r2, [pc, #448]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e024      	b.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b10:	4b6a      	ldr	r3, [pc, #424]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0c6      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b20:	4b66      	ldr	r3, [pc, #408]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0be      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b30:	f000 f8ce 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4a61      	ldr	r2, [pc, #388]	; (8004cc0 <HAL_RCC_ClockConfig+0x268>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d909      	bls.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b5a      	ldr	r3, [pc, #360]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4957      	ldr	r1, [pc, #348]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fc fe9a 	bl	800189c <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fc fe96 	bl	800189c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e095      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bac:	4b43      	ldr	r3, [pc, #268]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a42      	ldr	r2, [pc, #264]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bc4:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bcc:	4a3b      	ldr	r2, [pc, #236]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4936      	ldr	r1, [pc, #216]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d105      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bee:	4b33      	ldr	r3, [pc, #204]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d21d      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	4929      	ldr	r1, [pc, #164]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c18:	f7fc fe40 	bl	800189c <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c20:	f7fc fe3c 	bl	800189c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e03b      	b.n	8004cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1ed      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4917      	ldr	r1, [pc, #92]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490f      	ldr	r1, [pc, #60]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c82:	f000 f825 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_RCC_ClockConfig+0x264>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490c      	ldr	r1, [pc, #48]	; (8004cc4 <HAL_RCC_ClockConfig+0x26c>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_RCC_ClockConfig+0x270>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc fdac 	bl	8001804 <HAL_InitTick>
 8004cac:	4603      	mov	r3, r0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	04c4b400 	.word	0x04c4b400
 8004cc4:	08006fe0 	.word	0x08006fe0
 8004cc8:	2000000c 	.word	0x2000000c
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e047      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e03e      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cfa:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d136      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d10:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2e:	68d2      	ldr	r2, [r2, #12]
 8004d30:	0a12      	lsrs	r2, r2, #8
 8004d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	617b      	str	r3, [r7, #20]
      break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3e:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	0a12      	lsrs	r2, r2, #8
 8004d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
      break;
 8004d56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	0e5b      	lsrs	r3, r3, #25
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e001      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d78:	693b      	ldr	r3, [r7, #16]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	007a1200 	.word	0x007a1200

08004d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000000c 	.word	0x2000000c

08004dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d10c      	bne.n	8004dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dda:	68d2      	ldr	r2, [r2, #12]
 8004ddc:	0a12      	lsrs	r2, r2, #8
 8004dde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	617b      	str	r3, [r7, #20]
    break;
 8004de8:	e00c      	b.n	8004e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	0a12      	lsrs	r2, r2, #8
 8004df8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    break;
 8004e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	0e5b      	lsrs	r3, r3, #25
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e1e:	687b      	ldr	r3, [r7, #4]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	007a1200 	.word	0x007a1200
 8004e34:	00f42400 	.word	0x00f42400

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e40:	2300      	movs	r3, #0
 8004e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e44:	2300      	movs	r3, #0
 8004e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8098 	beq.w	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6593      	str	r3, [r2, #88]	; 0x58
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e82:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fd05 	bl	800189c <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e94:	e009      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fc fd01 	bl	800189c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d902      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ea8:	e005      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eaa:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ef      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004eb6:	7cfb      	ldrb	r3, [r7, #19]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d159      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01e      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d019      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed8:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d016      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fc fcc1 	bl	800189c <HAL_GetTick>
 8004f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1c:	e00b      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc fcbd 	bl	800189c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d902      	bls.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	74fb      	strb	r3, [r7, #19]
            break;
 8004f34:	e006      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ec      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	74bb      	strb	r3, [r7, #18]
 8004f66:	e005      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f74:	7c7b      	ldrb	r3, [r7, #17]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7a:	4ba7      	ldr	r3, [pc, #668]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	4aa6      	ldr	r2, [pc, #664]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f92:	4ba1      	ldr	r3, [pc, #644]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f023 0203 	bic.w	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	499d      	ldr	r1, [pc, #628]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb4:	4b98      	ldr	r3, [pc, #608]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f023 020c 	bic.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4995      	ldr	r1, [pc, #596]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd6:	4b90      	ldr	r3, [pc, #576]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	498c      	ldr	r1, [pc, #560]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff8:	4b87      	ldr	r3, [pc, #540]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	4984      	ldr	r1, [pc, #528]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800501a:	4b7f      	ldr	r3, [pc, #508]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	497b      	ldr	r1, [pc, #492]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800503c:	4b76      	ldr	r3, [pc, #472]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	4973      	ldr	r1, [pc, #460]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800505e:	4b6e      	ldr	r3, [pc, #440]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	496a      	ldr	r1, [pc, #424]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005080:	4b65      	ldr	r3, [pc, #404]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4962      	ldr	r1, [pc, #392]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050a2:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4959      	ldr	r1, [pc, #356]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050c4:	4b54      	ldr	r3, [pc, #336]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	4951      	ldr	r1, [pc, #324]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050e6:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	4948      	ldr	r1, [pc, #288]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005108:	4b43      	ldr	r3, [pc, #268]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	4940      	ldr	r1, [pc, #256]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005126:	d105      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005140:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	4932      	ldr	r1, [pc, #200]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515e:	d105      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	4924      	ldr	r1, [pc, #144]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051b0:	4b19      	ldr	r3, [pc, #100]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	4916      	ldr	r1, [pc, #88]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	4908      	ldr	r1, [pc, #32]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005206:	d109      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a02      	ldr	r2, [pc, #8]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	4926      	ldr	r1, [pc, #152]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005252:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	4918      	ldr	r1, [pc, #96]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527e:	d105      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800529a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	490a      	ldr	r1, [pc, #40]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e049      	b.n	800537a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc f972 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 fbca 	bl	8005aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	f241 1311 	movw	r3, #4369	; 0x1111
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <HAL_TIM_Base_DeInit+0x40>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	f244 4344 	movw	r3, #17476	; 0x4444
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <HAL_TIM_Base_DeInit+0x40>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc f94e 	bl	8001664 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d001      	beq.n	8005454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e04c      	b.n	80054ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <HAL_TIM_Base_Start+0xc0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d01d      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_TIM_Base_Start+0xc4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a21      	ldr	r2, [pc, #132]	; (8005504 <HAL_TIM_Base_Start+0xc8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <HAL_TIM_Base_Start+0xcc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	; (800550c <HAL_TIM_Base_Start+0xd0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_TIM_Base_Start+0xd4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIM_Base_Start+0x70>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_TIM_Base_Start+0xd8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d115      	bne.n	80054d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_TIM_Base_Start+0xdc>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d015      	beq.n	80054ea <HAL_TIM_Base_Start+0xae>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d011      	beq.n	80054ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e008      	b.n	80054ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e000      	b.n	80054ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40015000 	.word	0x40015000
 8005518:	00010007 	.word	0x00010007

0800551c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d122      	bne.n	8005578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d11b      	bne.n	8005578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0202 	mvn.w	r2, #2
 8005548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa86 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa78 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fa89 	bl	8005a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d122      	bne.n	80055cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b04      	cmp	r3, #4
 8005592:	d11b      	bne.n	80055cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0204 	mvn.w	r2, #4
 800559c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa5c 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa4e 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa5f 	bl	8005a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0208 	mvn.w	r2, #8
 80055f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2204      	movs	r2, #4
 80055f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa32 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa24 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fa35 	bl	8005a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b10      	cmp	r3, #16
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b10      	cmp	r3, #16
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0210 	mvn.w	r2, #16
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2208      	movs	r2, #8
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa08 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9fa 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fa0b 	bl	8005a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d10e      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b01      	cmp	r3, #1
 800568e:	d107      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0201 	mvn.w	r2, #1
 8005698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9d4 	bl	8005a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d10e      	bne.n	80056cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fbd4 	bl	8005e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056da:	d10e      	bne.n	80056fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d107      	bne.n	80056fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fbc7 	bl	8005e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d10e      	bne.n	8005726 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d107      	bne.n	8005726 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9b9 	bl	8005a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b20      	cmp	r3, #32
 8005732:	d10e      	bne.n	8005752 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d107      	bne.n	8005752 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0220 	mvn.w	r2, #32
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb87 	bl	8005e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800575c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005760:	d10f      	bne.n	8005782 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800576c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb8d 	bl	8005e9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800578c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005790:	d10f      	bne.n	80057b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a0:	d107      	bne.n	80057b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80057aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb7f 	bl	8005eb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c0:	d10f      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb71 	bl	8005ec4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f0:	d10f      	bne.n	8005812 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005800:	d107      	bne.n	8005812 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800580a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fb63 	bl	8005ed8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIM_ConfigClockSource+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e0f6      	b.n	8005a26 <HAL_TIM_ConfigClockSource+0x20a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005856:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6f      	ldr	r2, [pc, #444]	; (8005a30 <HAL_TIM_ConfigClockSource+0x214>)
 8005872:	4293      	cmp	r3, r2
 8005874:	f000 80c1 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005878:	4a6d      	ldr	r2, [pc, #436]	; (8005a30 <HAL_TIM_ConfigClockSource+0x214>)
 800587a:	4293      	cmp	r3, r2
 800587c:	f200 80c6 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005880:	4a6c      	ldr	r2, [pc, #432]	; (8005a34 <HAL_TIM_ConfigClockSource+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f000 80b9 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005888:	4a6a      	ldr	r2, [pc, #424]	; (8005a34 <HAL_TIM_ConfigClockSource+0x218>)
 800588a:	4293      	cmp	r3, r2
 800588c:	f200 80be 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005890:	4a69      	ldr	r2, [pc, #420]	; (8005a38 <HAL_TIM_ConfigClockSource+0x21c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f000 80b1 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005898:	4a67      	ldr	r2, [pc, #412]	; (8005a38 <HAL_TIM_ConfigClockSource+0x21c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f200 80b6 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058a0:	4a66      	ldr	r2, [pc, #408]	; (8005a3c <HAL_TIM_ConfigClockSource+0x220>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	f000 80a9 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 80058a8:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <HAL_TIM_ConfigClockSource+0x220>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f200 80ae 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058b0:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <HAL_TIM_ConfigClockSource+0x224>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f000 80a1 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 80058b8:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <HAL_TIM_ConfigClockSource+0x224>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	f200 80a6 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058c0:	4a60      	ldr	r2, [pc, #384]	; (8005a44 <HAL_TIM_ConfigClockSource+0x228>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	f000 8099 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 80058c8:	4a5e      	ldr	r2, [pc, #376]	; (8005a44 <HAL_TIM_ConfigClockSource+0x228>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f200 809e 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058d4:	f000 8091 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 80058d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058dc:	f200 8096 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e4:	f000 8089 	beq.w	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 80058e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ec:	f200 808e 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f4:	d03e      	beq.n	8005974 <HAL_TIM_ConfigClockSource+0x158>
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fa:	f200 8087 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005902:	f000 8086 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1f6>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d87f      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 800590c:	2b70      	cmp	r3, #112	; 0x70
 800590e:	d01a      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x12a>
 8005910:	2b70      	cmp	r3, #112	; 0x70
 8005912:	d87b      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005914:	2b60      	cmp	r3, #96	; 0x60
 8005916:	d050      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x19e>
 8005918:	2b60      	cmp	r3, #96	; 0x60
 800591a:	d877      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 800591c:	2b50      	cmp	r3, #80	; 0x50
 800591e:	d03c      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x17e>
 8005920:	2b50      	cmp	r3, #80	; 0x50
 8005922:	d873      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d058      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x1be>
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d86f      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 800592c:	2b30      	cmp	r3, #48	; 0x30
 800592e:	d064      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005930:	2b30      	cmp	r3, #48	; 0x30
 8005932:	d86b      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005934:	2b20      	cmp	r3, #32
 8005936:	d060      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005938:	2b20      	cmp	r3, #32
 800593a:	d867      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d05c      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005940:	2b10      	cmp	r3, #16
 8005942:	d05a      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x1de>
 8005944:	e062      	b.n	8005a0c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f000 f9cd 	bl	8005cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
      break;
 8005972:	e04f      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	6899      	ldr	r1, [r3, #8]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f000 f9b6 	bl	8005cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005996:	609a      	str	r2, [r3, #8]
      break;
 8005998:	e03c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 f928 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2150      	movs	r1, #80	; 0x50
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f981 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 80059b8:	e02c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 f947 	bl	8005c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2160      	movs	r1, #96	; 0x60
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f971 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 80059d8:	e01c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6859      	ldr	r1, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f000 f908 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2140      	movs	r1, #64	; 0x40
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f961 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 80059f8:	e00c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f000 f958 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005a0a:	e003      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e000      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	00100070 	.word	0x00100070
 8005a34:	00100060 	.word	0x00100060
 8005a38:	00100050 	.word	0x00100050
 8005a3c:	00100040 	.word	0x00100040
 8005a40:	00100030 	.word	0x00100030
 8005a44:	00100020 	.word	0x00100020

08005a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a46      	ldr	r2, [pc, #280]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d017      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d013      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <TIM_Base_SetConfig+0x130>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a42      	ldr	r2, [pc, #264]	; (8005be0 <TIM_Base_SetConfig+0x134>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a41      	ldr	r2, [pc, #260]	; (8005be4 <TIM_Base_SetConfig+0x138>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a40      	ldr	r2, [pc, #256]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0x48>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a3f      	ldr	r2, [pc, #252]	; (8005bec <TIM_Base_SetConfig+0x140>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d108      	bne.n	8005b06 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a33      	ldr	r2, [pc, #204]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d023      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d01f      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a30      	ldr	r2, [pc, #192]	; (8005bdc <TIM_Base_SetConfig+0x130>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01b      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2f      	ldr	r2, [pc, #188]	; (8005be0 <TIM_Base_SetConfig+0x134>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d017      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2e      	ldr	r2, [pc, #184]	; (8005be4 <TIM_Base_SetConfig+0x138>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0xaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <TIM_Base_SetConfig+0x140>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <TIM_Base_SetConfig+0x12c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_Base_SetConfig+0x110>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <TIM_Base_SetConfig+0x140>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40015000 	.word	0x40015000
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 030a 	bic.w	r3, r3, #10
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0210 	bic.w	r2, r3, #16
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f043 0307 	orr.w	r3, r3, #7
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e074      	b.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d01d      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10c      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40015000 	.word	0x40015000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40014000 	.word	0x40014000

08005e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <memset>:
 8005eec:	4402      	add	r2, r0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4d0d      	ldr	r5, [pc, #52]	; (8005f34 <__libc_init_array+0x38>)
 8005f00:	4c0d      	ldr	r4, [pc, #52]	; (8005f38 <__libc_init_array+0x3c>)
 8005f02:	1b64      	subs	r4, r4, r5
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	2600      	movs	r6, #0
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	4d0b      	ldr	r5, [pc, #44]	; (8005f3c <__libc_init_array+0x40>)
 8005f0e:	4c0c      	ldr	r4, [pc, #48]	; (8005f40 <__libc_init_array+0x44>)
 8005f10:	f001 f85a 	bl	8006fc8 <_init>
 8005f14:	1b64      	subs	r4, r4, r5
 8005f16:	10a4      	asrs	r4, r4, #2
 8005f18:	2600      	movs	r6, #0
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	080071c8 	.word	0x080071c8
 8005f38:	080071c8 	.word	0x080071c8
 8005f3c:	080071c8 	.word	0x080071c8
 8005f40:	080071cc 	.word	0x080071cc
 8005f44:	00000000 	.word	0x00000000

08005f48 <sin>:
 8005f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f4a:	ec53 2b10 	vmov	r2, r3, d0
 8005f4e:	4828      	ldr	r0, [pc, #160]	; (8005ff0 <sin+0xa8>)
 8005f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f54:	4281      	cmp	r1, r0
 8005f56:	dc07      	bgt.n	8005f68 <sin+0x20>
 8005f58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005fe8 <sin+0xa0>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	b005      	add	sp, #20
 8005f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f64:	f000 b910 	b.w	8006188 <__kernel_sin>
 8005f68:	4822      	ldr	r0, [pc, #136]	; (8005ff4 <sin+0xac>)
 8005f6a:	4281      	cmp	r1, r0
 8005f6c:	dd09      	ble.n	8005f82 <sin+0x3a>
 8005f6e:	ee10 0a10 	vmov	r0, s0
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7fa fa7e 	bl	8000474 <__aeabi_dsub>
 8005f78:	ec41 0b10 	vmov	d0, r0, r1
 8005f7c:	b005      	add	sp, #20
 8005f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f82:	4668      	mov	r0, sp
 8005f84:	f000 f9c0 	bl	8006308 <__ieee754_rem_pio2>
 8005f88:	f000 0003 	and.w	r0, r0, #3
 8005f8c:	2801      	cmp	r0, #1
 8005f8e:	d00c      	beq.n	8005faa <sin+0x62>
 8005f90:	2802      	cmp	r0, #2
 8005f92:	d011      	beq.n	8005fb8 <sin+0x70>
 8005f94:	b9f0      	cbnz	r0, 8005fd4 <sin+0x8c>
 8005f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f9a:	ed9d 0b00 	vldr	d0, [sp]
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	f000 f8f2 	bl	8006188 <__kernel_sin>
 8005fa4:	ec51 0b10 	vmov	r0, r1, d0
 8005fa8:	e7e6      	b.n	8005f78 <sin+0x30>
 8005faa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fae:	ed9d 0b00 	vldr	d0, [sp]
 8005fb2:	f000 f821 	bl	8005ff8 <__kernel_cos>
 8005fb6:	e7f5      	b.n	8005fa4 <sin+0x5c>
 8005fb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fbc:	ed9d 0b00 	vldr	d0, [sp]
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f000 f8e1 	bl	8006188 <__kernel_sin>
 8005fc6:	ec53 2b10 	vmov	r2, r3, d0
 8005fca:	ee10 0a10 	vmov	r0, s0
 8005fce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005fd2:	e7d1      	b.n	8005f78 <sin+0x30>
 8005fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fd8:	ed9d 0b00 	vldr	d0, [sp]
 8005fdc:	f000 f80c 	bl	8005ff8 <__kernel_cos>
 8005fe0:	e7f1      	b.n	8005fc6 <sin+0x7e>
 8005fe2:	bf00      	nop
 8005fe4:	f3af 8000 	nop.w
	...
 8005ff0:	3fe921fb 	.word	0x3fe921fb
 8005ff4:	7fefffff 	.word	0x7fefffff

08005ff8 <__kernel_cos>:
 8005ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	ec57 6b10 	vmov	r6, r7, d0
 8006000:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006004:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006008:	ed8d 1b00 	vstr	d1, [sp]
 800600c:	da07      	bge.n	800601e <__kernel_cos+0x26>
 800600e:	ee10 0a10 	vmov	r0, s0
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa fc6e 	bl	80008f4 <__aeabi_d2iz>
 8006018:	2800      	cmp	r0, #0
 800601a:	f000 8088 	beq.w	800612e <__kernel_cos+0x136>
 800601e:	4632      	mov	r2, r6
 8006020:	463b      	mov	r3, r7
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa f8f7 	bl	8000218 <__aeabi_dmul>
 800602a:	4b51      	ldr	r3, [pc, #324]	; (8006170 <__kernel_cos+0x178>)
 800602c:	2200      	movs	r2, #0
 800602e:	4604      	mov	r4, r0
 8006030:	460d      	mov	r5, r1
 8006032:	f7fa f8f1 	bl	8000218 <__aeabi_dmul>
 8006036:	a340      	add	r3, pc, #256	; (adr r3, 8006138 <__kernel_cos+0x140>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	4682      	mov	sl, r0
 800603e:	468b      	mov	fp, r1
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f7fa f8e8 	bl	8000218 <__aeabi_dmul>
 8006048:	a33d      	add	r3, pc, #244	; (adr r3, 8006140 <__kernel_cos+0x148>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fa13 	bl	8000478 <__adddf3>
 8006052:	4622      	mov	r2, r4
 8006054:	462b      	mov	r3, r5
 8006056:	f7fa f8df 	bl	8000218 <__aeabi_dmul>
 800605a:	a33b      	add	r3, pc, #236	; (adr r3, 8006148 <__kernel_cos+0x150>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f7fa fa08 	bl	8000474 <__aeabi_dsub>
 8006064:	4622      	mov	r2, r4
 8006066:	462b      	mov	r3, r5
 8006068:	f7fa f8d6 	bl	8000218 <__aeabi_dmul>
 800606c:	a338      	add	r3, pc, #224	; (adr r3, 8006150 <__kernel_cos+0x158>)
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	f7fa fa01 	bl	8000478 <__adddf3>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	f7fa f8cd 	bl	8000218 <__aeabi_dmul>
 800607e:	a336      	add	r3, pc, #216	; (adr r3, 8006158 <__kernel_cos+0x160>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa f9f6 	bl	8000474 <__aeabi_dsub>
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	f7fa f8c4 	bl	8000218 <__aeabi_dmul>
 8006090:	a333      	add	r3, pc, #204	; (adr r3, 8006160 <__kernel_cos+0x168>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa f9ef 	bl	8000478 <__adddf3>
 800609a:	4622      	mov	r2, r4
 800609c:	462b      	mov	r3, r5
 800609e:	f7fa f8bb 	bl	8000218 <__aeabi_dmul>
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	f7fa f8b7 	bl	8000218 <__aeabi_dmul>
 80060aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ae:	4604      	mov	r4, r0
 80060b0:	460d      	mov	r5, r1
 80060b2:	4630      	mov	r0, r6
 80060b4:	4639      	mov	r1, r7
 80060b6:	f7fa f8af 	bl	8000218 <__aeabi_dmul>
 80060ba:	460b      	mov	r3, r1
 80060bc:	4602      	mov	r2, r0
 80060be:	4629      	mov	r1, r5
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7fa f9d7 	bl	8000474 <__aeabi_dsub>
 80060c6:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <__kernel_cos+0x17c>)
 80060c8:	4598      	cmp	r8, r3
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	dc10      	bgt.n	80060f2 <__kernel_cos+0xfa>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4650      	mov	r0, sl
 80060d6:	4659      	mov	r1, fp
 80060d8:	f7fa f9cc 	bl	8000474 <__aeabi_dsub>
 80060dc:	460b      	mov	r3, r1
 80060de:	4926      	ldr	r1, [pc, #152]	; (8006178 <__kernel_cos+0x180>)
 80060e0:	4602      	mov	r2, r0
 80060e2:	2000      	movs	r0, #0
 80060e4:	f7fa f9c6 	bl	8000474 <__aeabi_dsub>
 80060e8:	ec41 0b10 	vmov	d0, r0, r1
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	4b22      	ldr	r3, [pc, #136]	; (800617c <__kernel_cos+0x184>)
 80060f4:	4920      	ldr	r1, [pc, #128]	; (8006178 <__kernel_cos+0x180>)
 80060f6:	4598      	cmp	r8, r3
 80060f8:	bfcc      	ite	gt
 80060fa:	4d21      	ldrgt	r5, [pc, #132]	; (8006180 <__kernel_cos+0x188>)
 80060fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006100:	2400      	movs	r4, #0
 8006102:	4622      	mov	r2, r4
 8006104:	462b      	mov	r3, r5
 8006106:	2000      	movs	r0, #0
 8006108:	f7fa f9b4 	bl	8000474 <__aeabi_dsub>
 800610c:	4622      	mov	r2, r4
 800610e:	4680      	mov	r8, r0
 8006110:	4689      	mov	r9, r1
 8006112:	462b      	mov	r3, r5
 8006114:	4650      	mov	r0, sl
 8006116:	4659      	mov	r1, fp
 8006118:	f7fa f9ac 	bl	8000474 <__aeabi_dsub>
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	f7fa f9a8 	bl	8000474 <__aeabi_dsub>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	e7da      	b.n	80060e4 <__kernel_cos+0xec>
 800612e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006168 <__kernel_cos+0x170>
 8006132:	e7db      	b.n	80060ec <__kernel_cos+0xf4>
 8006134:	f3af 8000 	nop.w
 8006138:	be8838d4 	.word	0xbe8838d4
 800613c:	bda8fae9 	.word	0xbda8fae9
 8006140:	bdb4b1c4 	.word	0xbdb4b1c4
 8006144:	3e21ee9e 	.word	0x3e21ee9e
 8006148:	809c52ad 	.word	0x809c52ad
 800614c:	3e927e4f 	.word	0x3e927e4f
 8006150:	19cb1590 	.word	0x19cb1590
 8006154:	3efa01a0 	.word	0x3efa01a0
 8006158:	16c15177 	.word	0x16c15177
 800615c:	3f56c16c 	.word	0x3f56c16c
 8006160:	5555554c 	.word	0x5555554c
 8006164:	3fa55555 	.word	0x3fa55555
 8006168:	00000000 	.word	0x00000000
 800616c:	3ff00000 	.word	0x3ff00000
 8006170:	3fe00000 	.word	0x3fe00000
 8006174:	3fd33332 	.word	0x3fd33332
 8006178:	3ff00000 	.word	0x3ff00000
 800617c:	3fe90000 	.word	0x3fe90000
 8006180:	3fd20000 	.word	0x3fd20000
 8006184:	00000000 	.word	0x00000000

08006188 <__kernel_sin>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	ed2d 8b04 	vpush	{d8-d9}
 8006190:	eeb0 8a41 	vmov.f32	s16, s2
 8006194:	eef0 8a61 	vmov.f32	s17, s3
 8006198:	ec55 4b10 	vmov	r4, r5, d0
 800619c:	b083      	sub	sp, #12
 800619e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80061a6:	9001      	str	r0, [sp, #4]
 80061a8:	da06      	bge.n	80061b8 <__kernel_sin+0x30>
 80061aa:	ee10 0a10 	vmov	r0, s0
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa fba0 	bl	80008f4 <__aeabi_d2iz>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d051      	beq.n	800625c <__kernel_sin+0xd4>
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	f7fa f82a 	bl	8000218 <__aeabi_dmul>
 80061c4:	4682      	mov	sl, r0
 80061c6:	468b      	mov	fp, r1
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4620      	mov	r0, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	f7fa f822 	bl	8000218 <__aeabi_dmul>
 80061d4:	a341      	add	r3, pc, #260	; (adr r3, 80062dc <__kernel_sin+0x154>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	4650      	mov	r0, sl
 80061e0:	4659      	mov	r1, fp
 80061e2:	f7fa f819 	bl	8000218 <__aeabi_dmul>
 80061e6:	a33f      	add	r3, pc, #252	; (adr r3, 80062e4 <__kernel_sin+0x15c>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f942 	bl	8000474 <__aeabi_dsub>
 80061f0:	4652      	mov	r2, sl
 80061f2:	465b      	mov	r3, fp
 80061f4:	f7fa f810 	bl	8000218 <__aeabi_dmul>
 80061f8:	a33c      	add	r3, pc, #240	; (adr r3, 80062ec <__kernel_sin+0x164>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7fa f93b 	bl	8000478 <__adddf3>
 8006202:	4652      	mov	r2, sl
 8006204:	465b      	mov	r3, fp
 8006206:	f7fa f807 	bl	8000218 <__aeabi_dmul>
 800620a:	a33a      	add	r3, pc, #232	; (adr r3, 80062f4 <__kernel_sin+0x16c>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f930 	bl	8000474 <__aeabi_dsub>
 8006214:	4652      	mov	r2, sl
 8006216:	465b      	mov	r3, fp
 8006218:	f7f9 fffe 	bl	8000218 <__aeabi_dmul>
 800621c:	a337      	add	r3, pc, #220	; (adr r3, 80062fc <__kernel_sin+0x174>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa f929 	bl	8000478 <__adddf3>
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	b9eb      	cbnz	r3, 800626a <__kernel_sin+0xe2>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4650      	mov	r0, sl
 8006234:	4659      	mov	r1, fp
 8006236:	f7f9 ffef 	bl	8000218 <__aeabi_dmul>
 800623a:	a325      	add	r3, pc, #148	; (adr r3, 80062d0 <__kernel_sin+0x148>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa f918 	bl	8000474 <__aeabi_dsub>
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	f7f9 ffe6 	bl	8000218 <__aeabi_dmul>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4620      	mov	r0, r4
 8006252:	4629      	mov	r1, r5
 8006254:	f7fa f910 	bl	8000478 <__adddf3>
 8006258:	4604      	mov	r4, r0
 800625a:	460d      	mov	r5, r1
 800625c:	ec45 4b10 	vmov	d0, r4, r5
 8006260:	b003      	add	sp, #12
 8006262:	ecbd 8b04 	vpop	{d8-d9}
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <__kernel_sin+0x150>)
 800626c:	ec51 0b18 	vmov	r0, r1, d8
 8006270:	2200      	movs	r2, #0
 8006272:	f7f9 ffd1 	bl	8000218 <__aeabi_dmul>
 8006276:	4632      	mov	r2, r6
 8006278:	ec41 0b19 	vmov	d9, r0, r1
 800627c:	463b      	mov	r3, r7
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7f9 ffc9 	bl	8000218 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	ec51 0b19 	vmov	r0, r1, d9
 800628e:	f7fa f8f1 	bl	8000474 <__aeabi_dsub>
 8006292:	4652      	mov	r2, sl
 8006294:	465b      	mov	r3, fp
 8006296:	f7f9 ffbf 	bl	8000218 <__aeabi_dmul>
 800629a:	ec53 2b18 	vmov	r2, r3, d8
 800629e:	f7fa f8e9 	bl	8000474 <__aeabi_dsub>
 80062a2:	a30b      	add	r3, pc, #44	; (adr r3, 80062d0 <__kernel_sin+0x148>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	4606      	mov	r6, r0
 80062aa:	460f      	mov	r7, r1
 80062ac:	4640      	mov	r0, r8
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7f9 ffb2 	bl	8000218 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4630      	mov	r0, r6
 80062ba:	4639      	mov	r1, r7
 80062bc:	f7fa f8dc 	bl	8000478 <__adddf3>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa f8d4 	bl	8000474 <__aeabi_dsub>
 80062cc:	e7c4      	b.n	8006258 <__kernel_sin+0xd0>
 80062ce:	bf00      	nop
 80062d0:	55555549 	.word	0x55555549
 80062d4:	3fc55555 	.word	0x3fc55555
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	5acfd57c 	.word	0x5acfd57c
 80062e0:	3de5d93a 	.word	0x3de5d93a
 80062e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80062e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80062ec:	57b1fe7d 	.word	0x57b1fe7d
 80062f0:	3ec71de3 	.word	0x3ec71de3
 80062f4:	19c161d5 	.word	0x19c161d5
 80062f8:	3f2a01a0 	.word	0x3f2a01a0
 80062fc:	1110f8a6 	.word	0x1110f8a6
 8006300:	3f811111 	.word	0x3f811111
 8006304:	00000000 	.word	0x00000000

08006308 <__ieee754_rem_pio2>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	ed2d 8b02 	vpush	{d8}
 8006310:	ec55 4b10 	vmov	r4, r5, d0
 8006314:	4bca      	ldr	r3, [pc, #808]	; (8006640 <__ieee754_rem_pio2+0x338>)
 8006316:	b08b      	sub	sp, #44	; 0x2c
 8006318:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800631c:	4598      	cmp	r8, r3
 800631e:	4682      	mov	sl, r0
 8006320:	9502      	str	r5, [sp, #8]
 8006322:	dc08      	bgt.n	8006336 <__ieee754_rem_pio2+0x2e>
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	ed80 0b00 	vstr	d0, [r0]
 800632c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006330:	f04f 0b00 	mov.w	fp, #0
 8006334:	e028      	b.n	8006388 <__ieee754_rem_pio2+0x80>
 8006336:	4bc3      	ldr	r3, [pc, #780]	; (8006644 <__ieee754_rem_pio2+0x33c>)
 8006338:	4598      	cmp	r8, r3
 800633a:	dc78      	bgt.n	800642e <__ieee754_rem_pio2+0x126>
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	4ec2      	ldr	r6, [pc, #776]	; (8006648 <__ieee754_rem_pio2+0x340>)
 8006340:	2b00      	cmp	r3, #0
 8006342:	ee10 0a10 	vmov	r0, s0
 8006346:	a3b0      	add	r3, pc, #704	; (adr r3, 8006608 <__ieee754_rem_pio2+0x300>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	4629      	mov	r1, r5
 800634e:	dd39      	ble.n	80063c4 <__ieee754_rem_pio2+0xbc>
 8006350:	f7fa f890 	bl	8000474 <__aeabi_dsub>
 8006354:	45b0      	cmp	r8, r6
 8006356:	4604      	mov	r4, r0
 8006358:	460d      	mov	r5, r1
 800635a:	d01b      	beq.n	8006394 <__ieee754_rem_pio2+0x8c>
 800635c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006610 <__ieee754_rem_pio2+0x308>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7fa f887 	bl	8000474 <__aeabi_dsub>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	e9ca 2300 	strd	r2, r3, [sl]
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	f7fa f87f 	bl	8000474 <__aeabi_dsub>
 8006376:	a3a6      	add	r3, pc, #664	; (adr r3, 8006610 <__ieee754_rem_pio2+0x308>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f87a 	bl	8000474 <__aeabi_dsub>
 8006380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006384:	f04f 0b01 	mov.w	fp, #1
 8006388:	4658      	mov	r0, fp
 800638a:	b00b      	add	sp, #44	; 0x2c
 800638c:	ecbd 8b02 	vpop	{d8}
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	a3a0      	add	r3, pc, #640	; (adr r3, 8006618 <__ieee754_rem_pio2+0x310>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f7fa f86b 	bl	8000474 <__aeabi_dsub>
 800639e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006620 <__ieee754_rem_pio2+0x318>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	4604      	mov	r4, r0
 80063a6:	460d      	mov	r5, r1
 80063a8:	f7fa f864 	bl	8000474 <__aeabi_dsub>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	e9ca 2300 	strd	r2, r3, [sl]
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7fa f85c 	bl	8000474 <__aeabi_dsub>
 80063bc:	a398      	add	r3, pc, #608	; (adr r3, 8006620 <__ieee754_rem_pio2+0x318>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	e7db      	b.n	800637c <__ieee754_rem_pio2+0x74>
 80063c4:	f7fa f858 	bl	8000478 <__adddf3>
 80063c8:	45b0      	cmp	r8, r6
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	d016      	beq.n	80063fe <__ieee754_rem_pio2+0xf6>
 80063d0:	a38f      	add	r3, pc, #572	; (adr r3, 8006610 <__ieee754_rem_pio2+0x308>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7fa f84f 	bl	8000478 <__adddf3>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	e9ca 2300 	strd	r2, r3, [sl]
 80063e2:	4620      	mov	r0, r4
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7fa f845 	bl	8000474 <__aeabi_dsub>
 80063ea:	a389      	add	r3, pc, #548	; (adr r3, 8006610 <__ieee754_rem_pio2+0x308>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f842 	bl	8000478 <__adddf3>
 80063f4:	f04f 3bff 	mov.w	fp, #4294967295
 80063f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063fc:	e7c4      	b.n	8006388 <__ieee754_rem_pio2+0x80>
 80063fe:	a386      	add	r3, pc, #536	; (adr r3, 8006618 <__ieee754_rem_pio2+0x310>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7fa f838 	bl	8000478 <__adddf3>
 8006408:	a385      	add	r3, pc, #532	; (adr r3, 8006620 <__ieee754_rem_pio2+0x318>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	4604      	mov	r4, r0
 8006410:	460d      	mov	r5, r1
 8006412:	f7fa f831 	bl	8000478 <__adddf3>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	e9ca 2300 	strd	r2, r3, [sl]
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa f827 	bl	8000474 <__aeabi_dsub>
 8006426:	a37e      	add	r3, pc, #504	; (adr r3, 8006620 <__ieee754_rem_pio2+0x318>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	e7e0      	b.n	80063f0 <__ieee754_rem_pio2+0xe8>
 800642e:	4b87      	ldr	r3, [pc, #540]	; (800664c <__ieee754_rem_pio2+0x344>)
 8006430:	4598      	cmp	r8, r3
 8006432:	f300 80d8 	bgt.w	80065e6 <__ieee754_rem_pio2+0x2de>
 8006436:	f000 f96d 	bl	8006714 <fabs>
 800643a:	ec55 4b10 	vmov	r4, r5, d0
 800643e:	ee10 0a10 	vmov	r0, s0
 8006442:	a379      	add	r3, pc, #484	; (adr r3, 8006628 <__ieee754_rem_pio2+0x320>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 fee5 	bl	8000218 <__aeabi_dmul>
 800644e:	4b80      	ldr	r3, [pc, #512]	; (8006650 <__ieee754_rem_pio2+0x348>)
 8006450:	2200      	movs	r2, #0
 8006452:	f7fa f811 	bl	8000478 <__adddf3>
 8006456:	f7fa fa4d 	bl	80008f4 <__aeabi_d2iz>
 800645a:	4683      	mov	fp, r0
 800645c:	f7fa f958 	bl	8000710 <__aeabi_i2d>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	ec43 2b18 	vmov	d8, r2, r3
 8006468:	a367      	add	r3, pc, #412	; (adr r3, 8006608 <__ieee754_rem_pio2+0x300>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7f9 fed3 	bl	8000218 <__aeabi_dmul>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7f9 fffb 	bl	8000474 <__aeabi_dsub>
 800647e:	a364      	add	r3, pc, #400	; (adr r3, 8006610 <__ieee754_rem_pio2+0x308>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	ec51 0b18 	vmov	r0, r1, d8
 800648c:	f7f9 fec4 	bl	8000218 <__aeabi_dmul>
 8006490:	f1bb 0f1f 	cmp.w	fp, #31
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	dc0d      	bgt.n	80064b6 <__ieee754_rem_pio2+0x1ae>
 800649a:	4b6e      	ldr	r3, [pc, #440]	; (8006654 <__ieee754_rem_pio2+0x34c>)
 800649c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	4543      	cmp	r3, r8
 80064a6:	d006      	beq.n	80064b6 <__ieee754_rem_pio2+0x1ae>
 80064a8:	4622      	mov	r2, r4
 80064aa:	462b      	mov	r3, r5
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7f9 ffe0 	bl	8000474 <__aeabi_dsub>
 80064b4:	e00e      	b.n	80064d4 <__ieee754_rem_pio2+0x1cc>
 80064b6:	462b      	mov	r3, r5
 80064b8:	4622      	mov	r2, r4
 80064ba:	4630      	mov	r0, r6
 80064bc:	4639      	mov	r1, r7
 80064be:	f7f9 ffd9 	bl	8000474 <__aeabi_dsub>
 80064c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80064c6:	9303      	str	r3, [sp, #12]
 80064c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	dc02      	bgt.n	80064da <__ieee754_rem_pio2+0x1d2>
 80064d4:	e9ca 0100 	strd	r0, r1, [sl]
 80064d8:	e039      	b.n	800654e <__ieee754_rem_pio2+0x246>
 80064da:	a34f      	add	r3, pc, #316	; (adr r3, 8006618 <__ieee754_rem_pio2+0x310>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	ec51 0b18 	vmov	r0, r1, d8
 80064e4:	f7f9 fe98 	bl	8000218 <__aeabi_dmul>
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7f9 ffbe 	bl	8000474 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7f9 ffb6 	bl	8000474 <__aeabi_dsub>
 8006508:	4622      	mov	r2, r4
 800650a:	462b      	mov	r3, r5
 800650c:	f7f9 ffb2 	bl	8000474 <__aeabi_dsub>
 8006510:	a343      	add	r3, pc, #268	; (adr r3, 8006620 <__ieee754_rem_pio2+0x318>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	ec51 0b18 	vmov	r0, r1, d8
 800651e:	f7f9 fe7b 	bl	8000218 <__aeabi_dmul>
 8006522:	4622      	mov	r2, r4
 8006524:	462b      	mov	r3, r5
 8006526:	f7f9 ffa5 	bl	8000474 <__aeabi_dsub>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7f9 ff9d 	bl	8000474 <__aeabi_dsub>
 800653a:	9a03      	ldr	r2, [sp, #12]
 800653c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b31      	cmp	r3, #49	; 0x31
 8006544:	dc24      	bgt.n	8006590 <__ieee754_rem_pio2+0x288>
 8006546:	e9ca 0100 	strd	r0, r1, [sl]
 800654a:	4646      	mov	r6, r8
 800654c:	464f      	mov	r7, r9
 800654e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006552:	4630      	mov	r0, r6
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	4639      	mov	r1, r7
 800655a:	f7f9 ff8b 	bl	8000474 <__aeabi_dsub>
 800655e:	462b      	mov	r3, r5
 8006560:	4622      	mov	r2, r4
 8006562:	f7f9 ff87 	bl	8000474 <__aeabi_dsub>
 8006566:	9b02      	ldr	r3, [sp, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800656e:	f6bf af0b 	bge.w	8006388 <__ieee754_rem_pio2+0x80>
 8006572:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006576:	f8ca 3004 	str.w	r3, [sl, #4]
 800657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800657e:	f8ca 8000 	str.w	r8, [sl]
 8006582:	f8ca 0008 	str.w	r0, [sl, #8]
 8006586:	f8ca 300c 	str.w	r3, [sl, #12]
 800658a:	f1cb 0b00 	rsb	fp, fp, #0
 800658e:	e6fb      	b.n	8006388 <__ieee754_rem_pio2+0x80>
 8006590:	a327      	add	r3, pc, #156	; (adr r3, 8006630 <__ieee754_rem_pio2+0x328>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	ec51 0b18 	vmov	r0, r1, d8
 800659a:	f7f9 fe3d 	bl	8000218 <__aeabi_dmul>
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7f9 ff63 	bl	8000474 <__aeabi_dsub>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 ff5b 	bl	8000474 <__aeabi_dsub>
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	f7f9 ff57 	bl	8000474 <__aeabi_dsub>
 80065c6:	a31c      	add	r3, pc, #112	; (adr r3, 8006638 <__ieee754_rem_pio2+0x330>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	ec51 0b18 	vmov	r0, r1, d8
 80065d4:	f7f9 fe20 	bl	8000218 <__aeabi_dmul>
 80065d8:	4622      	mov	r2, r4
 80065da:	462b      	mov	r3, r5
 80065dc:	f7f9 ff4a 	bl	8000474 <__aeabi_dsub>
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	e760      	b.n	80064a8 <__ieee754_rem_pio2+0x1a0>
 80065e6:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <__ieee754_rem_pio2+0x350>)
 80065e8:	4598      	cmp	r8, r3
 80065ea:	dd37      	ble.n	800665c <__ieee754_rem_pio2+0x354>
 80065ec:	ee10 2a10 	vmov	r2, s0
 80065f0:	462b      	mov	r3, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7f9 ff3d 	bl	8000474 <__aeabi_dsub>
 80065fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065fe:	e9ca 0100 	strd	r0, r1, [sl]
 8006602:	e695      	b.n	8006330 <__ieee754_rem_pio2+0x28>
 8006604:	f3af 8000 	nop.w
 8006608:	54400000 	.word	0x54400000
 800660c:	3ff921fb 	.word	0x3ff921fb
 8006610:	1a626331 	.word	0x1a626331
 8006614:	3dd0b461 	.word	0x3dd0b461
 8006618:	1a600000 	.word	0x1a600000
 800661c:	3dd0b461 	.word	0x3dd0b461
 8006620:	2e037073 	.word	0x2e037073
 8006624:	3ba3198a 	.word	0x3ba3198a
 8006628:	6dc9c883 	.word	0x6dc9c883
 800662c:	3fe45f30 	.word	0x3fe45f30
 8006630:	2e000000 	.word	0x2e000000
 8006634:	3ba3198a 	.word	0x3ba3198a
 8006638:	252049c1 	.word	0x252049c1
 800663c:	397b839a 	.word	0x397b839a
 8006640:	3fe921fb 	.word	0x3fe921fb
 8006644:	4002d97b 	.word	0x4002d97b
 8006648:	3ff921fb 	.word	0x3ff921fb
 800664c:	413921fb 	.word	0x413921fb
 8006650:	3fe00000 	.word	0x3fe00000
 8006654:	08006ff0 	.word	0x08006ff0
 8006658:	7fefffff 	.word	0x7fefffff
 800665c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006660:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006664:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006668:	4620      	mov	r0, r4
 800666a:	460d      	mov	r5, r1
 800666c:	f7fa f942 	bl	80008f4 <__aeabi_d2iz>
 8006670:	f7fa f84e 	bl	8000710 <__aeabi_i2d>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4620      	mov	r0, r4
 800667a:	4629      	mov	r1, r5
 800667c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006680:	f7f9 fef8 	bl	8000474 <__aeabi_dsub>
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <__ieee754_rem_pio2+0x404>)
 8006686:	2200      	movs	r2, #0
 8006688:	f7f9 fdc6 	bl	8000218 <__aeabi_dmul>
 800668c:	460d      	mov	r5, r1
 800668e:	4604      	mov	r4, r0
 8006690:	f7fa f930 	bl	80008f4 <__aeabi_d2iz>
 8006694:	f7fa f83c 	bl	8000710 <__aeabi_i2d>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4620      	mov	r0, r4
 800669e:	4629      	mov	r1, r5
 80066a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066a4:	f7f9 fee6 	bl	8000474 <__aeabi_dsub>
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <__ieee754_rem_pio2+0x404>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	f7f9 fdb4 	bl	8000218 <__aeabi_dmul>
 80066b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80066b8:	2703      	movs	r7, #3
 80066ba:	2400      	movs	r4, #0
 80066bc:	2500      	movs	r5, #0
 80066be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	46b9      	mov	r9, r7
 80066c8:	3f01      	subs	r7, #1
 80066ca:	f7fa f8e1 	bl	8000890 <__aeabi_dcmpeq>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d1f5      	bne.n	80066be <__ieee754_rem_pio2+0x3b6>
 80066d2:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <__ieee754_rem_pio2+0x408>)
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	2302      	movs	r3, #2
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4632      	mov	r2, r6
 80066dc:	464b      	mov	r3, r9
 80066de:	4651      	mov	r1, sl
 80066e0:	a804      	add	r0, sp, #16
 80066e2:	f000 f821 	bl	8006728 <__kernel_rem_pio2>
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	4683      	mov	fp, r0
 80066ec:	f6bf ae4c 	bge.w	8006388 <__ieee754_rem_pio2+0x80>
 80066f0:	e9da 2100 	ldrd	r2, r1, [sl]
 80066f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066f8:	e9ca 2300 	strd	r2, r3, [sl]
 80066fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006704:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006708:	e73f      	b.n	800658a <__ieee754_rem_pio2+0x282>
 800670a:	bf00      	nop
 800670c:	41700000 	.word	0x41700000
 8006710:	08007070 	.word	0x08007070

08006714 <fabs>:
 8006714:	ec51 0b10 	vmov	r0, r1, d0
 8006718:	ee10 2a10 	vmov	r2, s0
 800671c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006720:	ec43 2b10 	vmov	d0, r2, r3
 8006724:	4770      	bx	lr
	...

08006728 <__kernel_rem_pio2>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	ed2d 8b02 	vpush	{d8}
 8006730:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006734:	f112 0f14 	cmn.w	r2, #20
 8006738:	9306      	str	r3, [sp, #24]
 800673a:	9104      	str	r1, [sp, #16]
 800673c:	4bc2      	ldr	r3, [pc, #776]	; (8006a48 <__kernel_rem_pio2+0x320>)
 800673e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006740:	9009      	str	r0, [sp, #36]	; 0x24
 8006742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	9b06      	ldr	r3, [sp, #24]
 800674a:	f103 33ff 	add.w	r3, r3, #4294967295
 800674e:	bfa8      	it	ge
 8006750:	1ed4      	subge	r4, r2, #3
 8006752:	9305      	str	r3, [sp, #20]
 8006754:	bfb2      	itee	lt
 8006756:	2400      	movlt	r4, #0
 8006758:	2318      	movge	r3, #24
 800675a:	fb94 f4f3 	sdivge	r4, r4, r3
 800675e:	f06f 0317 	mvn.w	r3, #23
 8006762:	fb04 3303 	mla	r3, r4, r3, r3
 8006766:	eb03 0a02 	add.w	sl, r3, r2
 800676a:	9b00      	ldr	r3, [sp, #0]
 800676c:	9a05      	ldr	r2, [sp, #20]
 800676e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006a38 <__kernel_rem_pio2+0x310>
 8006772:	eb03 0802 	add.w	r8, r3, r2
 8006776:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006778:	1aa7      	subs	r7, r4, r2
 800677a:	ae20      	add	r6, sp, #128	; 0x80
 800677c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006780:	2500      	movs	r5, #0
 8006782:	4545      	cmp	r5, r8
 8006784:	dd13      	ble.n	80067ae <__kernel_rem_pio2+0x86>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	aa20      	add	r2, sp, #128	; 0x80
 800678a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800678e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	4598      	cmp	r8, r3
 800679a:	dc31      	bgt.n	8006800 <__kernel_rem_pio2+0xd8>
 800679c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006a38 <__kernel_rem_pio2+0x310>
 80067a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80067a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067a8:	462f      	mov	r7, r5
 80067aa:	2600      	movs	r6, #0
 80067ac:	e01b      	b.n	80067e6 <__kernel_rem_pio2+0xbe>
 80067ae:	42ef      	cmn	r7, r5
 80067b0:	d407      	bmi.n	80067c2 <__kernel_rem_pio2+0x9a>
 80067b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80067b6:	f7f9 ffab 	bl	8000710 <__aeabi_i2d>
 80067ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80067be:	3501      	adds	r5, #1
 80067c0:	e7df      	b.n	8006782 <__kernel_rem_pio2+0x5a>
 80067c2:	ec51 0b18 	vmov	r0, r1, d8
 80067c6:	e7f8      	b.n	80067ba <__kernel_rem_pio2+0x92>
 80067c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80067d0:	f7f9 fd22 	bl	8000218 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067dc:	f7f9 fe4c 	bl	8000478 <__adddf3>
 80067e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e4:	3601      	adds	r6, #1
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	429e      	cmp	r6, r3
 80067ea:	f1a7 0708 	sub.w	r7, r7, #8
 80067ee:	ddeb      	ble.n	80067c8 <__kernel_rem_pio2+0xa0>
 80067f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067f4:	f108 0801 	add.w	r8, r8, #1
 80067f8:	ecab 7b02 	vstmia	fp!, {d7}
 80067fc:	3508      	adds	r5, #8
 80067fe:	e7ca      	b.n	8006796 <__kernel_rem_pio2+0x6e>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	aa0c      	add	r2, sp, #48	; 0x30
 8006804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006808:	930b      	str	r3, [sp, #44]	; 0x2c
 800680a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800680c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006810:	9c00      	ldr	r4, [sp, #0]
 8006812:	930a      	str	r3, [sp, #40]	; 0x28
 8006814:	00e3      	lsls	r3, r4, #3
 8006816:	9308      	str	r3, [sp, #32]
 8006818:	ab98      	add	r3, sp, #608	; 0x260
 800681a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800681e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006822:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006826:	ab70      	add	r3, sp, #448	; 0x1c0
 8006828:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800682c:	46c3      	mov	fp, r8
 800682e:	46a1      	mov	r9, r4
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	f1a5 0508 	sub.w	r5, r5, #8
 8006838:	dc77      	bgt.n	800692a <__kernel_rem_pio2+0x202>
 800683a:	ec47 6b10 	vmov	d0, r6, r7
 800683e:	4650      	mov	r0, sl
 8006840:	f000 fac2 	bl	8006dc8 <scalbn>
 8006844:	ec57 6b10 	vmov	r6, r7, d0
 8006848:	2200      	movs	r2, #0
 800684a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800684e:	ee10 0a10 	vmov	r0, s0
 8006852:	4639      	mov	r1, r7
 8006854:	f7f9 fce0 	bl	8000218 <__aeabi_dmul>
 8006858:	ec41 0b10 	vmov	d0, r0, r1
 800685c:	f000 fb34 	bl	8006ec8 <floor>
 8006860:	4b7a      	ldr	r3, [pc, #488]	; (8006a4c <__kernel_rem_pio2+0x324>)
 8006862:	ec51 0b10 	vmov	r0, r1, d0
 8006866:	2200      	movs	r2, #0
 8006868:	f7f9 fcd6 	bl	8000218 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fdfe 	bl	8000474 <__aeabi_dsub>
 8006878:	460f      	mov	r7, r1
 800687a:	4606      	mov	r6, r0
 800687c:	f7fa f83a 	bl	80008f4 <__aeabi_d2iz>
 8006880:	9002      	str	r0, [sp, #8]
 8006882:	f7f9 ff45 	bl	8000710 <__aeabi_i2d>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4630      	mov	r0, r6
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 fdf1 	bl	8000474 <__aeabi_dsub>
 8006892:	f1ba 0f00 	cmp.w	sl, #0
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	dd6d      	ble.n	8006978 <__kernel_rem_pio2+0x250>
 800689c:	1e61      	subs	r1, r4, #1
 800689e:	ab0c      	add	r3, sp, #48	; 0x30
 80068a0:	9d02      	ldr	r5, [sp, #8]
 80068a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068a6:	f1ca 0018 	rsb	r0, sl, #24
 80068aa:	fa43 f200 	asr.w	r2, r3, r0
 80068ae:	4415      	add	r5, r2
 80068b0:	4082      	lsls	r2, r0
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	aa0c      	add	r2, sp, #48	; 0x30
 80068b6:	9502      	str	r5, [sp, #8]
 80068b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80068bc:	f1ca 0217 	rsb	r2, sl, #23
 80068c0:	fa43 fb02 	asr.w	fp, r3, r2
 80068c4:	f1bb 0f00 	cmp.w	fp, #0
 80068c8:	dd65      	ble.n	8006996 <__kernel_rem_pio2+0x26e>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	2200      	movs	r2, #0
 80068ce:	3301      	adds	r3, #1
 80068d0:	9302      	str	r3, [sp, #8]
 80068d2:	4615      	mov	r5, r2
 80068d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068d8:	4294      	cmp	r4, r2
 80068da:	f300 809f 	bgt.w	8006a1c <__kernel_rem_pio2+0x2f4>
 80068de:	f1ba 0f00 	cmp.w	sl, #0
 80068e2:	dd07      	ble.n	80068f4 <__kernel_rem_pio2+0x1cc>
 80068e4:	f1ba 0f01 	cmp.w	sl, #1
 80068e8:	f000 80c1 	beq.w	8006a6e <__kernel_rem_pio2+0x346>
 80068ec:	f1ba 0f02 	cmp.w	sl, #2
 80068f0:	f000 80c7 	beq.w	8006a82 <__kernel_rem_pio2+0x35a>
 80068f4:	f1bb 0f02 	cmp.w	fp, #2
 80068f8:	d14d      	bne.n	8006996 <__kernel_rem_pio2+0x26e>
 80068fa:	4632      	mov	r2, r6
 80068fc:	463b      	mov	r3, r7
 80068fe:	4954      	ldr	r1, [pc, #336]	; (8006a50 <__kernel_rem_pio2+0x328>)
 8006900:	2000      	movs	r0, #0
 8006902:	f7f9 fdb7 	bl	8000474 <__aeabi_dsub>
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	2d00      	cmp	r5, #0
 800690c:	d043      	beq.n	8006996 <__kernel_rem_pio2+0x26e>
 800690e:	4650      	mov	r0, sl
 8006910:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006a40 <__kernel_rem_pio2+0x318>
 8006914:	f000 fa58 	bl	8006dc8 <scalbn>
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	ec53 2b10 	vmov	r2, r3, d0
 8006920:	f7f9 fda8 	bl	8000474 <__aeabi_dsub>
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	e035      	b.n	8006996 <__kernel_rem_pio2+0x26e>
 800692a:	4b4a      	ldr	r3, [pc, #296]	; (8006a54 <__kernel_rem_pio2+0x32c>)
 800692c:	2200      	movs	r2, #0
 800692e:	4630      	mov	r0, r6
 8006930:	4639      	mov	r1, r7
 8006932:	f7f9 fc71 	bl	8000218 <__aeabi_dmul>
 8006936:	f7f9 ffdd 	bl	80008f4 <__aeabi_d2iz>
 800693a:	f7f9 fee9 	bl	8000710 <__aeabi_i2d>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	ec43 2b18 	vmov	d8, r2, r3
 8006946:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <__kernel_rem_pio2+0x330>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fc65 	bl	8000218 <__aeabi_dmul>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4630      	mov	r0, r6
 8006954:	4639      	mov	r1, r7
 8006956:	f7f9 fd8d 	bl	8000474 <__aeabi_dsub>
 800695a:	f7f9 ffcb 	bl	80008f4 <__aeabi_d2iz>
 800695e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006962:	f84b 0b04 	str.w	r0, [fp], #4
 8006966:	ec51 0b18 	vmov	r0, r1, d8
 800696a:	f7f9 fd85 	bl	8000478 <__adddf3>
 800696e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	e75b      	b.n	8006830 <__kernel_rem_pio2+0x108>
 8006978:	d106      	bne.n	8006988 <__kernel_rem_pio2+0x260>
 800697a:	1e63      	subs	r3, r4, #1
 800697c:	aa0c      	add	r2, sp, #48	; 0x30
 800697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006982:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006986:	e79d      	b.n	80068c4 <__kernel_rem_pio2+0x19c>
 8006988:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <__kernel_rem_pio2+0x334>)
 800698a:	2200      	movs	r2, #0
 800698c:	f7f9 ff9e 	bl	80008cc <__aeabi_dcmpge>
 8006990:	2800      	cmp	r0, #0
 8006992:	d140      	bne.n	8006a16 <__kernel_rem_pio2+0x2ee>
 8006994:	4683      	mov	fp, r0
 8006996:	2200      	movs	r2, #0
 8006998:	2300      	movs	r3, #0
 800699a:	4630      	mov	r0, r6
 800699c:	4639      	mov	r1, r7
 800699e:	f7f9 ff77 	bl	8000890 <__aeabi_dcmpeq>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f000 80c1 	beq.w	8006b2a <__kernel_rem_pio2+0x402>
 80069a8:	1e65      	subs	r5, r4, #1
 80069aa:	462b      	mov	r3, r5
 80069ac:	2200      	movs	r2, #0
 80069ae:	9900      	ldr	r1, [sp, #0]
 80069b0:	428b      	cmp	r3, r1
 80069b2:	da6d      	bge.n	8006a90 <__kernel_rem_pio2+0x368>
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	f000 808a 	beq.w	8006ace <__kernel_rem_pio2+0x3a6>
 80069ba:	ab0c      	add	r3, sp, #48	; 0x30
 80069bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80069c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80ae 	beq.w	8006b26 <__kernel_rem_pio2+0x3fe>
 80069ca:	4650      	mov	r0, sl
 80069cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006a40 <__kernel_rem_pio2+0x318>
 80069d0:	f000 f9fa 	bl	8006dc8 <scalbn>
 80069d4:	1c6b      	adds	r3, r5, #1
 80069d6:	00da      	lsls	r2, r3, #3
 80069d8:	9205      	str	r2, [sp, #20]
 80069da:	ec57 6b10 	vmov	r6, r7, d0
 80069de:	aa70      	add	r2, sp, #448	; 0x1c0
 80069e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006a54 <__kernel_rem_pio2+0x32c>
 80069e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80069e8:	462c      	mov	r4, r5
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	f280 80d4 	bge.w	8006b9c <__kernel_rem_pio2+0x474>
 80069f4:	462c      	mov	r4, r5
 80069f6:	2c00      	cmp	r4, #0
 80069f8:	f2c0 8102 	blt.w	8006c00 <__kernel_rem_pio2+0x4d8>
 80069fc:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <__kernel_rem_pio2+0x338>)
 80069fe:	461e      	mov	r6, r3
 8006a00:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a02:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006a06:	1b2b      	subs	r3, r5, r4
 8006a08:	f04f 0900 	mov.w	r9, #0
 8006a0c:	f04f 0a00 	mov.w	sl, #0
 8006a10:	2700      	movs	r7, #0
 8006a12:	9306      	str	r3, [sp, #24]
 8006a14:	e0e6      	b.n	8006be4 <__kernel_rem_pio2+0x4bc>
 8006a16:	f04f 0b02 	mov.w	fp, #2
 8006a1a:	e756      	b.n	80068ca <__kernel_rem_pio2+0x1a2>
 8006a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a20:	bb05      	cbnz	r5, 8006a64 <__kernel_rem_pio2+0x33c>
 8006a22:	b123      	cbz	r3, 8006a2e <__kernel_rem_pio2+0x306>
 8006a24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006a28:	f8c8 3000 	str.w	r3, [r8]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	3201      	adds	r2, #1
 8006a30:	f108 0804 	add.w	r8, r8, #4
 8006a34:	461d      	mov	r5, r3
 8006a36:	e74f      	b.n	80068d8 <__kernel_rem_pio2+0x1b0>
	...
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	080071b8 	.word	0x080071b8
 8006a4c:	40200000 	.word	0x40200000
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	3e700000 	.word	0x3e700000
 8006a58:	41700000 	.word	0x41700000
 8006a5c:	3fe00000 	.word	0x3fe00000
 8006a60:	08007178 	.word	0x08007178
 8006a64:	1acb      	subs	r3, r1, r3
 8006a66:	f8c8 3000 	str.w	r3, [r8]
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	e7df      	b.n	8006a2e <__kernel_rem_pio2+0x306>
 8006a6e:	1e62      	subs	r2, r4, #1
 8006a70:	ab0c      	add	r3, sp, #48	; 0x30
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a7a:	a90c      	add	r1, sp, #48	; 0x30
 8006a7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a80:	e738      	b.n	80068f4 <__kernel_rem_pio2+0x1cc>
 8006a82:	1e62      	subs	r2, r4, #1
 8006a84:	ab0c      	add	r3, sp, #48	; 0x30
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a8e:	e7f4      	b.n	8006a7a <__kernel_rem_pio2+0x352>
 8006a90:	a90c      	add	r1, sp, #48	; 0x30
 8006a92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	e788      	b.n	80069ae <__kernel_rem_pio2+0x286>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	d0fa      	beq.n	8006a9c <__kernel_rem_pio2+0x374>
 8006aa6:	9a08      	ldr	r2, [sp, #32]
 8006aa8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006aac:	446a      	add	r2, sp
 8006aae:	3a98      	subs	r2, #152	; 0x98
 8006ab0:	9208      	str	r2, [sp, #32]
 8006ab2:	9a06      	ldr	r2, [sp, #24]
 8006ab4:	a920      	add	r1, sp, #128	; 0x80
 8006ab6:	18a2      	adds	r2, r4, r2
 8006ab8:	18e3      	adds	r3, r4, r3
 8006aba:	f104 0801 	add.w	r8, r4, #1
 8006abe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	4543      	cmp	r3, r8
 8006ac8:	da04      	bge.n	8006ad4 <__kernel_rem_pio2+0x3ac>
 8006aca:	461c      	mov	r4, r3
 8006acc:	e6a2      	b.n	8006814 <__kernel_rem_pio2+0xec>
 8006ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e7e4      	b.n	8006a9e <__kernel_rem_pio2+0x376>
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ada:	f7f9 fe19 	bl	8000710 <__aeabi_i2d>
 8006ade:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae4:	46ab      	mov	fp, r5
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	f04f 0900 	mov.w	r9, #0
 8006aec:	2600      	movs	r6, #0
 8006aee:	2700      	movs	r7, #0
 8006af0:	9b05      	ldr	r3, [sp, #20]
 8006af2:	4599      	cmp	r9, r3
 8006af4:	dd06      	ble.n	8006b04 <__kernel_rem_pio2+0x3dc>
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006afc:	f108 0801 	add.w	r8, r8, #1
 8006b00:	9308      	str	r3, [sp, #32]
 8006b02:	e7df      	b.n	8006ac4 <__kernel_rem_pio2+0x39c>
 8006b04:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b08:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006b0c:	f7f9 fb84 	bl	8000218 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fcae 	bl	8000478 <__adddf3>
 8006b1c:	f109 0901 	add.w	r9, r9, #1
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	e7e4      	b.n	8006af0 <__kernel_rem_pio2+0x3c8>
 8006b26:	3d01      	subs	r5, #1
 8006b28:	e747      	b.n	80069ba <__kernel_rem_pio2+0x292>
 8006b2a:	ec47 6b10 	vmov	d0, r6, r7
 8006b2e:	f1ca 0000 	rsb	r0, sl, #0
 8006b32:	f000 f949 	bl	8006dc8 <scalbn>
 8006b36:	ec57 6b10 	vmov	r6, r7, d0
 8006b3a:	4ba0      	ldr	r3, [pc, #640]	; (8006dbc <__kernel_rem_pio2+0x694>)
 8006b3c:	ee10 0a10 	vmov	r0, s0
 8006b40:	2200      	movs	r2, #0
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 fec2 	bl	80008cc <__aeabi_dcmpge>
 8006b48:	b1f8      	cbz	r0, 8006b8a <__kernel_rem_pio2+0x462>
 8006b4a:	4b9d      	ldr	r3, [pc, #628]	; (8006dc0 <__kernel_rem_pio2+0x698>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4630      	mov	r0, r6
 8006b50:	4639      	mov	r1, r7
 8006b52:	f7f9 fb61 	bl	8000218 <__aeabi_dmul>
 8006b56:	f7f9 fecd 	bl	80008f4 <__aeabi_d2iz>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	f7f9 fdd8 	bl	8000710 <__aeabi_i2d>
 8006b60:	4b96      	ldr	r3, [pc, #600]	; (8006dbc <__kernel_rem_pio2+0x694>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	f7f9 fb58 	bl	8000218 <__aeabi_dmul>
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7f9 fc80 	bl	8000474 <__aeabi_dsub>
 8006b74:	f7f9 febe 	bl	80008f4 <__aeabi_d2iz>
 8006b78:	1c65      	adds	r5, r4, #1
 8006b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8006b7c:	f10a 0a18 	add.w	sl, sl, #24
 8006b80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b84:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b88:	e71f      	b.n	80069ca <__kernel_rem_pio2+0x2a2>
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 feb1 	bl	80008f4 <__aeabi_d2iz>
 8006b92:	ab0c      	add	r3, sp, #48	; 0x30
 8006b94:	4625      	mov	r5, r4
 8006b96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b9a:	e716      	b.n	80069ca <__kernel_rem_pio2+0x2a2>
 8006b9c:	ab0c      	add	r3, sp, #48	; 0x30
 8006b9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006ba2:	f7f9 fdb5 	bl	8000710 <__aeabi_i2d>
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f7f9 fb35 	bl	8000218 <__aeabi_dmul>
 8006bae:	4642      	mov	r2, r8
 8006bb0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fb2d 	bl	8000218 <__aeabi_dmul>
 8006bbe:	3c01      	subs	r4, #1
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	e713      	b.n	80069ee <__kernel_rem_pio2+0x2c6>
 8006bc6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006bca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006bce:	f7f9 fb23 	bl	8000218 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4648      	mov	r0, r9
 8006bd8:	4651      	mov	r1, sl
 8006bda:	f7f9 fc4d 	bl	8000478 <__adddf3>
 8006bde:	3701      	adds	r7, #1
 8006be0:	4681      	mov	r9, r0
 8006be2:	468a      	mov	sl, r1
 8006be4:	9b00      	ldr	r3, [sp, #0]
 8006be6:	429f      	cmp	r7, r3
 8006be8:	dc02      	bgt.n	8006bf0 <__kernel_rem_pio2+0x4c8>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	429f      	cmp	r7, r3
 8006bee:	ddea      	ble.n	8006bc6 <__kernel_rem_pio2+0x49e>
 8006bf0:	9a06      	ldr	r2, [sp, #24]
 8006bf2:	ab48      	add	r3, sp, #288	; 0x120
 8006bf4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006bf8:	e9c6 9a00 	strd	r9, sl, [r6]
 8006bfc:	3c01      	subs	r4, #1
 8006bfe:	e6fa      	b.n	80069f6 <__kernel_rem_pio2+0x2ce>
 8006c00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	dc0b      	bgt.n	8006c1e <__kernel_rem_pio2+0x4f6>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dc39      	bgt.n	8006c7e <__kernel_rem_pio2+0x556>
 8006c0a:	d05d      	beq.n	8006cc8 <__kernel_rem_pio2+0x5a0>
 8006c0c:	9b02      	ldr	r3, [sp, #8]
 8006c0e:	f003 0007 	and.w	r0, r3, #7
 8006c12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006c16:	ecbd 8b02 	vpop	{d8}
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d1f3      	bne.n	8006c0c <__kernel_rem_pio2+0x4e4>
 8006c24:	9b05      	ldr	r3, [sp, #20]
 8006c26:	9500      	str	r5, [sp, #0]
 8006c28:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006c2c:	eb0d 0403 	add.w	r4, sp, r3
 8006c30:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006c34:	46a2      	mov	sl, r4
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f1aa 0a08 	sub.w	sl, sl, #8
 8006c3e:	dc69      	bgt.n	8006d14 <__kernel_rem_pio2+0x5ec>
 8006c40:	46aa      	mov	sl, r5
 8006c42:	f1ba 0f01 	cmp.w	sl, #1
 8006c46:	f1a4 0408 	sub.w	r4, r4, #8
 8006c4a:	f300 8083 	bgt.w	8006d54 <__kernel_rem_pio2+0x62c>
 8006c4e:	9c05      	ldr	r4, [sp, #20]
 8006c50:	ab48      	add	r3, sp, #288	; 0x120
 8006c52:	441c      	add	r4, r3
 8006c54:	2000      	movs	r0, #0
 8006c56:	2100      	movs	r1, #0
 8006c58:	2d01      	cmp	r5, #1
 8006c5a:	f300 809a 	bgt.w	8006d92 <__kernel_rem_pio2+0x66a>
 8006c5e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006c62:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006c66:	f1bb 0f00 	cmp.w	fp, #0
 8006c6a:	f040 8098 	bne.w	8006d9e <__kernel_rem_pio2+0x676>
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	e9c3 7800 	strd	r7, r8, [r3]
 8006c74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006c78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c7c:	e7c6      	b.n	8006c0c <__kernel_rem_pio2+0x4e4>
 8006c7e:	9e05      	ldr	r6, [sp, #20]
 8006c80:	ab48      	add	r3, sp, #288	; 0x120
 8006c82:	441e      	add	r6, r3
 8006c84:	462c      	mov	r4, r5
 8006c86:	2000      	movs	r0, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2c00      	cmp	r4, #0
 8006c8c:	da33      	bge.n	8006cf6 <__kernel_rem_pio2+0x5ce>
 8006c8e:	f1bb 0f00 	cmp.w	fp, #0
 8006c92:	d036      	beq.n	8006d02 <__kernel_rem_pio2+0x5da>
 8006c94:	4602      	mov	r2, r0
 8006c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c9a:	9c04      	ldr	r4, [sp, #16]
 8006c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006ca8:	f7f9 fbe4 	bl	8000474 <__aeabi_dsub>
 8006cac:	ae4a      	add	r6, sp, #296	; 0x128
 8006cae:	2401      	movs	r4, #1
 8006cb0:	42a5      	cmp	r5, r4
 8006cb2:	da29      	bge.n	8006d08 <__kernel_rem_pio2+0x5e0>
 8006cb4:	f1bb 0f00 	cmp.w	fp, #0
 8006cb8:	d002      	beq.n	8006cc0 <__kernel_rem_pio2+0x598>
 8006cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006cc6:	e7a1      	b.n	8006c0c <__kernel_rem_pio2+0x4e4>
 8006cc8:	9c05      	ldr	r4, [sp, #20]
 8006cca:	ab48      	add	r3, sp, #288	; 0x120
 8006ccc:	441c      	add	r4, r3
 8006cce:	2000      	movs	r0, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	da09      	bge.n	8006cea <__kernel_rem_pio2+0x5c2>
 8006cd6:	f1bb 0f00 	cmp.w	fp, #0
 8006cda:	d002      	beq.n	8006ce2 <__kernel_rem_pio2+0x5ba>
 8006cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	e9c3 0100 	strd	r0, r1, [r3]
 8006ce8:	e790      	b.n	8006c0c <__kernel_rem_pio2+0x4e4>
 8006cea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cee:	f7f9 fbc3 	bl	8000478 <__adddf3>
 8006cf2:	3d01      	subs	r5, #1
 8006cf4:	e7ed      	b.n	8006cd2 <__kernel_rem_pio2+0x5aa>
 8006cf6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006cfa:	f7f9 fbbd 	bl	8000478 <__adddf3>
 8006cfe:	3c01      	subs	r4, #1
 8006d00:	e7c3      	b.n	8006c8a <__kernel_rem_pio2+0x562>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	e7c8      	b.n	8006c9a <__kernel_rem_pio2+0x572>
 8006d08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006d0c:	f7f9 fbb4 	bl	8000478 <__adddf3>
 8006d10:	3401      	adds	r4, #1
 8006d12:	e7cd      	b.n	8006cb0 <__kernel_rem_pio2+0x588>
 8006d14:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4632      	mov	r2, r6
 8006d24:	463b      	mov	r3, r7
 8006d26:	4640      	mov	r0, r8
 8006d28:	4649      	mov	r1, r9
 8006d2a:	f7f9 fba5 	bl	8000478 <__adddf3>
 8006d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 fb9b 	bl	8000474 <__aeabi_dsub>
 8006d3e:	4632      	mov	r2, r6
 8006d40:	463b      	mov	r3, r7
 8006d42:	f7f9 fb99 	bl	8000478 <__adddf3>
 8006d46:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006d4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d4e:	ed8a 7b00 	vstr	d7, [sl]
 8006d52:	e770      	b.n	8006c36 <__kernel_rem_pio2+0x50e>
 8006d54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006d58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4632      	mov	r2, r6
 8006d60:	463b      	mov	r3, r7
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fb88 	bl	8000478 <__adddf3>
 8006d68:	e9cd 0100 	strd	r0, r1, [sp]
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 fb7e 	bl	8000474 <__aeabi_dsub>
 8006d78:	4632      	mov	r2, r6
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	f7f9 fb7c 	bl	8000478 <__adddf3>
 8006d80:	ed9d 7b00 	vldr	d7, [sp]
 8006d84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d88:	ed84 7b00 	vstr	d7, [r4]
 8006d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d90:	e757      	b.n	8006c42 <__kernel_rem_pio2+0x51a>
 8006d92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d96:	f7f9 fb6f 	bl	8000478 <__adddf3>
 8006d9a:	3d01      	subs	r5, #1
 8006d9c:	e75c      	b.n	8006c58 <__kernel_rem_pio2+0x530>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	601f      	str	r7, [r3, #0]
 8006da4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006da8:	605c      	str	r4, [r3, #4]
 8006daa:	609d      	str	r5, [r3, #8]
 8006dac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006db0:	60d3      	str	r3, [r2, #12]
 8006db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006db6:	6110      	str	r0, [r2, #16]
 8006db8:	6153      	str	r3, [r2, #20]
 8006dba:	e727      	b.n	8006c0c <__kernel_rem_pio2+0x4e4>
 8006dbc:	41700000 	.word	0x41700000
 8006dc0:	3e700000 	.word	0x3e700000
 8006dc4:	00000000 	.word	0x00000000

08006dc8 <scalbn>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	ec55 4b10 	vmov	r4, r5, d0
 8006dce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	b999      	cbnz	r1, 8006e00 <scalbn+0x38>
 8006dd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ddc:	4323      	orrs	r3, r4
 8006dde:	d03f      	beq.n	8006e60 <scalbn+0x98>
 8006de0:	4b35      	ldr	r3, [pc, #212]	; (8006eb8 <scalbn+0xf0>)
 8006de2:	4629      	mov	r1, r5
 8006de4:	ee10 0a10 	vmov	r0, s0
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7f9 fa15 	bl	8000218 <__aeabi_dmul>
 8006dee:	4b33      	ldr	r3, [pc, #204]	; (8006ebc <scalbn+0xf4>)
 8006df0:	429e      	cmp	r6, r3
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	da10      	bge.n	8006e1a <scalbn+0x52>
 8006df8:	a327      	add	r3, pc, #156	; (adr r3, 8006e98 <scalbn+0xd0>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	e01f      	b.n	8006e40 <scalbn+0x78>
 8006e00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e04:	4291      	cmp	r1, r2
 8006e06:	d10c      	bne.n	8006e22 <scalbn+0x5a>
 8006e08:	ee10 2a10 	vmov	r2, s0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7f9 fb32 	bl	8000478 <__adddf3>
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	e022      	b.n	8006e60 <scalbn+0x98>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006e20:	3936      	subs	r1, #54	; 0x36
 8006e22:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006e26:	4296      	cmp	r6, r2
 8006e28:	dd0d      	ble.n	8006e46 <scalbn+0x7e>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	a11c      	add	r1, pc, #112	; (adr r1, 8006ea0 <scalbn+0xd8>)
 8006e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e32:	da02      	bge.n	8006e3a <scalbn+0x72>
 8006e34:	a11c      	add	r1, pc, #112	; (adr r1, 8006ea8 <scalbn+0xe0>)
 8006e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3a:	a319      	add	r3, pc, #100	; (adr r3, 8006ea0 <scalbn+0xd8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 f9ea 	bl	8000218 <__aeabi_dmul>
 8006e44:	e7e6      	b.n	8006e14 <scalbn+0x4c>
 8006e46:	1872      	adds	r2, r6, r1
 8006e48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e4c:	428a      	cmp	r2, r1
 8006e4e:	dcec      	bgt.n	8006e2a <scalbn+0x62>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dd08      	ble.n	8006e66 <scalbn+0x9e>
 8006e54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e60:	ec45 4b10 	vmov	d0, r4, r5
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e6a:	da08      	bge.n	8006e7e <scalbn+0xb6>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	a10a      	add	r1, pc, #40	; (adr r1, 8006e98 <scalbn+0xd0>)
 8006e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e74:	dac0      	bge.n	8006df8 <scalbn+0x30>
 8006e76:	a10e      	add	r1, pc, #56	; (adr r1, 8006eb0 <scalbn+0xe8>)
 8006e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7c:	e7bc      	b.n	8006df8 <scalbn+0x30>
 8006e7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e82:	3236      	adds	r2, #54	; 0x36
 8006e84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <scalbn+0xf8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	e7d5      	b.n	8006e40 <scalbn+0x78>
 8006e94:	f3af 8000 	nop.w
 8006e98:	c2f8f359 	.word	0xc2f8f359
 8006e9c:	01a56e1f 	.word	0x01a56e1f
 8006ea0:	8800759c 	.word	0x8800759c
 8006ea4:	7e37e43c 	.word	0x7e37e43c
 8006ea8:	8800759c 	.word	0x8800759c
 8006eac:	fe37e43c 	.word	0xfe37e43c
 8006eb0:	c2f8f359 	.word	0xc2f8f359
 8006eb4:	81a56e1f 	.word	0x81a56e1f
 8006eb8:	43500000 	.word	0x43500000
 8006ebc:	ffff3cb0 	.word	0xffff3cb0
 8006ec0:	3c900000 	.word	0x3c900000
 8006ec4:	00000000 	.word	0x00000000

08006ec8 <floor>:
 8006ec8:	ec51 0b10 	vmov	r0, r1, d0
 8006ecc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006ed8:	2e13      	cmp	r6, #19
 8006eda:	ee10 5a10 	vmov	r5, s0
 8006ede:	ee10 8a10 	vmov	r8, s0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	dc31      	bgt.n	8006f4a <floor+0x82>
 8006ee6:	2e00      	cmp	r6, #0
 8006ee8:	da14      	bge.n	8006f14 <floor+0x4c>
 8006eea:	a333      	add	r3, pc, #204	; (adr r3, 8006fb8 <floor+0xf0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 fac2 	bl	8000478 <__adddf3>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f7f9 fcf2 	bl	80008e0 <__aeabi_dcmpgt>
 8006efc:	b138      	cbz	r0, 8006f0e <floor+0x46>
 8006efe:	2c00      	cmp	r4, #0
 8006f00:	da53      	bge.n	8006faa <floor+0xe2>
 8006f02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006f06:	4325      	orrs	r5, r4
 8006f08:	d052      	beq.n	8006fb0 <floor+0xe8>
 8006f0a:	4c2d      	ldr	r4, [pc, #180]	; (8006fc0 <floor+0xf8>)
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	e024      	b.n	8006f5e <floor+0x96>
 8006f14:	4f2b      	ldr	r7, [pc, #172]	; (8006fc4 <floor+0xfc>)
 8006f16:	4137      	asrs	r7, r6
 8006f18:	ea01 0307 	and.w	r3, r1, r7
 8006f1c:	4303      	orrs	r3, r0
 8006f1e:	d01e      	beq.n	8006f5e <floor+0x96>
 8006f20:	a325      	add	r3, pc, #148	; (adr r3, 8006fb8 <floor+0xf0>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f7f9 faa7 	bl	8000478 <__adddf3>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f7f9 fcd7 	bl	80008e0 <__aeabi_dcmpgt>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0eb      	beq.n	8006f0e <floor+0x46>
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	bfbe      	ittt	lt
 8006f3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f3e:	4133      	asrlt	r3, r6
 8006f40:	18e4      	addlt	r4, r4, r3
 8006f42:	ea24 0407 	bic.w	r4, r4, r7
 8006f46:	2500      	movs	r5, #0
 8006f48:	e7e1      	b.n	8006f0e <floor+0x46>
 8006f4a:	2e33      	cmp	r6, #51	; 0x33
 8006f4c:	dd0b      	ble.n	8006f66 <floor+0x9e>
 8006f4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f52:	d104      	bne.n	8006f5e <floor+0x96>
 8006f54:	ee10 2a10 	vmov	r2, s0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	f7f9 fa8d 	bl	8000478 <__adddf3>
 8006f5e:	ec41 0b10 	vmov	d0, r0, r1
 8006f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8006f6e:	40df      	lsrs	r7, r3
 8006f70:	4238      	tst	r0, r7
 8006f72:	d0f4      	beq.n	8006f5e <floor+0x96>
 8006f74:	a310      	add	r3, pc, #64	; (adr r3, 8006fb8 <floor+0xf0>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 fa7d 	bl	8000478 <__adddf3>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	f7f9 fcad 	bl	80008e0 <__aeabi_dcmpgt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d0c1      	beq.n	8006f0e <floor+0x46>
 8006f8a:	2c00      	cmp	r4, #0
 8006f8c:	da0a      	bge.n	8006fa4 <floor+0xdc>
 8006f8e:	2e14      	cmp	r6, #20
 8006f90:	d101      	bne.n	8006f96 <floor+0xce>
 8006f92:	3401      	adds	r4, #1
 8006f94:	e006      	b.n	8006fa4 <floor+0xdc>
 8006f96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	40b3      	lsls	r3, r6
 8006f9e:	441d      	add	r5, r3
 8006fa0:	45a8      	cmp	r8, r5
 8006fa2:	d8f6      	bhi.n	8006f92 <floor+0xca>
 8006fa4:	ea25 0507 	bic.w	r5, r5, r7
 8006fa8:	e7b1      	b.n	8006f0e <floor+0x46>
 8006faa:	2500      	movs	r5, #0
 8006fac:	462c      	mov	r4, r5
 8006fae:	e7ae      	b.n	8006f0e <floor+0x46>
 8006fb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006fb4:	e7ab      	b.n	8006f0e <floor+0x46>
 8006fb6:	bf00      	nop
 8006fb8:	8800759c 	.word	0x8800759c
 8006fbc:	7e37e43c 	.word	0x7e37e43c
 8006fc0:	bff00000 	.word	0xbff00000
 8006fc4:	000fffff 	.word	0x000fffff

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
