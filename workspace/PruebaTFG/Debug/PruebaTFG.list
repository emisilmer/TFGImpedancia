
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004884  08004884  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08004884  08004884  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004884  08004884  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800488c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000050  080048dc  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080048dc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012751  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002836  00000000  00000000  00032814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00035050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e79  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275a0  00000000  00000000  00037199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014049  00000000  00000000  0005e739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b233  00000000  00000000  00072782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051dc  00000000  00000000  0017d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00182b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800485c 	.word	0x0800485c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800485c 	.word	0x0800485c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fbda 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f827 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f9b9 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000836:	f000 f985 	bl	8000b44 <MX_DMA_Init>
  MX_DAC1_Init();
 800083a:	f000 f8dd 	bl	80009f8 <MX_DAC1_Init>
  MX_TIM7_Init();
 800083e:	f000 f94b 	bl	8000ad8 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000842:	f000 f85f 	bl	8000904 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000846:	f000 f911 	bl	8000a6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1,(uint32_t*)lut,lut_size,DAC_ALIGN_12B_R);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <main+0x48>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <main+0x4c>)
 8000854:	2100      	movs	r1, #0
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <main+0x50>)
 8000858:	f001 fe92 	bl	8002580 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim7);
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <main+0x54>)
 800085e:	f003 fe1b 	bl	8004498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <main+0x58>)
 8000864:	f003 fe18 	bl	8004498 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x44>
 800086a:	bf00      	nop
 800086c:	20000040 	.word	0x20000040
 8000870:	20000000 	.word	0x20000000
 8000874:	200000d8 	.word	0x200000d8
 8000878:	20000138 	.word	0x20000138
 800087c:	200000ec 	.word	0x200000ec

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2238      	movs	r2, #56	; 0x38
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 ffb8 	bl	8004804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f002 fda5 	bl	80033f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fe3b 	bl	800353c <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008cc:	f000 f984 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d4:	2301      	movs	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f93e 	bl	8003b6c <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008f6:	f000 f96f 	bl	8000bd8 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2220      	movs	r2, #32
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 ff71 	bl	8004804 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000924:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000928:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_ADC1_Init+0xe8>)
 800092c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_ADC1_Init+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_ADC1_Init+0xe8>)
 800094c:	2204      	movs	r2, #4
 800094e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC1_Init+0xe8>)
 800095e:	2201      	movs	r2, #1
 8000960:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_ADC1_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4817      	ldr	r0, [pc, #92]	; (80009ec <MX_ADC1_Init+0xe8>)
 800098e:	f000 fd95 	bl	80014bc <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000998:	f000 f91e 	bl	8000bd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_ADC1_Init+0xe8>)
 80009a8:	f001 fbb0 	bl	800210c <HAL_ADCEx_MultiModeConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009b2:	f000 f911 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_ADC1_Init+0xec>)
 80009b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ba:	2306      	movs	r3, #6
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_ADC1_Init+0xf0>)
 80009c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC1_Init+0xe8>)
 80009d4:	f000 ff34 	bl	8001840 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009de:	f000 f8fb 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000006c 	.word	0x2000006c
 80009f0:	04300002 	.word	0x04300002
 80009f4:	407f0000 	.word	0x407f0000

080009f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2230      	movs	r2, #48	; 0x30
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fefd 	bl	8004804 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_DAC1_Init+0x6c>)
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_DAC1_Init+0x70>)
 8000a0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_DAC1_Init+0x6c>)
 8000a12:	f001 fd92 	bl	800253a <HAL_DAC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a1c:	f000 f8dc 	bl	8000bd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a20:	2302      	movs	r3, #2
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_DAC1_Init+0x6c>)
 8000a4c:	f001 feac 	bl	80027a8 <HAL_DAC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a56:	f000 f8bf 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d8 	.word	0x200000d8
 8000a68:	50000800 	.word	0x50000800

08000a6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_TIM6_Init+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000a9c:	f003 fca4 	bl	80043e8 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f000 f897 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_TIM6_Init+0x64>)
 8000ab8:	f003 fe0e 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ac2:	f000 f889 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000ec 	.word	0x200000ec
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_TIM7_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b08:	f003 fc6e 	bl	80043e8 <HAL_TIM_Base_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b12:	f000 f861 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_TIM7_Init+0x64>)
 8000b24:	f003 fdd8 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b2e:	f000 f853 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000138 	.word	0x20000138
 8000b40:	40001400 	.word	0x40001400

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6493      	str	r3, [r2, #72]	; 0x48
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	200d      	movs	r0, #13
 8000b80:	f001 fca7 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b84:	200d      	movs	r0, #13
 8000b86:	f001 fcbe 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200e      	movs	r0, #14
 8000b90:	f001 fc9f 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b94:	200e      	movs	r0, #14
 8000b96:	f001 fcb6 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_GPIO_Init+0x2c>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0x2c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_GPIO_Init+0x2c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	; 0x78
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2254      	movs	r2, #84	; 0x54
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fdd9 	bl	8004804 <memset>
  if(hadc->Instance==ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5a:	d134      	bne.n	8000cc6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 f96d 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c78:	f7ff ffae 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_ADC_MspInit+0xa4>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cac:	2303      	movs	r3, #3
 8000cae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f002 fa15 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3778      	adds	r7, #120	; 0x78
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_DAC_MspInit+0x74>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d124      	bne.n	8000d40 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_DAC_MspInit+0x78>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d26:	2310      	movs	r3, #16
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f002 f9d8 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50000800 	.word	0x50000800
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <HAL_TIM_Base_MspInit+0x104>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d137      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a3c      	ldr	r2, [pc, #240]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel3;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d7c:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <HAL_TIM_Base_MspInit+0x110>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d98:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da6:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8000db4:	4829      	ldr	r0, [pc, #164]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000db6:	f001 ff29 	bl	8002c0c <HAL_DMA_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000dc0:	f7ff ff0a 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000dc8:	621a      	str	r2, [r3, #32]
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_TIM_Base_MspInit+0x10c>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000dd0:	e03b      	b.n	8000e4a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM7)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_TIM_Base_MspInit+0x114>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d136      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000de2:	f043 0320 	orr.w	r3, r3, #32
 8000de6:	6593      	str	r3, [r2, #88]	; 0x58
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_TIM_Base_MspInit+0x108>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Channel4;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000df6:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_TIM_Base_MspInit+0x11c>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Request = DMA_REQUEST_TIM7_UP;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8000e2e:	480e      	ldr	r0, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e30:	f001 feec 	bl	8002c0c <HAL_DMA_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8000e3a:	f7ff fecd 	bl	8000bd8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e42:	621a      	str	r2, [r3, #32]
 8000e44:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0x118>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	20000184 	.word	0x20000184
 8000e60:	40020030 	.word	0x40020030
 8000e64:	40001400 	.word	0x40001400
 8000e68:	200001e4 	.word	0x200001e4
 8000e6c:	40020044 	.word	0x40020044

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8e4 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA1_Channel3_IRQHandler+0x10>)
 8000eca:	f001 ffc2 	bl	8002e52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000184 	.word	0x20000184

08000ed8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	extern DAC_HandleTypeDef hdac1;
		extern float lut[];
		static uint32_t indice = 0;

		uint32_t valorEntero = ((lut[indice] + 1.0) * 2047.5);
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <DMA1_Channel4_IRQHandler+0x80>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <DMA1_Channel4_IRQHandler+0x84>)
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc22 	bl	8000734 <__aeabi_f2d>
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <DMA1_Channel4_IRQHandler+0x88>)
 8000ef6:	f7ff fabf 	bl	8000478 <__adddf3>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	a313      	add	r3, pc, #76	; (adr r3, 8000f50 <DMA1_Channel4_IRQHandler+0x78>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff f986 	bl	8000218 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fc66 	bl	80007e4 <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	607b      	str	r3, [r7, #4]
		HAL_DAC_SetValue(&hdac1,DAC1_CHANNEL_1,DAC_ALIGN_12B_R,valorEntero);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	4810      	ldr	r0, [pc, #64]	; (8000f64 <DMA1_Channel4_IRQHandler+0x8c>)
 8000f24:	f001 fbfa 	bl	800271c <HAL_DAC_SetValue>
		indice++;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <DMA1_Channel4_IRQHandler+0x80>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <DMA1_Channel4_IRQHandler+0x80>)
 8000f30:	6013      	str	r3, [r2, #0]
		if(indice >= 16){
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <DMA1_Channel4_IRQHandler+0x80>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	d902      	bls.n	8000f40 <DMA1_Channel4_IRQHandler+0x68>
				indice = 0;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <DMA1_Channel4_IRQHandler+0x80>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
			}

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <DMA1_Channel4_IRQHandler+0x90>)
 8000f42:	f001 ff86 	bl	8002e52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	00000000 	.word	0x00000000
 8000f54:	409ffe00 	.word	0x409ffe00
 8000f58:	20000244 	.word	0x20000244
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	3ff00000 	.word	0x3ff00000
 8000f64:	200000d8 	.word	0x200000d8
 8000f68:	200001e4 	.word	0x200001e4

08000f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 fc29 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fc2f 	bl	8000824 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000fd4:	0800488c 	.word	0x0800488c
  ldr r2, =_sbss
 8000fd8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000fdc:	2000024c 	.word	0x2000024c

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f001 fa65 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fdee 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x68>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d022      	beq.n	800106e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_InitTick+0x6c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001034:	fbb1 f3f3 	udiv	r3, r1, r3
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fa70 	bl	8002522 <HAL_SYSTICK_Config>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d809      	bhi.n	8001062 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f001 fa3c 	bl	80024d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_InitTick+0x70>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e007      	b.n	8001072 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e004      	b.n	8001072 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000004c 	.word	0x2000004c
 8001080:	20000044 	.word	0x20000044
 8001084:	20000048 	.word	0x20000048

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x1c>)
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000248 	.word	0x20000248
 80010a8:	2000004c 	.word	0x2000004c

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000248 	.word	0x20000248

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d004      	beq.n	80010e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_Delay+0x40>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e8:	bf00      	nop
 80010ea:	f7ff ffdf 	bl	80010ac <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d8f7      	bhi.n	80010ea <HAL_Delay+0x26>
  {
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000004c 	.word	0x2000004c

08001108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <LL_ADC_SetOffset+0x44>)
 8001192:	4013      	ands	r3, r2
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	4313      	orrs	r3, r2
 80011a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011a8:	bf00      	nop
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	03fff000 	.word	0x03fff000

080011b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3360      	adds	r3, #96	; 0x60
 80011c6:	461a      	mov	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3360      	adds	r3, #96	; 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800121a:	b480      	push	{r7}
 800121c:	b087      	sub	sp, #28
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3360      	adds	r3, #96	; 0x60
 800122a:	461a      	mov	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3360      	adds	r3, #96	; 0x60
 8001260:	461a      	mov	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	431a      	orrs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	615a      	str	r2, [r3, #20]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	461a      	mov	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	211f      	movs	r1, #31
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0e9b      	lsrs	r3, r3, #26
 80012e4:	f003 011f 	and.w	r1, r3, #31
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3314      	adds	r3, #20
 8001314:	461a      	mov	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0e5b      	lsrs	r3, r3, #25
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0d1b      	lsrs	r3, r3, #20
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2107      	movs	r1, #7
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	401a      	ands	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	0d1b      	lsrs	r3, r3, #20
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d10a      	bne.n	8001386 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137c:	431a      	orrs	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001384:	e00a      	b.n	800139c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001392:	43db      	mvns	r3, r3
 8001394:	401a      	ands	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	407f0000 	.word	0x407f0000

080013ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6093      	str	r3, [r2, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <LL_ADC_IsEnabled+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_IsEnabled+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b04      	cmp	r3, #4
 8001480:	d101      	bne.n	8001486 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d101      	bne.n	80014ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1af      	b.n	8001836 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fba1 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff67 	bl	80013d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff4d 	bl	80013ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff82 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d115      	bne.n	800154e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff66 	bl	80013f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800152c:	4b9f      	ldr	r3, [pc, #636]	; (80017ac <HAL_ADC_Init+0x2f0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	4a9f      	ldr	r2, [pc, #636]	; (80017b0 <HAL_ADC_Init+0x2f4>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001540:	e002      	b.n	8001548 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff64 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff75 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001584:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 8148 	bne.w	8001824 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8144 	bne.w	8001824 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff49 	bl	8001448 <LL_ADC_IsEnabled>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d141      	bne.n	8001640 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c4:	d004      	beq.n	80015d0 <HAL_ADC_Init+0x114>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_ADC_Init+0x2f8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d10f      	bne.n	80015f0 <HAL_ADC_Init+0x134>
 80015d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015d4:	f7ff ff38 	bl	8001448 <LL_ADC_IsEnabled>
 80015d8:	4604      	mov	r4, r0
 80015da:	4876      	ldr	r0, [pc, #472]	; (80017b4 <HAL_ADC_Init+0x2f8>)
 80015dc:	f7ff ff34 	bl	8001448 <LL_ADC_IsEnabled>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4323      	orrs	r3, r4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e012      	b.n	8001616 <HAL_ADC_Init+0x15a>
 80015f0:	4871      	ldr	r0, [pc, #452]	; (80017b8 <HAL_ADC_Init+0x2fc>)
 80015f2:	f7ff ff29 	bl	8001448 <LL_ADC_IsEnabled>
 80015f6:	4604      	mov	r4, r0
 80015f8:	4870      	ldr	r0, [pc, #448]	; (80017bc <HAL_ADC_Init+0x300>)
 80015fa:	f7ff ff25 	bl	8001448 <LL_ADC_IsEnabled>
 80015fe:	4603      	mov	r3, r0
 8001600:	431c      	orrs	r4, r3
 8001602:	486f      	ldr	r0, [pc, #444]	; (80017c0 <HAL_ADC_Init+0x304>)
 8001604:	f7ff ff20 	bl	8001448 <LL_ADC_IsEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	4323      	orrs	r3, r4
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001622:	d004      	beq.n	800162e <HAL_ADC_Init+0x172>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a62      	ldr	r2, [pc, #392]	; (80017b4 <HAL_ADC_Init+0x2f8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Init+0x176>
 800162e:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_ADC_Init+0x308>)
 8001630:	e000      	b.n	8001634 <HAL_ADC_Init+0x178>
 8001632:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_ADC_Init+0x30c>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fd64 	bl	8001108 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7f5b      	ldrb	r3, [r3, #29]
 8001644:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001650:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001656:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	3b01      	subs	r3, #1
 8001674:	045b      	lsls	r3, r3, #17
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_ADC_Init+0x310>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fed1 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 80016cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fede 	bl	8001494 <LL_ADC_INJ_IsConversionOngoing>
 80016d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d17f      	bne.n	80017e0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d17c      	bne.n	80017e0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001702:	f023 0302 	bic.w	r3, r3, #2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	430b      	orrs	r3, r1
 800170e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001726:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001730:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6911      	ldr	r1, [r2, #16]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001746:	e013      	b.n	8001770 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001756:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001768:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800176c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001776:	2b01      	cmp	r3, #1
 8001778:	d12a      	bne.n	80017d0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800179c:	430a      	orrs	r2, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	e019      	b.n	80017e0 <HAL_ADC_Init+0x324>
 80017ac:	20000044 	.word	0x20000044
 80017b0:	053e2d63 	.word	0x053e2d63
 80017b4:	50000100 	.word	0x50000100
 80017b8:	50000400 	.word	0x50000400
 80017bc:	50000500 	.word	0x50000500
 80017c0:	50000600 	.word	0x50000600
 80017c4:	50000300 	.word	0x50000300
 80017c8:	50000700 	.word	0x50000700
 80017cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10c      	bne.n	8001802 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f023 010f 	bic.w	r1, r3, #15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	1e5a      	subs	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001800:	e007      	b.n	8001812 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 020f 	bic.w	r2, r2, #15
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
 8001822:	e007      	b.n	8001834 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001834:	7ffb      	ldrb	r3, [r7, #31]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop

08001840 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b6      	sub	sp, #216	; 0xd8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x24>
 800185e:	2302      	movs	r3, #2
 8001860:	f000 bc13 	b.w	800208a <HAL_ADC_ConfigChannel+0x84a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fdfc 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 83f3 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff fd0e 	bl	80012ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fdea 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 800189a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fdf6 	bl	8001494 <LL_ADC_INJ_IsConversionOngoing>
 80018a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f040 81d9 	bne.w	8001c68 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 81d4 	bne.w	8001c68 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018c8:	d10f      	bne.n	80018ea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff fd15 	bl	8001304 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fccf 	bl	8001286 <LL_ADC_SetSamplingTimeCommonConfig>
 80018e8:	e00e      	b.n	8001908 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f7ff fd04 	bl	8001304 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fcbf 	bl	8001286 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d022      	beq.n	8001970 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800193a:	f7ff fc19 	bl	8001170 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6919      	ldr	r1, [r3, #16]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	461a      	mov	r2, r3
 800194c:	f7ff fc65 	bl	800121a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6919      	ldr	r1, [r3, #16]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	7f1b      	ldrb	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d102      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x126>
 8001960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001964:	e000      	b.n	8001968 <HAL_ADC_ConfigChannel+0x128>
 8001966:	2300      	movs	r3, #0
 8001968:	461a      	mov	r2, r3
 800196a:	f7ff fc71 	bl	8001250 <LL_ADC_SetOffsetSaturation>
 800196e:	e17b      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc1e 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <HAL_ADC_ConfigChannel+0x15c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fc13 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	0e9b      	lsrs	r3, r3, #26
 8001996:	f003 021f 	and.w	r2, r3, #31
 800199a:	e01e      	b.n	80019da <HAL_ADC_ConfigChannel+0x19a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc08 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80019ca:	2320      	movs	r3, #32
 80019cc:	e004      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80019ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x1b2>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	e018      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1e4>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001a16:	2320      	movs	r3, #32
 8001a18:	e004      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fbd7 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fbbb 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x222>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fbb0 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	0e9b      	lsrs	r3, r3, #26
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	e01e      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x260>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fba5 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a90:	2320      	movs	r3, #32
 8001a92:	e004      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x278>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	e018      	b.n	8001aea <HAL_ADC_ConfigChannel+0x2aa>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001adc:	2320      	movs	r3, #32
 8001ade:	e004      	b.n	8001aea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d106      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fb74 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fb58 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x2e8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fb4d 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	e01e      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x326>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fb42 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e004      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x33e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	e016      	b.n	8001bac <HAL_ADC_ConfigChannel+0x36c>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e004      	b.n	8001bac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d106      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb13 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff faf7 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x3aa>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2103      	movs	r1, #3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff faec 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	e017      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x3da>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2103      	movs	r1, #3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fae1 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c04:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	e003      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x3f2>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	e011      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x416>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d106      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2103      	movs	r1, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fabe 	bl	80011e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fbeb 	bl	8001448 <LL_ADC_IsEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 813d 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f7ff fb68 	bl	800135c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4aa2      	ldr	r2, [pc, #648]	; (8001f1c <HAL_ADC_ConfigChannel+0x6dc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 812e 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x480>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0e9b      	lsrs	r3, r3, #26
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e019      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x4b4>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e003      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	bf94      	ite	ls
 8001cee:	2301      	movls	r3, #1
 8001cf0:	2300      	movhi	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d079      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x4d4>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d12:	e015      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x500>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e003      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	069b      	lsls	r3, r3, #26
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x520>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	e017      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x550>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x576>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	3301      	adds	r3, #1
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	051b      	lsls	r3, r3, #20
 8001db4:	e018      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x5a8>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de8:	430b      	orrs	r3, r1
 8001dea:	e07e      	b.n	8001eea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x5c8>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	3301      	adds	r3, #1
 8001e00:	069b      	lsls	r3, r3, #26
 8001e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e06:	e015      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x5f4>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e003      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	069b      	lsls	r3, r3, #26
 8001e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x614>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	e017      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x644>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	61fb      	str	r3, [r7, #28]
  return result;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e003      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	ea42 0103 	orr.w	r1, r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x670>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b1e      	subs	r3, #30
 8001ea8:	051b      	lsls	r3, r3, #20
 8001eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eae:	e01b      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x6a8>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	613b      	str	r3, [r7, #16]
  return result;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e003      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	051b      	lsls	r3, r3, #20
 8001ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6892      	ldr	r2, [r2, #8]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7ff fa08 	bl	8001304 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_ADC_ConfigChannel+0x6e0>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80be 	beq.w	800207e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x6d6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x6ec>
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_ADC_ConfigChannel+0x6e8>)
 8001f18:	e009      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x6ee>
 8001f1a:	bf00      	nop
 8001f1c:	407f0000 	.word	0x407f0000
 8001f20:	80080000 	.word	0x80080000
 8001f24:	50000100 	.word	0x50000100
 8001f28:	50000300 	.word	0x50000300
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_ADC_ConfigChannel+0x854>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f910 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 8001f34:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_ADC_ConfigChannel+0x858>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0x70c>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a55      	ldr	r2, [pc, #340]	; (800209c <HAL_ADC_ConfigChannel+0x85c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d13a      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d134      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f60:	d005      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x72e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_ADC_ConfigChannel+0x860>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	f040 8085 	bne.w	8002078 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x742>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_ADC_ConfigChannel+0x864>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x746>
 8001f82:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_ADC_ConfigChannel+0x868>)
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x748>
 8001f86:	4a43      	ldr	r2, [pc, #268]	; (8002094 <HAL_ADC_ConfigChannel+0x854>)
 8001f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f7ff f8cb 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_ADC_ConfigChannel+0x86c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a44      	ldr	r2, [pc, #272]	; (80020b0 <HAL_ADC_ConfigChannel+0x870>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fb2:	e002      	b.n	8001fba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc0:	e05a      	b.n	8002078 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <HAL_ADC_ConfigChannel+0x874>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d125      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x7d8>
 8001fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11f      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <HAL_ADC_ConfigChannel+0x864>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d104      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x7ac>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <HAL_ADC_ConfigChannel+0x878>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d047      	beq.n	800207c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_ConfigChannel+0x7c0>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_ADC_ConfigChannel+0x864>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x7c4>
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <HAL_ADC_ConfigChannel+0x868>)
 8002002:	e000      	b.n	8002006 <HAL_ADC_ConfigChannel+0x7c6>
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_ADC_ConfigChannel+0x854>)
 8002006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7ff f88c 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002016:	e031      	b.n	800207c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_ADC_ConfigChannel+0x87c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12d      	bne.n	800207e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d127      	bne.n	800207e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_ADC_ConfigChannel+0x864>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002040:	d004      	beq.n	800204c <HAL_ADC_ConfigChannel+0x80c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_ADC_ConfigChannel+0x864>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x810>
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_ADC_ConfigChannel+0x868>)
 800204e:	e000      	b.n	8002052 <HAL_ADC_ConfigChannel+0x812>
 8002050:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_ADC_ConfigChannel+0x854>)
 8002052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7ff f866 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
 8002062:	e00c      	b.n	800207e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002076:	e002      	b.n	800207e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800207c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002086:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800208a:	4618      	mov	r0, r3
 800208c:	37d8      	adds	r7, #216	; 0xd8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	50000700 	.word	0x50000700
 8002098:	c3210000 	.word	0xc3210000
 800209c:	90c00010 	.word	0x90c00010
 80020a0:	50000600 	.word	0x50000600
 80020a4:	50000100 	.word	0x50000100
 80020a8:	50000300 	.word	0x50000300
 80020ac:	20000044 	.word	0x20000044
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	c7520000 	.word	0xc7520000
 80020b8:	50000500 	.word	0x50000500
 80020bc:	cb840000 	.word	0xcb840000

080020c0 <LL_ADC_IsEnabled>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <LL_ADC_IsEnabled+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_ADC_IsEnabled+0x1a>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d101      	bne.n	80020fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b0a1      	sub	sp, #132	; 0x84
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002126:	2302      	movs	r3, #2
 8002128:	e0e7      	b.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002132:	2300      	movs	r3, #0
 8002134:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002136:	2300      	movs	r3, #0
 8002138:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002142:	d102      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002144:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	e009      	b.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002154:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e001      	b.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0be      	b.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffb1 	bl	80020e6 <LL_ADC_REG_IsConversionOngoing>
 8002184:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffab 	bl	80020e6 <LL_ADC_REG_IsConversionOngoing>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80a0 	bne.w	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 809c 	bne.w	80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a8:	d004      	beq.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80021b6:	e000      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80021ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04b      	beq.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d6:	035b      	lsls	r3, r3, #13
 80021d8:	430b      	orrs	r3, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d004      	beq.n	80021f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a45      	ldr	r2, [pc, #276]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10f      	bne.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80021f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021f8:	f7ff ff62 	bl	80020c0 <LL_ADC_IsEnabled>
 80021fc:	4604      	mov	r4, r0
 80021fe:	4841      	ldr	r0, [pc, #260]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002200:	f7ff ff5e 	bl	80020c0 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	4323      	orrs	r3, r4
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e012      	b.n	800223a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002214:	483c      	ldr	r0, [pc, #240]	; (8002308 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002216:	f7ff ff53 	bl	80020c0 <LL_ADC_IsEnabled>
 800221a:	4604      	mov	r4, r0
 800221c:	483b      	ldr	r0, [pc, #236]	; (800230c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800221e:	f7ff ff4f 	bl	80020c0 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	431c      	orrs	r4, r3
 8002226:	483c      	ldr	r0, [pc, #240]	; (8002318 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002228:	f7ff ff4a 	bl	80020c0 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	4323      	orrs	r3, r4
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d056      	beq.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800223e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002246:	f023 030f 	bic.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6892      	ldr	r2, [r2, #8]
 8002252:	430a      	orrs	r2, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002258:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800225a:	e047      	b.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800225c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002266:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002270:	d004      	beq.n	800227c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10f      	bne.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800227c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002280:	f7ff ff1e 	bl	80020c0 <LL_ADC_IsEnabled>
 8002284:	4604      	mov	r4, r0
 8002286:	481f      	ldr	r0, [pc, #124]	; (8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002288:	f7ff ff1a 	bl	80020c0 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	4323      	orrs	r3, r4
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800229c:	481a      	ldr	r0, [pc, #104]	; (8002308 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800229e:	f7ff ff0f 	bl	80020c0 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	4819      	ldr	r0, [pc, #100]	; (800230c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80022a6:	f7ff ff0b 	bl	80020c0 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	431c      	orrs	r4, r3
 80022ae:	481a      	ldr	r0, [pc, #104]	; (8002318 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80022b0:	f7ff ff06 	bl	80020c0 <LL_ADC_IsEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4323      	orrs	r3, r4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ce:	f023 030f 	bic.w	r3, r3, #15
 80022d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d6:	e009      	b.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022ea:	e000      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3784      	adds	r7, #132	; 0x84
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	50000100 	.word	0x50000100
 8002308:	50000400 	.word	0x50000400
 800230c:	50000500 	.word	0x50000500
 8002310:	50000300 	.word	0x50000300
 8002314:	50000700 	.word	0x50000700
 8002318:	50000600 	.word	0x50000600

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <__NVIC_EnableIRQ+0x38>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff29 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff40 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff90 	bl	8002410 <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5f 	bl	80023bc <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff33 	bl	8002380 <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa4 	bl	8002478 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e014      	b.n	8002576 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fbb9 	bl	8000cd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	795b      	ldrb	r3, [r3, #5]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_DAC_Start_DMA+0x1e>
 800259a:	2302      	movs	r3, #2
 800259c:	e0ae      	b.n	80026fc <HAL_DAC_Start_DMA+0x17c>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d12f      	bne.n	8002610 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_DAC_Start_DMA+0x184>)
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_DAC_Start_DMA+0x188>)
 80025be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_DAC_Start_DMA+0x18c>)
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d013      	beq.n	8002606 <HAL_DAC_Start_DMA+0x86>
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d845      	bhi.n	8002670 <HAL_DAC_Start_DMA+0xf0>
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DAC_Start_DMA+0x72>
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d005      	beq.n	80025fc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80025f0:	e03e      	b.n	8002670 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3308      	adds	r3, #8
 80025f8:	613b      	str	r3, [r7, #16]
        break;
 80025fa:	e03c      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	613b      	str	r3, [r7, #16]
        break;
 8002604:	e037      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3310      	adds	r3, #16
 800260c:	613b      	str	r3, [r7, #16]
        break;
 800260e:	e032      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_DAC_Start_DMA+0x190>)
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <HAL_DAC_Start_DMA+0x194>)
 800261e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a3c      	ldr	r2, [pc, #240]	; (8002718 <HAL_DAC_Start_DMA+0x198>)
 8002626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002636:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d013      	beq.n	8002666 <HAL_DAC_Start_DMA+0xe6>
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d817      	bhi.n	8002674 <HAL_DAC_Start_DMA+0xf4>
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DAC_Start_DMA+0xd2>
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d005      	beq.n	800265c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002650:	e010      	b.n	8002674 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	613b      	str	r3, [r7, #16]
        break;
 800265a:	e00c      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3318      	adds	r3, #24
 8002662:	613b      	str	r3, [r7, #16]
        break;
 8002664:	e007      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	331c      	adds	r3, #28
 800266c:	613b      	str	r3, [r7, #16]
        break;
 800266e:	e002      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002670:	bf00      	nop
 8002672:	e000      	b.n	8002676 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002674:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800268a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6898      	ldr	r0, [r3, #8]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	f000 fb61 	bl	8002d5c <HAL_DMA_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	75fb      	strb	r3, [r7, #23]
 800269e:	e010      	b.n	80026c2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68d8      	ldr	r0, [r3, #12]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	f000 fb4f 	bl	8002d5c <HAL_DMA_Start_IT>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2201      	movs	r2, #1
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7fe fcec 	bl	80010c4 <HAL_Delay>
 80026ec:	e005      	b.n	80026fa <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08002af9 	.word	0x08002af9
 8002708:	08002b1b 	.word	0x08002b1b
 800270c:	08002b37 	.word	0x08002b37
 8002710:	08002ba1 	.word	0x08002ba1
 8002714:	08002bc3 	.word	0x08002bc3
 8002718:	08002bdf 	.word	0x08002bdf

0800271c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	3308      	adds	r3, #8
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e004      	b.n	8002756 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	3314      	adds	r3, #20
 8002754:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	795b      	ldrb	r3, [r3, #5]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_DAC_ConfigChannel+0x18>
 80027bc:	2302      	movs	r3, #2
 80027be:	e192      	b.n	8002ae6 <HAL_DAC_ConfigChannel+0x33e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2202      	movs	r2, #2
 80027ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d174      	bne.n	80028be <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fc6a 	bl	80010ac <HAL_GetTick>
 80027d8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d134      	bne.n	800284a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027e0:	e011      	b.n	8002806 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027e2:	f7fe fc63 	bl	80010ac <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d90a      	bls.n	8002806 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f043 0208 	orr.w	r2, r3, #8
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2203      	movs	r2, #3
 8002800:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e16f      	b.n	8002ae6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e6      	bne.n	80027e2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f7fe fc55 	bl	80010c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
 8002824:	e01e      	b.n	8002864 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002826:	f7fe fc41 	bl	80010ac <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d90a      	bls.n	800284a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f043 0208 	orr.w	r2, r3, #8
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2203      	movs	r2, #3
 8002844:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e14d      	b.n	8002ae6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	dbe8      	blt.n	8002826 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002854:	2001      	movs	r0, #1
 8002856:	f7fe fc35 	bl	80010c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	ea02 0103 	and.w	r1, r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	21ff      	movs	r1, #255	; 0xff
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	ea02 0103 	and.w	r1, r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d11d      	bne.n	8002902 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	221f      	movs	r2, #31
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	4013      	ands	r3, r2
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	4313      	orrs	r3, r2
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2207      	movs	r2, #7
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	4013      	ands	r3, r2
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	e00f      	b.n	800294c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d102      	bne.n	800293a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002934:	2301      	movs	r3, #1
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	e008      	b.n	800294c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002942:	2301      	movs	r3, #1
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	e001      	b.n	800294c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	6a3a      	ldr	r2, [r7, #32]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4013      	ands	r3, r2
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	791b      	ldrb	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_DAC_ConfigChannel+0x1d8>
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	e000      	b.n	8002982 <HAL_DAC_ConfigChannel+0x1da>
 8002980:	2300      	movs	r3, #0
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	4013      	ands	r3, r2
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	795b      	ldrb	r3, [r3, #5]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_DAC_ConfigChannel+0x204>
 80029a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029aa:	e000      	b.n	80029ae <HAL_DAC_ConfigChannel+0x206>
 80029ac:	2300      	movs	r3, #0
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d114      	bne.n	80029ee <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80029c4:	f001 fa70 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 80029c8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_DAC_ConfigChannel+0x348>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d904      	bls.n	80029dc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e00f      	b.n	80029fc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_DAC_ConfigChannel+0x34c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d90a      	bls.n	80029fa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e006      	b.n	80029fc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4313      	orrs	r3, r2
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e000      	b.n	80029fc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80029fa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	4013      	ands	r3, r2
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	4313      	orrs	r3, r2
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	22c0      	movs	r2, #192	; 0xc0
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	ea02 0103 	and.w	r1, r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	09896800 	.word	0x09896800
 8002af4:	04c4b400 	.word	0x04c4b400

08002af8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff fe30 	bl	800276c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	711a      	strb	r2, [r3, #4]
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fe29 	bl	8002780 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fe1f 	bl	8002794 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	711a      	strb	r2, [r3, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff ffd8 	bl	8002b64 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	711a      	strb	r2, [r3, #4]
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff ffd1 	bl	8002b78 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f043 0204 	orr.w	r2, r3, #4
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ffc7 	bl	8002b8c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	711a      	strb	r2, [r3, #4]
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08d      	b.n	8002d3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_DMA_Init+0x138>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d80f      	bhi.n	8002c4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_DMA_Init+0x13c>)
 8002c32:	4413      	add	r3, r2
 8002c34:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <HAL_DMA_Init+0x140>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_DMA_Init+0x144>)
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
 8002c48:	e00e      	b.n	8002c68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_DMA_Init+0x148>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <HAL_DMA_Init+0x140>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a3c      	ldr	r2, [pc, #240]	; (8002d58 <HAL_DMA_Init+0x14c>)
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9b6 	bl	800302c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc8:	d102      	bne.n	8002cd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_DMA_Init+0x104>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d80c      	bhi.n	8002d10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9d6 	bl	80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e008      	b.n	8002d22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020407 	.word	0x40020407
 8002d48:	bffdfff8 	.word	0xbffdfff8
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	40020000 	.word	0x40020000
 8002d54:	bffdfbf8 	.word	0xbffdfbf8
 8002d58:	40020400 	.word	0x40020400

08002d5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Start_IT+0x20>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e066      	b.n	8002e4a <HAL_DMA_Start_IT+0xee>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d155      	bne.n	8002e3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f8fb 	bl	8002fb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 020e 	orr.w	r2, r2, #14
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00f      	b.n	8002df4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 020a 	orr.w	r2, r2, #10
 8002df2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e005      	b.n	8002e48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d026      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x7a>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d021      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d107      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0204 	bic.w	r2, r2, #4
 8002ea4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d071      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002eca:	e06c      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02e      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d029      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 020a 	bic.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d038      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f3c:	e033      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2208      	movs	r2, #8
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d02a      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d025      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020e 	bic.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
}
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fd8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e001      	b.n	800304a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003048:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3b08      	subs	r3, #8
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2201      	movs	r2, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40020407 	.word	0x40020407
 8003098:	40020800 	.word	0x40020800
 800309c:	40020820 	.word	0x40020820
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020880 	.word	0x40020880

080030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a08      	ldr	r2, [pc, #32]	; (80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	1000823f 	.word	0x1000823f
 80030ec:	40020940 	.word	0x40020940

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030fe:	e15a      	b.n	80033b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 814c 	beq.w	80033b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800312c:	2b02      	cmp	r3, #2
 800312e:	d130      	bne.n	8003192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003166:	2201      	movs	r2, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0201 	and.w	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b03      	cmp	r3, #3
 800319c:	d017      	beq.n	80031ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d123      	bne.n	8003222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a6 	beq.w	80033b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003264:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <HAL_GPIO_Init+0x2e4>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_GPIO_Init+0x2e4>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6613      	str	r3, [r2, #96]	; 0x60
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_GPIO_Init+0x2e4>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327c:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a6:	d01f      	beq.n	80032e8 <HAL_GPIO_Init+0x1f8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <HAL_GPIO_Init+0x2ec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d019      	beq.n	80032e4 <HAL_GPIO_Init+0x1f4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_GPIO_Init+0x2f0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_GPIO_Init+0x1f0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <HAL_GPIO_Init+0x2f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00d      	beq.n	80032dc <HAL_GPIO_Init+0x1ec>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a49      	ldr	r2, [pc, #292]	; (80033e8 <HAL_GPIO_Init+0x2f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <HAL_GPIO_Init+0x1e8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a48      	ldr	r2, [pc, #288]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_GPIO_Init+0x1e4>
 80032d0:	2305      	movs	r3, #5
 80032d2:	e00a      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032d4:	2306      	movs	r3, #6
 80032d6:	e008      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032d8:	2304      	movs	r3, #4
 80032da:	e006      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032dc:	2303      	movs	r3, #3
 80032de:	e004      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e002      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032e8:	2300      	movs	r3, #0
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	f002 0203 	and.w	r2, r2, #3
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	4093      	lsls	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fa:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_GPIO_Init+0x300>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800332c:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <HAL_GPIO_Init+0x300>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_GPIO_Init+0x300>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003356:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <HAL_GPIO_Init+0x300>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_GPIO_Init+0x300>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_GPIO_Init+0x300>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_GPIO_Init+0x300>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033aa:	4a11      	ldr	r2, [pc, #68]	; (80033f0 <HAL_GPIO_Init+0x300>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae9d 	bne.w	8003100 <HAL_GPIO_Init+0x10>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000800 	.word	0x48000800
 80033e4:	48000c00 	.word	0x48000c00
 80033e8:	48001000 	.word	0x48001000
 80033ec:	48001400 	.word	0x48001400
 80033f0:	40010400 	.word	0x40010400

080033f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d141      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003402:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d131      	bne.n	8003474 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003410:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	4a46      	ldr	r2, [pc, #280]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800341c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003428:	4a41      	ldr	r2, [pc, #260]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003430:	4b40      	ldr	r3, [pc, #256]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2232      	movs	r2, #50	; 0x32
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	4a3f      	ldr	r2, [pc, #252]	; (8003538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9b      	lsrs	r3, r3, #18
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003446:	e002      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3b01      	subs	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d102      	bne.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f2      	bne.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003462:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d158      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e057      	b.n	8003524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003484:	e04d      	b.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d141      	bne.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d131      	bne.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800349c:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2232      	movs	r2, #50	; 0x32
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9b      	lsrs	r3, r3, #18
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d2:	e002      	b.n	80034da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d102      	bne.n	80034ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f2      	bne.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d112      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e011      	b.n	8003524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003510:	e007      	b.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800351a:	4a05      	ldr	r2, [pc, #20]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003520:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40007000 	.word	0x40007000
 8003534:	20000044 	.word	0x20000044
 8003538:	431bde83 	.word	0x431bde83

0800353c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e306      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d075      	beq.n	8003646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4b97      	ldr	r3, [pc, #604]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x3e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d002      	beq.n	8003580 <HAL_RCC_OscConfig+0x44>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10b      	bne.n	8003598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	4b8d      	ldr	r3, [pc, #564]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05b      	beq.n	8003644 <HAL_RCC_OscConfig+0x108>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d157      	bne.n	8003644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e2e1      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_OscConfig+0x74>
 80035a2:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a84      	ldr	r2, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xb0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x98>
 80035ba:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7e      	ldr	r2, [pc, #504]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b7c      	ldr	r3, [pc, #496]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7b      	ldr	r2, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xb0>
 80035d4:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a74      	ldr	r2, [pc, #464]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fd5a 	bl	80010ac <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fd fd56 	bl	80010ac <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2a6      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xc0>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fd46 	bl	80010ac <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd fd42 	bl	80010ac <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e292      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003636:	4b60      	ldr	r3, [pc, #384]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0xe8>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d075      	beq.n	800373e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800365c:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d102      	bne.n	8003672 <HAL_RCC_OscConfig+0x136>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d002      	beq.n	8003678 <HAL_RCC_OscConfig+0x13c>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_OscConfig+0x154>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e265      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	4946      	ldr	r1, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036a4:	4b45      	ldr	r3, [pc, #276]	; (80037bc <HAL_RCC_OscConfig+0x280>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fcb3 	bl	8001014 <HAL_InitTick>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d043      	beq.n	800373c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e251      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fcee 	bl	80010ac <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fd fcea 	bl	80010ac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e23a      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	492d      	ldr	r1, [pc, #180]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
 8003706:	e01a      	b.n	800373e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800370e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fcca 	bl	80010ac <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7fd fcc6 	bl	80010ac <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e216      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1e0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d041      	beq.n	80037ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01c      	beq.n	800378c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd fca3 	bl	80010ac <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376a:	f7fd fc9f 	bl	80010ac <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1ef      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <HAL_RCC_OscConfig+0x22e>
 800378a:	e020      	b.n	80037ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fd fc86 	bl	80010ac <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a2:	e00d      	b.n	80037c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fd fc82 	bl	80010ac <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d906      	bls.n	80037c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e1d2      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c0:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ea      	bne.n	80037a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e0:	4b84      	ldr	r3, [pc, #528]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2b4>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x2b6>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a7e      	ldr	r2, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
 8003802:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	4b79      	ldr	r3, [pc, #484]	; (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fd fc3f 	bl	80010ac <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd fc3b 	bl	80010ac <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e18b      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003844:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <HAL_RCC_OscConfig+0x32e>
 8003858:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003868:	e024      	b.n	80038b4 <HAL_RCC_OscConfig+0x378>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d110      	bne.n	8003894 <HAL_RCC_OscConfig+0x358>
 8003872:	4b60      	ldr	r3, [pc, #384]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	4a5e      	ldr	r2, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003882:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_OscConfig+0x378>
 8003894:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd fbf6 	bl	80010ac <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fd fbf2 	bl	80010ac <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e140      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ed      	beq.n	80038c4 <HAL_RCC_OscConfig+0x388>
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fbdf 	bl	80010ac <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fd fbdb 	bl	80010ac <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e129      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1ed      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4a34      	ldr	r2, [pc, #208]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03c      	beq.n	80039ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01c      	beq.n	8003976 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800393c:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800393e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003942:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fd fbae 	bl	80010ac <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003954:	f7fd fbaa 	bl	80010ac <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0fa      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003966:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x418>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fd fb91 	bl	80010ac <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398e:	f7fd fb8d 	bl	80010ac <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0dd      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80d1 	beq.w	8003b5a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	f000 808b 	beq.w	8003adc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d15e      	bne.n	8003a8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd fb67 	bl	80010ac <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	e00c      	b.n	80039fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fb63 	bl	80010ac <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d905      	bls.n	80039fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0b3      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ec      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <HAL_RCC_OscConfig+0x62c>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a11      	ldr	r1, [r2, #32]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a22:	0212      	lsls	r2, r2, #8
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a2a:	0852      	lsrs	r2, r2, #1
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0552      	lsls	r2, r2, #21
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a36:	0852      	lsrs	r2, r2, #1
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0652      	lsls	r2, r2, #25
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a42:	06d2      	lsls	r2, r2, #27
 8003a44:	430a      	orrs	r2, r1
 8003a46:	4947      	ldr	r1, [pc, #284]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a44      	ldr	r2, [pc, #272]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a41      	ldr	r2, [pc, #260]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fb22 	bl	80010ac <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fd fb1e 	bl	80010ac <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e06e      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x530>
 8003a8a:	e066      	b.n	8003b5a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a31      	ldr	r2, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003aaa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fafa 	bl	80010ac <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd faf6 	bl	80010ac <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e046      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x580>
 8003ada:	e03e      	b.n	8003b5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e039      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0203 	and.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d12c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	3b01      	subs	r3, #1
 8003b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d123      	bne.n	8003b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d11b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d113      	bne.n	8003b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	019f800c 	.word	0x019f800c

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e11e      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b91      	ldr	r3, [pc, #580]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 020f 	bic.w	r2, r3, #15
 8003b9a:	498c      	ldr	r1, [pc, #560]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e106      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d073      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d129      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0f4      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bd8:	f000 f972 	bl	8003ec0 <RCC_GetSysClockFreqFromPLLSource>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4a7c      	ldr	r2, [pc, #496]	; (8003dd4 <HAL_RCC_ClockConfig+0x268>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d93f      	bls.n	8003c66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003be6:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d033      	beq.n	8003c66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d12f      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	4a70      	ldr	r2, [pc, #448]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e024      	b.n	8003c66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0c6      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0be      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c44:	f000 f8ce 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <HAL_RCC_ClockConfig+0x268>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d909      	bls.n	8003c66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5a:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4957      	ldr	r1, [pc, #348]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fd fa18 	bl	80010ac <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fd fa14 	bl	80010ac <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e095      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a42      	ldr	r2, [pc, #264]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ce0:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d21d      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 020f 	bic.w	r2, r3, #15
 8003d24:	4929      	ldr	r1, [pc, #164]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd f9be 	bl	80010ac <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fd f9ba 	bl	80010ac <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e03b      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1ed      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d96:	f000 f825 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_ClockConfig+0x264>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <HAL_RCC_ClockConfig+0x26c>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x270>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd f92a 	bl	8001014 <HAL_InitTick>
 8003dc0:	4603      	mov	r3, r0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	04c4b400 	.word	0x04c4b400
 8003dd8:	08004874 	.word	0x08004874
 8003ddc:	20000044 	.word	0x20000044
 8003de0:	20000048 	.word	0x20000048

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d102      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df6:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e047      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e03e      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d136      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e42:	68d2      	ldr	r2, [r2, #12]
 8003e44:	0a12      	lsrs	r2, r2, #8
 8003e46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
      break;
 8003e50:	e00c      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	0a12      	lsrs	r2, r2, #8
 8003e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
      break;
 8003e6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0e5b      	lsrs	r3, r3, #25
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e001      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e8c:	693b      	ldr	r3, [r7, #16]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000044 	.word	0x20000044

08003ec0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d10c      	bne.n	8003efe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee4:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eee:	68d2      	ldr	r2, [r2, #12]
 8003ef0:	0a12      	lsrs	r2, r2, #8
 8003ef2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	617b      	str	r3, [r7, #20]
    break;
 8003efc:	e00c      	b.n	8003f18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f08:	68d2      	ldr	r2, [r2, #12]
 8003f0a:	0a12      	lsrs	r2, r2, #8
 8003f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    break;
 8003f16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0e5b      	lsrs	r3, r3, #25
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f32:	687b      	ldr	r3, [r7, #4]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	007a1200 	.word	0x007a1200
 8003f48:	00f42400 	.word	0x00f42400

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8098 	beq.w	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	; 0x58
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f96:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a39      	ldr	r2, [pc, #228]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa2:	f7fd f883 	bl	80010ac <HAL_GetTick>
 8003fa6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa8:	e009      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fd f87f 	bl	80010ac <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	74fb      	strb	r3, [r7, #19]
        break;
 8003fbc:	e005      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	4b30      	ldr	r3, [pc, #192]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ef      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d159      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01e      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d019      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004008:	4b1c      	ldr	r3, [pc, #112]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7fd f83f 	bl	80010ac <HAL_GetTick>
 800402e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004030:	e00b      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fd f83b 	bl	80010ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d902      	bls.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	74fb      	strb	r3, [r7, #19]
            break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ec      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405e:	4b07      	ldr	r3, [pc, #28]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406c:	4903      	ldr	r1, [pc, #12]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	74bb      	strb	r3, [r7, #18]
 800407a:	e005      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004088:	7c7b      	ldrb	r3, [r7, #17]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4ba7      	ldr	r3, [pc, #668]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	4aa6      	ldr	r2, [pc, #664]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a6:	4ba1      	ldr	r3, [pc, #644]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	499d      	ldr	r1, [pc, #628]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c8:	4b98      	ldr	r3, [pc, #608]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4995      	ldr	r1, [pc, #596]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ea:	4b90      	ldr	r3, [pc, #576]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	498c      	ldr	r1, [pc, #560]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800410c:	4b87      	ldr	r3, [pc, #540]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4984      	ldr	r1, [pc, #528]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800412e:	4b7f      	ldr	r3, [pc, #508]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	497b      	ldr	r1, [pc, #492]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004150:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	4973      	ldr	r1, [pc, #460]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b6e      	ldr	r3, [pc, #440]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	496a      	ldr	r1, [pc, #424]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4962      	ldr	r1, [pc, #392]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b5d      	ldr	r3, [pc, #372]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	4959      	ldr	r1, [pc, #356]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b54      	ldr	r3, [pc, #336]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	4951      	ldr	r1, [pc, #324]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4948      	ldr	r1, [pc, #288]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800421c:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	4940      	ldr	r1, [pc, #256]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a3a      	ldr	r2, [pc, #232]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4932      	ldr	r1, [pc, #200]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a2c      	ldr	r2, [pc, #176]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428c:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	4924      	ldr	r1, [pc, #144]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	4916      	ldr	r1, [pc, #88]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a10      	ldr	r2, [pc, #64]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431a:	d109      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a02      	ldr	r2, [pc, #8]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d015      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4926      	ldr	r1, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435a:	d105      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800435c:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004382:	4918      	ldr	r1, [pc, #96]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	490a      	ldr	r1, [pc, #40]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e049      	b.n	800448e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fc9e 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 f8ae 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e054      	b.n	800455a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d01d      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_TIM_Base_Start_IT+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start_IT+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <HAL_TIM_Base_Start_IT+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIM_Base_Start_IT+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_TIM_Base_Start_IT+0xec>)
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d015      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d011      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e008      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e000      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40015000 	.word	0x40015000
 8004584:	00010007 	.word	0x00010007

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d017      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d013      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a43      	ldr	r2, [pc, #268]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a42      	ldr	r2, [pc, #264]	; (80046bc <TIM_Base_SetConfig+0x134>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a41      	ldr	r2, [pc, #260]	; (80046c0 <TIM_Base_SetConfig+0x138>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <TIM_Base_SetConfig+0x13c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_Base_SetConfig+0x48>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <TIM_Base_SetConfig+0x140>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d108      	bne.n	80045e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a33      	ldr	r2, [pc, #204]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d023      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d01f      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01b      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <TIM_Base_SetConfig+0x134>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d017      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <TIM_Base_SetConfig+0x138>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <TIM_Base_SetConfig+0x13c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00f      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <TIM_Base_SetConfig+0x144>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <TIM_Base_SetConfig+0x148>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <TIM_Base_SetConfig+0x14c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_Base_SetConfig+0xaa>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <TIM_Base_SetConfig+0x140>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d108      	bne.n	8004644 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <TIM_Base_SetConfig+0x110>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <TIM_Base_SetConfig+0x13c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0x110>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <TIM_Base_SetConfig+0x144>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0x110>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <TIM_Base_SetConfig+0x148>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0x110>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <TIM_Base_SetConfig+0x14c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0x110>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <TIM_Base_SetConfig+0x140>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	615a      	str	r2, [r3, #20]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40015000 	.word	0x40015000
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40014400 	.word	0x40014400
 80046d4:	40014800 	.word	0x40014800

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e074      	b.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a33      	ldr	r2, [pc, #204]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a31      	ldr	r2, [pc, #196]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d01d      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40015000 	.word	0x40015000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40014000 	.word	0x40014000

08004804 <memset>:
 8004804:	4402      	add	r2, r0
 8004806:	4603      	mov	r3, r0
 8004808:	4293      	cmp	r3, r2
 800480a:	d100      	bne.n	800480e <memset+0xa>
 800480c:	4770      	bx	lr
 800480e:	f803 1b01 	strb.w	r1, [r3], #1
 8004812:	e7f9      	b.n	8004808 <memset+0x4>

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4d0d      	ldr	r5, [pc, #52]	; (800484c <__libc_init_array+0x38>)
 8004818:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <__libc_init_array+0x3c>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	2600      	movs	r6, #0
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	4d0b      	ldr	r5, [pc, #44]	; (8004854 <__libc_init_array+0x40>)
 8004826:	4c0c      	ldr	r4, [pc, #48]	; (8004858 <__libc_init_array+0x44>)
 8004828:	f000 f818 	bl	800485c <_init>
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	2600      	movs	r6, #0
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	08004884 	.word	0x08004884
 8004850:	08004884 	.word	0x08004884
 8004854:	08004884 	.word	0x08004884
 8004858:	08004888 	.word	0x08004888

0800485c <_init>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr

08004868 <_fini>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr
