
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08009360  08009360  00019360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e0  080095e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e8  080095e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080095f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  20000074  08009664  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  08009664  00021040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2f5  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003319  00000000  00000000  0003a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001227  00000000  00000000  0003ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a36b  00000000  00000000  0004007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1cc  00000000  00000000  0006a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118e45  00000000  00000000  000855b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007028  00000000  00000000  0019e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001a5424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009348 	.word	0x08009348

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08009348 	.word	0x08009348

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f001 f940 	bl	8001fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f8dd 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000d36:	f000 fb77 	bl	8001428 <MX_DMA_Init>
  MX_GPIO_Init();
 8000d3a:	f000 fbaf 	bl	800149c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d3e:	f000 fb25 	bl	800138c <MX_TIM3_Init>
  MX_DAC3_Init();
 8000d42:	f000 fa05 	bl	8001150 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 8000d46:	f000 fafb 	bl	8001340 <MX_OPAMP6_Init>
  MX_ADC1_Init();
 8000d4a:	f000 f91d 	bl	8000f88 <MX_ADC1_Init>
  MX_OPAMP3_Init();
 8000d4e:	f000 fa83 	bl	8001258 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000d52:	f000 faa7 	bl	80012a4 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000d56:	f000 facd 	bl	80012f4 <MX_OPAMP5_Init>
  MX_ADC2_Init();
 8000d5a:	f000 f98f 	bl	800107c <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8000d5e:	f000 fa31 	bl	80011c4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_DeInit(&htim2);
  HAL_TIM_Base_DeInit(&htim3);
 8000d62:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <main+0x180>)
 8000d64:	f004 ff29 	bl	8005bba <HAL_TIM_Base_DeInit>

  printf("Hello World %i\n", 12);
 8000d68:	210c      	movs	r1, #12
 8000d6a:	4850      	ldr	r0, [pc, #320]	; (8000eac <main+0x184>)
 8000d6c:	f006 fc36 	bl	80075dc <iprintf>
  ajustaTimers();
 8000d70:	f000 fc46 	bl	8001600 <ajustaTimers>
  calculaLut();
 8000d74:	f000 fbee 	bl	8001554 <calculaLut>

  //Timers
  //if (HAL_TIM_Base_Init(&htim2) != HAL_OK){Error_Handler();}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK){Error_Handler();}
 8000d78:	484b      	ldr	r0, [pc, #300]	; (8000ea8 <main+0x180>)
 8000d7a:	f004 fec7 	bl	8005b0c <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <main+0x60>
 8000d84:	f000 fd18 	bl	80017b8 <Error_Handler>

  //HAL_TIM_Base_Start(&htim2);
  HAL_TIM_Base_Start(&htim3);
 8000d88:	4847      	ldr	r0, [pc, #284]	; (8000ea8 <main+0x180>)
 8000d8a:	f004 ff73 	bl	8005c74 <HAL_TIM_Base_Start>

  //OPAMS
  if(HAL_OK != HAL_OPAMP_Start(&hopamp6)) { Error_Handler();}
 8000d8e:	4848      	ldr	r0, [pc, #288]	; (8000eb0 <main+0x188>)
 8000d90:	f003 fe64 	bl	8004a5c <HAL_OPAMP_Start>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <main+0x76>
 8000d9a:	f000 fd0d 	bl	80017b8 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp4)) { Error_Handler();}
 8000d9e:	4845      	ldr	r0, [pc, #276]	; (8000eb4 <main+0x18c>)
 8000da0:	f003 fe5c 	bl	8004a5c <HAL_OPAMP_Start>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <main+0x86>
 8000daa:	f000 fd05 	bl	80017b8 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp3)) { Error_Handler();}
 8000dae:	4842      	ldr	r0, [pc, #264]	; (8000eb8 <main+0x190>)
 8000db0:	f003 fe54 	bl	8004a5c <HAL_OPAMP_Start>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <main+0x96>
 8000dba:	f000 fcfd 	bl	80017b8 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp5)) { Error_Handler();}
 8000dbe:	483f      	ldr	r0, [pc, #252]	; (8000ebc <main+0x194>)
 8000dc0:	f003 fe4c 	bl	8004a5c <HAL_OPAMP_Start>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <main+0xa6>
 8000dca:	f000 fcf5 	bl	80017b8 <Error_Handler>


  //DAC
  if(HAL_DACEx_DualSetValue(&hdac3, DAC_ALIGN_12B_R, 0, 0) != HAL_OK) { Error_Handler();}
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	483a      	ldr	r0, [pc, #232]	; (8000ec0 <main+0x198>)
 8000dd6:	f003 f8cf 	bl	8003f78 <HAL_DACEx_DualSetValue>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <main+0xbc>
 8000de0:	f000 fcea 	bl	80017b8 <Error_Handler>
  if(HAL_DACEx_DualStart_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)lut,lut_size,DAC_ALIGN_12B_R)!= HAL_OK){ Error_Handler();}
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <main+0x19c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	9200      	str	r2, [sp, #0]
 8000dec:	4a36      	ldr	r2, [pc, #216]	; (8000ec8 <main+0x1a0>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4833      	ldr	r0, [pc, #204]	; (8000ec0 <main+0x198>)
 8000df2:	f003 f80b 	bl	8003e0c <HAL_DACEx_DualStart_DMA>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <main+0xd8>
 8000dfc:	f000 fcdc 	bl	80017b8 <Error_Handler>

  HAL_Delay(10);		// Wait 10ms so that the signal is stable.
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 f947 	bl	8002094 <HAL_Delay>

  //ADC
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_buffer,TAM_BUFFER) != HAL_OK){Error_Handler();}
 8000e06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e0a:	4930      	ldr	r1, [pc, #192]	; (8000ecc <main+0x1a4>)
 8000e0c:	4830      	ldr	r0, [pc, #192]	; (8000ed0 <main+0x1a8>)
 8000e0e:	f001 fd47 	bl	80028a0 <HAL_ADC_Start_DMA>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <main+0xf4>
 8000e18:	f000 fcce 	bl	80017b8 <Error_Handler>
  if (HAL_ADC_Start_DMA(&hadc2,(uint32_t *)adc2_buffer,TAM_BUFFER) != HAL_OK){Error_Handler();}
 8000e1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e20:	492c      	ldr	r1, [pc, #176]	; (8000ed4 <main+0x1ac>)
 8000e22:	482d      	ldr	r0, [pc, #180]	; (8000ed8 <main+0x1b0>)
 8000e24:	f001 fd3c 	bl	80028a0 <HAL_ADC_Start_DMA>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <main+0x10a>
 8000e2e:	f000 fcc3 	bl	80017b8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e32:	2120      	movs	r1, #32
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f003 fd26 	bl	8004888 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e40:	f001 f928 	bl	8002094 <HAL_Delay>


	printf("<M1>");
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <main+0x1b4>)
 8000e46:	f006 fbc9 	bl	80075dc <iprintf>
	for(int j=0; j<TAM_BUFFER; j++){
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e00a      	b.n	8000e66 <main+0x13e>
		printf("%d,",adc1_buffer[j]);
 8000e50:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <main+0x1a4>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <main+0x1b8>)
 8000e5c:	f006 fbbe 	bl	80075dc <iprintf>
	for(int j=0; j<TAM_BUFFER; j++){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3301      	adds	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e6c:	dbf0      	blt.n	8000e50 <main+0x128>
	}
	printf("</M1>\n\r");
 8000e6e:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <main+0x1bc>)
 8000e70:	f006 fbb4 	bl	80075dc <iprintf>

	printf("<M2>");
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <main+0x1c0>)
 8000e76:	f006 fbb1 	bl	80075dc <iprintf>
	for(int j=0; j<TAM_BUFFER; j++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	e00a      	b.n	8000e96 <main+0x16e>
		printf("%d,",adc2_buffer[j]);
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <main+0x1ac>)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <main+0x1b8>)
 8000e8c:	f006 fba6 	bl	80075dc <iprintf>
	for(int j=0; j<TAM_BUFFER; j++){
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e9c:	dbf0      	blt.n	8000e80 <main+0x158>
	}
	printf("</M2>\n\r");
 8000e9e:	4813      	ldr	r0, [pc, #76]	; (8000eec <main+0x1c4>)
 8000ea0:	f006 fb9c 	bl	80075dc <iprintf>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ea4:	e7c5      	b.n	8000e32 <main+0x10a>
 8000ea6:	bf00      	nop
 8000ea8:	2000041c 	.word	0x2000041c
 8000eac:	08009360 	.word	0x08009360
 8000eb0:	200003e0 	.word	0x200003e0
 8000eb4:	20000368 	.word	0x20000368
 8000eb8:	2000032c 	.word	0x2000032c
 8000ebc:	200003a4 	.word	0x200003a4
 8000ec0:	20000228 	.word	0x20000228
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000468 	.word	0x20000468
 8000ecc:	200004e8 	.word	0x200004e8
 8000ed0:	20000090 	.word	0x20000090
 8000ed4:	200009e8 	.word	0x200009e8
 8000ed8:	200000fc 	.word	0x200000fc
 8000edc:	08009370 	.word	0x08009370
 8000ee0:	08009378 	.word	0x08009378
 8000ee4:	0800937c 	.word	0x0800937c
 8000ee8:	08009384 	.word	0x08009384
 8000eec:	0800938c 	.word	0x0800938c

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2238      	movs	r2, #56	; 0x38
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f006 fbc1 	bl	8007686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f003 fdd4 	bl	8004ac0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f32:	2355      	movs	r3, #85	; 0x55
 8000f34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fe5e 	bl	8004c08 <HAL_RCC_OscConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f52:	f000 fc31 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f56:	230f      	movs	r3, #15
 8000f58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 f961 	bl	8005238 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f7c:	f000 fc1c 	bl	80017b8 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	; 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fb70 	bl	8007686 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fa8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_ADC1_Init+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_ADC1_Init+0xec>)
 8000ff0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_ADC1_Init+0xec>)
 8000ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_ADC1_Init+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_ADC1_Init+0xec>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <MX_ADC1_Init+0xec>)
 8001016:	f001 fa81 	bl	800251c <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001020:	f000 fbca 	bl	80017b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <MX_ADC1_Init+0xec>)
 8001030:	f002 fa84 	bl	800353c <HAL_ADCEx_MultiModeConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800103a:	f000 fbbd 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_ADC1_Init+0xf0>)
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001042:	2306      	movs	r3, #6
 8001044:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104a:	237f      	movs	r3, #127	; 0x7f
 800104c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104e:	2304      	movs	r3, #4
 8001050:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_ADC1_Init+0xec>)
 800105c:	f001 fd12 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001066:	f000 fba7 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3730      	adds	r7, #48	; 0x30
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000090 	.word	0x20000090
 8001078:	04300002 	.word	0x04300002

0800107c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f006 fafc 	bl	8007686 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_ADC2_Init+0xc4>)
 8001090:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <MX_ADC2_Init+0xc8>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_ADC2_Init+0xc4>)
 8001096:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800109a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <MX_ADC2_Init+0xc4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010d6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_ADC2_Init+0xc4>)
 80010fc:	f001 fa0e 	bl	800251c <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001106:	f000 fb57 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC2_Init+0xcc>)
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_ADC2_Init+0xd0>)
 8001118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_ADC2_Init+0xc4>)
 8001128:	f001 fcac 	bl	8002a84 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001132:	f000 fb41 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000fc 	.word	0x200000fc
 8001144:	50000100 	.word	0x50000100
 8001148:	0c900008 	.word	0x0c900008
 800114c:	407f0000 	.word	0x407f0000

08001150 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2230      	movs	r2, #48	; 0x30
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f006 fa92 	bl	8007686 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_DAC3_Init+0x6c>)
 8001164:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <MX_DAC3_Init+0x70>)
 8001166:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001168:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_DAC3_Init+0x6c>)
 800116a:	f002 fc30 	bl	80039ce <HAL_DAC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001174:	f000 fb20 	bl	80017b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001178:	2302      	movs	r3, #2
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001188:	2322      	movs	r3, #34	; 0x22
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_DAC3_Init+0x6c>)
 80011a4:	f002 fc54 	bl	8003a50 <HAL_DAC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80011ae:	f000 fb03 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000228 	.word	0x20000228
 80011c0:	50001000 	.word	0x50001000

080011c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	4a22      	ldr	r2, [pc, #136]	; (8001254 <MX_LPUART1_UART_Init+0x90>)
 80011cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 8001208:	f005 fa8c 	bl	8006724 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 fad1 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 800121a:	f006 f853 	bl	80072c4 <HAL_UARTEx_SetTxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001224:	f000 fac8 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 800122c:	f006 f888 	bl	8007340 <HAL_UARTEx_SetRxFifoThreshold>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001236:	f000 fabf 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_LPUART1_UART_Init+0x8c>)
 800123c:	f006 f809 	bl	8007252 <HAL_UARTEx_DisableFifoMode>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001246:	f000 fab7 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000029c 	.word	0x2000029c
 8001254:	40008000 	.word	0x40008000

08001258 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_OPAMP3_Init+0x44>)
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <MX_OPAMP3_Init+0x48>)
 8001260:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_OPAMP3_Init+0x44>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_OPAMP3_Init+0x44>)
 800126a:	2260      	movs	r2, #96	; 0x60
 800126c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_OPAMP3_Init+0x44>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_OPAMP3_Init+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_OPAMP3_Init+0x44>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_OPAMP3_Init+0x44>)
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_OPAMP3_Init+0x44>)
 8001288:	f003 fb18 	bl	80048bc <HAL_OPAMP_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001292:	f000 fa91 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000032c 	.word	0x2000032c
 80012a0:	40010308 	.word	0x40010308

080012a4 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <MX_OPAMP4_Init+0x4c>)
 80012ac:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_OPAMP4_Init+0x48>)
 80012da:	f003 faef 	bl	80048bc <HAL_OPAMP_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 80012e4:	f000 fa68 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000368 	.word	0x20000368
 80012f0:	4001030c 	.word	0x4001030c

080012f4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_OPAMP5_Init+0x44>)
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <MX_OPAMP5_Init+0x48>)
 80012fc:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_OPAMP5_Init+0x44>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_OPAMP5_Init+0x44>)
 8001306:	2260      	movs	r2, #96	; 0x60
 8001308:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_OPAMP5_Init+0x44>)
 800130c:	2208      	movs	r2, #8
 800130e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_OPAMP5_Init+0x44>)
 8001312:	2200      	movs	r2, #0
 8001314:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_OPAMP5_Init+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_OPAMP5_Init+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_OPAMP5_Init+0x44>)
 8001324:	f003 faca 	bl	80048bc <HAL_OPAMP_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 800132e:	f000 fa43 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200003a4 	.word	0x200003a4
 800133c:	40010310 	.word	0x40010310

08001340 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_OPAMP6_Init+0x44>)
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <MX_OPAMP6_Init+0x48>)
 8001348:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_OPAMP6_Init+0x44>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_OPAMP6_Init+0x44>)
 8001352:	2260      	movs	r2, #96	; 0x60
 8001354:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_OPAMP6_Init+0x44>)
 8001358:	220c      	movs	r2, #12
 800135a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_OPAMP6_Init+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_OPAMP6_Init+0x44>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_OPAMP6_Init+0x44>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_OPAMP6_Init+0x44>)
 8001370:	f003 faa4 	bl	80048bc <HAL_OPAMP_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 800137a:	f000 fa1d 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003e0 	.word	0x200003e0
 8001388:	40010314 	.word	0x40010314

0800138c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <MX_TIM3_Init+0x98>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_TIM3_Init+0x94>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM3_Init+0x94>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_TIM3_Init+0x94>)
 80013be:	2234      	movs	r2, #52	; 0x34
 80013c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_TIM3_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_TIM3_Init+0x94>)
 80013d0:	f004 fb9c 	bl	8005b0c <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f9ed 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ec:	f004 fe32 	bl	8006054 <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f000 f9df 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013fa:	2320      	movs	r3, #32
 80013fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_TIM3_Init+0x94>)
 8001408:	f005 f8b0 	bl	800656c <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001412:	f000 f9d1 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000041c 	.word	0x2000041c
 8001424:	40000400 	.word	0x40000400

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_DMA_Init+0x70>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <MX_DMA_Init+0x70>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6493      	str	r3, [r2, #72]	; 0x48
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_DMA_Init+0x70>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_DMA_Init+0x70>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MX_DMA_Init+0x70>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6493      	str	r3, [r2, #72]	; 0x48
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_DMA_Init+0x70>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	200b      	movs	r0, #11
 8001464:	f002 fa71 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001468:	200b      	movs	r0, #11
 800146a:	f002 fa88 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	200c      	movs	r0, #12
 8001474:	f002 fa69 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001478:	200c      	movs	r0, #12
 800147a:	f002 fa80 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200d      	movs	r0, #13
 8001484:	f002 fa61 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001488:	200d      	movs	r0, #13
 800148a:	f002 fa78 	bl	800397e <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <MX_GPIO_Init+0x90>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <MX_GPIO_Init+0x90>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_GPIO_Init+0x90>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_GPIO_Init+0x90>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <MX_GPIO_Init+0x90>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_GPIO_Init+0x90>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_GPIO_Init+0x90>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <MX_GPIO_Init+0x90>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_GPIO_Init+0x90>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2120      	movs	r1, #32
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f003 f9a9 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001506:	2320      	movs	r3, #32
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f003 f818 	bl	8004554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *) &ch, 1, 0xFFFF);
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	2201      	movs	r2, #1
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <__io_putchar+0x20>)
 8001542:	f005 f93f 	bl	80067c4 <HAL_UART_Transmit>
	return ch;
 8001546:	687b      	ldr	r3, [r7, #4]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000029c 	.word	0x2000029c

08001554 <calculaLut>:

void calculaLut(){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	float step = 2*M_PI/TAM_LUT;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <calculaLut+0xa0>)
 800155c:	60bb      	str	r3, [r7, #8]
	uint32_t i = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 8001562:	e03e      	b.n	80015e2 <calculaLut+0x8e>
		uint32_t v = (uint32_t)((sin(i * step)*amp/sin(2*M_PI/4))+amp); //sin(TAM_LUT/4*step) = 0xFFF
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800156e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7ff f92f 	bl	80007dc <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	ec43 2b10 	vmov	d0, r2, r3
 8001586:	f006 fe9f 	bl	80082c8 <sin>
 800158a:	ec55 4b10 	vmov	r4, r5, d0
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <calculaLut+0xa4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f900 	bl	8000798 <__aeabi_ui2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe fe8e 	bl	80002c0 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <calculaLut+0xa4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f8f1 	bl	8000798 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7fe ffaf 	bl	8000520 <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa0f 	bl	80009ec <__aeabi_d2uiz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	607b      	str	r3, [r7, #4]
		lut[i] = v;
 80015d2:	490a      	ldr	r1, [pc, #40]	; (80015fc <calculaLut+0xa8>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b1f      	cmp	r3, #31
 80015e6:	d9bd      	bls.n	8001564 <calculaLut+0x10>
	}
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	3e490fdb 	.word	0x3e490fdb
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000468 	.word	0x20000468

08001600 <ajustaTimers>:

void ajustaTimers(){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	//10hz,50hz,100hz,200hz,500hz,700hz,1khz,10khz,50khz,100khz,200khz,500khz
	//f_deseada = f_timer/((ARR+1)x(PSC+1))
	//uint32_t f_timer = HAL_RCC_GetSysClockFreq();

	//tim3 ARR 16 bits y tim2 ARR 32bits
	switch(frequency){
 8001604:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <ajustaTimers+0x1a4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <ajustaTimers+0x1a8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	f000 80b7 	beq.w	800177e <ajustaTimers+0x17e>
 8001610:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <ajustaTimers+0x1a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f200 80ba 	bhi.w	800178c <ajustaTimers+0x18c>
 8001618:	4a64      	ldr	r2, [pc, #400]	; (80017ac <ajustaTimers+0x1ac>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f000 80a8 	beq.w	8001770 <ajustaTimers+0x170>
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <ajustaTimers+0x1ac>)
 8001622:	4293      	cmp	r3, r2
 8001624:	f200 80b2 	bhi.w	800178c <ajustaTimers+0x18c>
 8001628:	4a61      	ldr	r2, [pc, #388]	; (80017b0 <ajustaTimers+0x1b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	f000 8099 	beq.w	8001762 <ajustaTimers+0x162>
 8001630:	4a5f      	ldr	r2, [pc, #380]	; (80017b0 <ajustaTimers+0x1b0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f200 80aa 	bhi.w	800178c <ajustaTimers+0x18c>
 8001638:	f24c 3250 	movw	r2, #50000	; 0xc350
 800163c:	4293      	cmp	r3, r2
 800163e:	f000 8089 	beq.w	8001754 <ajustaTimers+0x154>
 8001642:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001646:	4293      	cmp	r3, r2
 8001648:	f200 80a0 	bhi.w	800178c <ajustaTimers+0x18c>
 800164c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001650:	4293      	cmp	r3, r2
 8001652:	d078      	beq.n	8001746 <ajustaTimers+0x146>
 8001654:	f242 7210 	movw	r2, #10000	; 0x2710
 8001658:	4293      	cmp	r3, r2
 800165a:	f200 8097 	bhi.w	800178c <ajustaTimers+0x18c>
 800165e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001662:	d068      	beq.n	8001736 <ajustaTimers+0x136>
 8001664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001668:	f200 8090 	bhi.w	800178c <ajustaTimers+0x18c>
 800166c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001670:	d059      	beq.n	8001726 <ajustaTimers+0x126>
 8001672:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001676:	f200 8089 	bhi.w	800178c <ajustaTimers+0x18c>
 800167a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800167e:	d04a      	beq.n	8001716 <ajustaTimers+0x116>
 8001680:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001684:	f200 8082 	bhi.w	800178c <ajustaTimers+0x18c>
 8001688:	2bc8      	cmp	r3, #200	; 0xc8
 800168a:	d03c      	beq.n	8001706 <ajustaTimers+0x106>
 800168c:	2bc8      	cmp	r3, #200	; 0xc8
 800168e:	d87d      	bhi.n	800178c <ajustaTimers+0x18c>
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d030      	beq.n	80016f6 <ajustaTimers+0xf6>
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d879      	bhi.n	800178c <ajustaTimers+0x18c>
 8001698:	2b32      	cmp	r3, #50	; 0x32
 800169a:	d024      	beq.n	80016e6 <ajustaTimers+0xe6>
 800169c:	2b32      	cmp	r3, #50	; 0x32
 800169e:	d875      	bhi.n	800178c <ajustaTimers+0x18c>
 80016a0:	2b0b      	cmp	r3, #11
 80016a2:	d006      	beq.n	80016b2 <ajustaTimers+0xb2>
 80016a4:	2b0b      	cmp	r3, #11
 80016a6:	d871      	bhi.n	800178c <ajustaTimers+0x18c>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d00b      	beq.n	80016c4 <ajustaTimers+0xc4>
 80016ac:	2b0a      	cmp	r3, #10
 80016ae:	d012      	beq.n	80016d6 <ajustaTimers+0xd6>
 80016b0:	e06c      	b.n	800178c <ajustaTimers+0x18c>
		case 11://0.1 100mHz
			//htim2.Init.Prescaler = 2999;
			htim3.Init.Prescaler = 2999;
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <ajustaTimers+0x1b4>)
 80016b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80016b8:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <ajustaTimers+0x1b4>)
 80016bc:	f244 524c 	movw	r2, #17740	; 0x454c
 80016c0:	60da      	str	r2, [r3, #12]
			break;
 80016c2:	e06a      	b.n	800179a <ajustaTimers+0x19a>
		case 1://1
			//htim2.Init.Prescaler = 299;
			htim3.Init.Prescaler = 299;
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <ajustaTimers+0x1b4>)
 80016c6:	f240 122b 	movw	r2, #299	; 0x12b
 80016ca:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <ajustaTimers+0x1b4>)
 80016ce:	f244 524c 	movw	r2, #17740	; 0x454c
 80016d2:	60da      	str	r2, [r3, #12]
			break;
 80016d4:	e061      	b.n	800179a <ajustaTimers+0x19a>
		case 10://10
			//htim2.Init.Prescaler = 29;
			htim3.Init.Prescaler = 29;
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <ajustaTimers+0x1b4>)
 80016d8:	221d      	movs	r2, #29
 80016da:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <ajustaTimers+0x1b4>)
 80016de:	f244 524c 	movw	r2, #17740	; 0x454c
 80016e2:	60da      	str	r2, [r3, #12]
			break;
 80016e4:	e059      	b.n	800179a <ajustaTimers+0x19a>
		case 50://50
			//htim2.Init.Prescaler = 5;
			htim3.Init.Prescaler = 5;
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <ajustaTimers+0x1b4>)
 80016e8:	2205      	movs	r2, #5
 80016ea:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <ajustaTimers+0x1b4>)
 80016ee:	f244 524c 	movw	r2, #17740	; 0x454c
 80016f2:	60da      	str	r2, [r3, #12]
			break;
 80016f4:	e051      	b.n	800179a <ajustaTimers+0x19a>
		case 100://100
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <ajustaTimers+0x1b4>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <ajustaTimers+0x1b4>)
 80016fe:	f244 524c 	movw	r2, #17740	; 0x454c
 8001702:	60da      	str	r2, [r3, #12]
			break;
 8001704:	e049      	b.n	800179a <ajustaTimers+0x19a>
		case 200://200
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <ajustaTimers+0x1b4>)
 8001708:	2202      	movs	r2, #2
 800170a:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 8870;
			htim3.Init.Period = 8870;
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <ajustaTimers+0x1b4>)
 800170e:	f242 22a6 	movw	r2, #8870	; 0x22a6
 8001712:	60da      	str	r2, [r3, #12]
			break;
 8001714:	e041      	b.n	800179a <ajustaTimers+0x19a>
		case 500: //500
			//htim2.Init.Prescaler = 4;
			htim3.Init.Prescaler = 4;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <ajustaTimers+0x1b4>)
 8001718:	2204      	movs	r2, #4
 800171a:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 2129;
			htim3.Init.Period = 2129;
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <ajustaTimers+0x1b4>)
 800171e:	f640 0251 	movw	r2, #2129	; 0x851
 8001722:	60da      	str	r2, [r3, #12]
			break;
 8001724:	e039      	b.n	800179a <ajustaTimers+0x19a>
		case 700://
			//htim2.Init.Prescaler = 1;
			htim3.Init.Prescaler = 3;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <ajustaTimers+0x1b4>)
 8001728:	2203      	movs	r2, #3
 800172a:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 121428;
			htim3.Init.Period = 60819;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <ajustaTimers+0x1b4>)
 800172e:	f64e 5293 	movw	r2, #60819	; 0xed93
 8001732:	60da      	str	r2, [r3, #12]
			break;
 8001734:	e031      	b.n	800179a <ajustaTimers+0x19a>
		case 1000://1000
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <ajustaTimers+0x1b4>)
 8001738:	2202      	movs	r2, #2
 800173a:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 1774;
			htim3.Init.Period = 1774;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <ajustaTimers+0x1b4>)
 800173e:	f240 62ee 	movw	r2, #1774	; 0x6ee
 8001742:	60da      	str	r2, [r3, #12]
			break;
 8001744:	e029      	b.n	800179a <ajustaTimers+0x19a>
		case 10000://10000
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <ajustaTimers+0x1b4>)
 8001748:	2202      	movs	r2, #2
 800174a:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 177;
			htim3.Init.Period = 177;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <ajustaTimers+0x1b4>)
 800174e:	22b1      	movs	r2, #177	; 0xb1
 8001750:	60da      	str	r2, [r3, #12]
			break;
 8001752:	e022      	b.n	800179a <ajustaTimers+0x19a>
		case 50000://50000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <ajustaTimers+0x1b4>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 105;
			htim3.Init.Period = 105;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <ajustaTimers+0x1b4>)
 800175c:	2269      	movs	r2, #105	; 0x69
 800175e:	60da      	str	r2, [r3, #12]
			break;
 8001760:	e01b      	b.n	800179a <ajustaTimers+0x19a>
		case 100000://100000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <ajustaTimers+0x1b4>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 52;
			htim3.Init.Period = 52;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <ajustaTimers+0x1b4>)
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	60da      	str	r2, [r3, #12]
			break;
 800176e:	e014      	b.n	800179a <ajustaTimers+0x19a>
		case 200000://200000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <ajustaTimers+0x1b4>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 25;
			htim3.Init.Period = 25;
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <ajustaTimers+0x1b4>)
 8001778:	2219      	movs	r2, #25
 800177a:	60da      	str	r2, [r3, #12]
			break;
 800177c:	e00d      	b.n	800179a <ajustaTimers+0x19a>
		case 500000://500000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <ajustaTimers+0x1b4>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 4;
			htim3.Init.Period = 4;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <ajustaTimers+0x1b4>)
 8001786:	2204      	movs	r2, #4
 8001788:	60da      	str	r2, [r3, #12]
			break;
 800178a:	e006      	b.n	800179a <ajustaTimers+0x19a>
		default:
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <ajustaTimers+0x1b4>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 4;
			htim3.Init.Period = 4;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <ajustaTimers+0x1b4>)
 8001794:	2204      	movs	r2, #4
 8001796:	60da      	str	r2, [r3, #12]
			break;
 8001798:	bf00      	nop

	}
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000004 	.word	0x20000004
 80017a8:	0007a120 	.word	0x0007a120
 80017ac:	00030d40 	.word	0x00030d40
 80017b0:	000186a0 	.word	0x000186a0
 80017b4:	2000041c 	.word	0x2000041c

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2120      	movs	r1, #32
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f003 f846 	bl	8004858 <HAL_GPIO_WritePin>
 80017cc:	e7f8      	b.n	80017c0 <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x44>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_MspInit+0x44>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0a0      	sub	sp, #128	; 0x80
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	2254      	movs	r2, #84	; 0x54
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f005 ff24 	bl	8007686 <memset>
  if(hadc->Instance==ADC1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001846:	d16a      	bne.n	800191e <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800184e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001852:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4618      	mov	r0, r3
 800185a:	f003 ff09 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001864:	f7ff ffa8 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 8001870:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10b      	bne.n	8001892 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a62      	ldr	r2, [pc, #392]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a5c      	ldr	r2, [pc, #368]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	2301      	movs	r3, #1
 80018ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f002 fe48 	bl	8004554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_ADC_MspInit+0x1f8>)
 80018c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018ca:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018cc:	2205      	movs	r2, #5
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d0:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018ea:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018f4:	2220      	movs	r2, #32
 80018f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 80018fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001900:	4842      	ldr	r0, [pc, #264]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 8001902:	f002 fbb5 	bl	8004070 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800190c:	f7ff ff54 	bl	80017b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_ADC_MspInit+0x1f4>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800191c:	e06e      	b.n	80019fc <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_ADC_MspInit+0x1fc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d169      	bne.n	80019fc <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800192e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001932:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fe99 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8001944:	f7ff ff38 	bl	80017b8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 8001950:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_ADC_MspInit+0x1ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_ADC_MspInit+0x1f0>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198e:	2303      	movs	r3, #3
 8001990:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f002 fdd8 	bl	8004554 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019a6:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_ADC_MspInit+0x204>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019ac:	2224      	movs	r2, #36	; 0x24
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019d4:	2220      	movs	r2, #32
 80019d6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019e2:	f002 fb45 	bl	8004070 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 80019ec:	f7ff fee4 	bl	80017b8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_ADC_MspInit+0x200>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80019fc:	bf00      	nop
 80019fe:	3780      	adds	r7, #128	; 0x80
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000ee8 	.word	0x20000ee8
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	20000168 	.word	0x20000168
 8001a10:	4002001c 	.word	0x4002001c
 8001a14:	50000100 	.word	0x50000100
 8001a18:	200001c8 	.word	0x200001c8
 8001a1c:	40020030 	.word	0x40020030

08001a20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_DAC_MspInit+0x8c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d137      	bne.n	8001aa2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_DAC_MspInit+0x90>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_DAC_MspInit+0x90>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_DAC_MspInit+0x90>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_DAC_MspInit+0x98>)
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a52:	2266      	movs	r2, #102	; 0x66
 8001a54:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a58:	2210      	movs	r2, #16
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6e:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a88:	f002 faf2 	bl	8004070 <HAL_DMA_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 8001a92:	f7ff fe91 	bl	80017b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_DAC_MspInit+0x94>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	50001000 	.word	0x50001000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	40020008 	.word	0x40020008

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b09e      	sub	sp, #120	; 0x78
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2254      	movs	r2, #84	; 0x54
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fdd2 	bl	8007686 <memset>
  if(huart->Instance==LPUART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_UART_MspInit+0xa8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d136      	bne.n	8001b5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001aec:	2320      	movs	r3, #32
 8001aee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fdb9 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b04:	f7ff fe58 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_UART_MspInit+0xac>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b38:	230c      	movs	r3, #12
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b48:	230c      	movs	r3, #12
 8001b4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f002 fcfd 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3778      	adds	r7, #120	; 0x78
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40008000 	.word	0x40008000
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_OPAMP_MspInit+0x148>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d118      	bne.n	8001bc0 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4840      	ldr	r0, [pc, #256]	; (8001cbc <HAL_OPAMP_MspInit+0x150>)
 8001bba:	f002 fccb 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001bbe:	e074      	b.n	8001caa <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <HAL_OPAMP_MspInit+0x154>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d119      	bne.n	8001bfe <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a3a      	ldr	r2, [pc, #232]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 8001be2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4831      	ldr	r0, [pc, #196]	; (8001cbc <HAL_OPAMP_MspInit+0x150>)
 8001bf8:	f002 fcac 	bl	8004554 <HAL_GPIO_Init>
}
 8001bfc:	e055      	b.n	8001caa <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP5)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <HAL_OPAMP_MspInit+0x158>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d132      	bne.n	8001c6e <HAL_OPAMP_MspInit+0x102>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <HAL_OPAMP_MspInit+0x15c>)
 8001c4c:	f002 fc82 	bl	8004554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f002 fc74 	bl	8004554 <HAL_GPIO_Init>
}
 8001c6c:	e01d      	b.n	8001caa <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP6)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_OPAMP_MspInit+0x160>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d118      	bne.n	8001caa <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_OPAMP_MspInit+0x14c>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <HAL_OPAMP_MspInit+0x150>)
 8001ca6:	f002 fc55 	bl	8004554 <HAL_GPIO_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3730      	adds	r7, #48	; 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40010308 	.word	0x40010308
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	4001030c 	.word	0x4001030c
 8001cc4:	40010310 	.word	0x40010310
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	40010314 	.word	0x40010314

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_TIM_Base_MspInit+0x44>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d113      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201d      	movs	r0, #29
 8001d00:	f001 fe23 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d04:	201d      	movs	r0, #29
 8001d06:	f001 fe3a 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_TIM_Base_MspDeInit+0x30>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_TIM_Base_MspDeInit+0x30>)
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8001d3a:	201d      	movs	r0, #29
 8001d3c:	f001 fe2d 	bl	800399a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40021000 	.word	0x40021000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <NMI_Handler+0x4>

08001d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler+0x4>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9c:	f000 f95c 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel1_IRQHandler+0x10>)
 8001daa:	f002 fa84 	bl	80042b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000023c 	.word	0x2000023c

08001db8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Channel2_IRQHandler+0x10>)
 8001dbe:	f002 fa7a 	bl	80042b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000168 	.word	0x20000168

08001dcc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Channel3_IRQHandler+0x10>)
 8001dd2:	f002 fa70 	bl	80042b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200001c8 	.word	0x200001c8

08001de0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM3_IRQHandler+0x10>)
 8001de6:	f003 ffb5 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000041c 	.word	0x2000041c

08001df4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e00a      	b.n	8001e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e06:	f3af 8000 	nop.w
 8001e0a:	4601      	mov	r1, r0
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	b2ca      	uxtb	r2, r1
 8001e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbf0      	blt.n	8001e06 <_read+0x12>
  }

  return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e009      	b.n	8001e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fb71 	bl	8001530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbf1      	blt.n	8001e40 <_write+0x12>
  }
  return len;
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_close>:

int _close(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_isatty>:

int _isatty(int file)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f005 fc10 	bl	8007724 <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20020000 	.word	0x20020000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	20000eec 	.word	0x20000eec
 8001f38:	20001040 	.word	0x20001040

08001f3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f66:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f7c:	4c0b      	ldr	r4, [pc, #44]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8a:	f7ff ffd7 	bl	8001f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f005 fbcf 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7fe fec9 	bl	8000d28 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   r0, =_estack
 8001f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fa4:	080095f0 	.word	0x080095f0
  ldr r2, =_sbss
 8001fa8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fac:	20001040 	.word	0x20001040

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>

08001fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f001 fcb9 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f80e 	bl	8001fe4 <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd4:	f7ff fbfc 	bl	80017d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_InitTick+0x68>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d022      	beq.n	800203e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_InitTick+0x6c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_InitTick+0x68>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002004:	fbb1 f3f3 	udiv	r3, r1, r3
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fcd2 	bl	80039b6 <HAL_SYSTICK_Config>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d809      	bhi.n	8002032 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201e:	2200      	movs	r2, #0
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	f04f 30ff 	mov.w	r0, #4294967295
 8002026:	f001 fc90 	bl	800394a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_InitTick+0x70>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	e007      	b.n	8002042 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e004      	b.n	8002042 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000014 	.word	0x20000014
 8002050:	2000000c 	.word	0x2000000c
 8002054:	20000010 	.word	0x20000010

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x1c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x20>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4413      	add	r3, r2
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_IncTick+0x1c>)
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20000ef0 	.word	0x20000ef0
 8002078:	20000014 	.word	0x20000014

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000ef0 	.word	0x20000ef0

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff ffee 	bl	800207c <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d004      	beq.n	80020b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_Delay+0x40>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b8:	bf00      	nop
 80020ba:	f7ff ffdf 	bl	800207c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d8f7      	bhi.n	80020ba <HAL_Delay+0x26>
  {
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000014 	.word	0x20000014

080020d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3360      	adds	r3, #96	; 0x60
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <LL_ADC_SetOffset+0x44>)
 8002162:	4013      	ands	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	4313      	orrs	r3, r2
 8002170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	03fff000 	.word	0x03fff000

08002188 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3360      	adds	r3, #96	; 0x60
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3360      	adds	r3, #96	; 0x60
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	615a      	str	r2, [r3, #20]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3330      	adds	r3, #48	; 0x30
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	4413      	add	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	211f      	movs	r1, #31
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 011f 	and.w	r1, r3, #31
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b087      	sub	sp, #28
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3314      	adds	r3, #20
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	0e5b      	lsrs	r3, r3, #25
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	0d1b      	lsrs	r3, r3, #20
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2107      	movs	r1, #7
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0d1b      	lsrs	r3, r3, #20
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0f      	ldr	r2, [pc, #60]	; (800239c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d10a      	bne.n	800237a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002378:	e00a      	b.n	8002390 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	43db      	mvns	r3, r3
 8002388:	401a      	ands	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	407f0000 	.word	0x407f0000

080023a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 031f 	and.w	r3, r3, #31
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6093      	str	r3, [r2, #8]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f4:	d101      	bne.n	80023fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800241c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002444:	d101      	bne.n	800244a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <LL_ADC_IsEnabled+0x18>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <LL_ADC_IsEnabled+0x1a>
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d101      	bne.n	800250c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1af      	b.n	8002896 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff f967 	bl	8001818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff3f 	bl	80023e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff25 	bl	80023bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff5a 	bl	8002430 <LL_ADC_IsInternalRegulatorEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff3e 	bl	8002408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258c:	4b9f      	ldr	r3, [pc, #636]	; (800280c <HAL_ADC_Init+0x2f0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	4a9f      	ldr	r2, [pc, #636]	; (8002810 <HAL_ADC_Init+0x2f4>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	3301      	adds	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025a0:	e002      	b.n	80025a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f9      	bne.n	80025a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff3c 	bl	8002430 <LL_ADC_IsInternalRegulatorEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff75 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 80025e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8148 	bne.w	8002884 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8144 	bne.w	8002884 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002604:	f043 0202 	orr.w	r2, r3, #2
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff35 	bl	8002480 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d141      	bne.n	80026a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Init+0x114>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_ADC_Init+0x2f8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10f      	bne.n	8002650 <HAL_ADC_Init+0x134>
 8002630:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002634:	f7ff ff24 	bl	8002480 <LL_ADC_IsEnabled>
 8002638:	4604      	mov	r4, r0
 800263a:	4876      	ldr	r0, [pc, #472]	; (8002814 <HAL_ADC_Init+0x2f8>)
 800263c:	f7ff ff20 	bl	8002480 <LL_ADC_IsEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	4323      	orrs	r3, r4
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_ADC_Init+0x15a>
 8002650:	4871      	ldr	r0, [pc, #452]	; (8002818 <HAL_ADC_Init+0x2fc>)
 8002652:	f7ff ff15 	bl	8002480 <LL_ADC_IsEnabled>
 8002656:	4604      	mov	r4, r0
 8002658:	4870      	ldr	r0, [pc, #448]	; (800281c <HAL_ADC_Init+0x300>)
 800265a:	f7ff ff11 	bl	8002480 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	431c      	orrs	r4, r3
 8002662:	486f      	ldr	r0, [pc, #444]	; (8002820 <HAL_ADC_Init+0x304>)
 8002664:	f7ff ff0c 	bl	8002480 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	4323      	orrs	r3, r4
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d012      	beq.n	80026a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002682:	d004      	beq.n	800268e <HAL_ADC_Init+0x172>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a62      	ldr	r2, [pc, #392]	; (8002814 <HAL_ADC_Init+0x2f8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Init+0x176>
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_ADC_Init+0x308>)
 8002690:	e000      	b.n	8002694 <HAL_ADC_Init+0x178>
 8002692:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_ADC_Init+0x30c>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7ff fd1c 	bl	80020d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7f5b      	ldrb	r3, [r3, #29]
 80026a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	045b      	lsls	r3, r3, #17
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_ADC_Init+0x310>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	430b      	orrs	r3, r1
 800270a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fed1 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 800272c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fede 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8002738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d17f      	bne.n	8002840 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d17c      	bne.n	8002840 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800274a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002752:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002762:	f023 0302 	bic.w	r3, r3, #2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	430b      	orrs	r3, r1
 800276e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002786:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6911      	ldr	r1, [r2, #16]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027a6:	e013      	b.n	80027d0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d12a      	bne.n	8002830 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027fc:	430a      	orrs	r2, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	611a      	str	r2, [r3, #16]
 800280a:	e019      	b.n	8002840 <HAL_ADC_Init+0x324>
 800280c:	2000000c 	.word	0x2000000c
 8002810:	053e2d63 	.word	0x053e2d63
 8002814:	50000100 	.word	0x50000100
 8002818:	50000400 	.word	0x50000400
 800281c:	50000500 	.word	0x50000500
 8002820:	50000600 	.word	0x50000600
 8002824:	50000300 	.word	0x50000300
 8002828:	50000700 	.word	0x50000700
 800282c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10c      	bne.n	8002862 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f023 010f 	bic.w	r1, r3, #15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
 8002860:	e007      	b.n	8002872 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020f 	bic.w	r2, r2, #15
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
 8002882:	e007      	b.n	8002894 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002894:	7ffb      	ldrb	r3, [r7, #31]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop

080028a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_Start_DMA+0x20>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_ADC_Start_DMA+0x184>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_Start_DMA+0x24>
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_ADC_Start_DMA+0x188>)
 80028c2:	e000      	b.n	80028c6 <HAL_ADC_Start_DMA+0x26>
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_ADC_Start_DMA+0x18c>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fd6a 	bl	80023a0 <LL_ADC_GetMultimode>
 80028cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fdfb 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 809b 	bne.w	8002a16 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Start_DMA+0x4e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e096      	b.n	8002a1c <HAL_ADC_Start_DMA+0x17c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4d      	ldr	r2, [pc, #308]	; (8002a30 <HAL_ADC_Start_DMA+0x190>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d008      	beq.n	8002912 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d002      	beq.n	8002912 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d17a      	bne.n	8002a08 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fcf6 	bl	8003304 <ADC_Enable>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d16d      	bne.n	80029fe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <HAL_ADC_Start_DMA+0x184>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_ADC_Start_DMA+0xb4>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_ADC_Start_DMA+0x194>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d002      	beq.n	8002950 <HAL_ADC_Start_DMA+0xb0>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e003      	b.n	8002958 <HAL_ADC_Start_DMA+0xb8>
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_ADC_Start_DMA+0x198>)
 8002952:	e001      	b.n	8002958 <HAL_ADC_Start_DMA+0xb8>
 8002954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4293      	cmp	r3, r2
 800295e:	d002      	beq.n	8002966 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f023 0206 	bic.w	r2, r3, #6
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	661a      	str	r2, [r3, #96]	; 0x60
 800298a:	e002      	b.n	8002992 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_ADC_Start_DMA+0x19c>)
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_ADC_Start_DMA+0x1a0>)
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_ADC_Start_DMA+0x1a4>)
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	221c      	movs	r2, #28
 80029b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0210 	orr.w	r2, r2, #16
 80029c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3340      	adds	r3, #64	; 0x40
 80029e4:	4619      	mov	r1, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f001 fbe9 	bl	80041c0 <HAL_DMA_Start_IT>
 80029ee:	4603      	mov	r3, r0
 80029f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fd55 	bl	80024a6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029fc:	e00d      	b.n	8002a1a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002a06:	e008      	b.n	8002a1a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a14:	e001      	b.n	8002a1a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
 8002a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	50000100 	.word	0x50000100
 8002a28:	50000300 	.word	0x50000300
 8002a2c:	50000700 	.word	0x50000700
 8002a30:	50000600 	.word	0x50000600
 8002a34:	50000500 	.word	0x50000500
 8002a38:	50000400 	.word	0x50000400
 8002a3c:	080033c9 	.word	0x080033c9
 8002a40:	080034a1 	.word	0x080034a1
 8002a44:	080034bd 	.word	0x080034bd

08002a48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0b6      	sub	sp, #216	; 0xd8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x24>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f000 bc13 	b.w	80032ce <HAL_ADC_ConfigChannel+0x84a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fd0a 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 83f3 	bne.w	80032a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7ff fbe7 	bl	80022a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fcf8 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 8002ade:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fd04 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8002aec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 81d9 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 81d4 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b0c:	d10f      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7ff fbee 	bl	80022fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fb95 	bl	8002256 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b2c:	e00e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7ff fbdd 	bl	80022fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb85 	bl	8002256 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d022      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b7e:	f7ff fadf 	bl	8002140 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7ff fb2b 	bl	80021ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6919      	ldr	r1, [r3, #16]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	7f1b      	ldrb	r3, [r3, #28]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d102      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x126>
 8002ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba8:	e000      	b.n	8002bac <HAL_ADC_ConfigChannel+0x128>
 8002baa:	2300      	movs	r3, #0
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff fb37 	bl	8002220 <LL_ADC_SetOffsetSaturation>
 8002bb2:	e17b      	b.n	8002eac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fae4 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x15c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fad9 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	e01e      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x19a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff face 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x1b2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	e018      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1e4>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e004      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d106      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fa9d 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fa81 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x222>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fa76 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	e01e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x260>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fa6b 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e004      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x278>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	e018      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x2aa>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e004      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d106      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fa3a 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fa1e 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2e8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fa13 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	e01e      	b.n	8002daa <HAL_ADC_ConfigChannel+0x326>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa08 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e004      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x33e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	e016      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x36c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e004      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f9d9 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f9bd 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x3aa>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f9b2 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	e017      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x3da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2103      	movs	r1, #3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f9a7 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x3f2>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	e011      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x416>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d106      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f984 	bl	80021b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fae5 	bl	8002480 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 813d 	bne.w	8003138 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7ff fa40 	bl	8002350 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4aa2      	ldr	r2, [pc, #648]	; (8003160 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 812e 	bne.w	8003138 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x480>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	bf94      	ite	ls
 8002efc:	2301      	movls	r3, #1
 8002efe:	2300      	movhi	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e019      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4b4>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2b09      	cmp	r3, #9
 8002f30:	bf94      	ite	ls
 8002f32:	2301      	movls	r3, #1
 8002f34:	2300      	movhi	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d079      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x4d4>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e015      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x500>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x520>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	e017      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x550>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x576>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	051b      	lsls	r3, r3, #20
 8002ff8:	e018      	b.n	800302c <HAL_ADC_ConfigChannel+0x5a8>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	430b      	orrs	r3, r1
 800302e:	e07e      	b.n	800312e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x5c8>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	069b      	lsls	r3, r3, #26
 8003046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304a:	e015      	b.n	8003078 <HAL_ADC_ConfigChannel+0x5f4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x614>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	e017      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x644>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	61fb      	str	r3, [r7, #28]
  return result;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x670>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f2:	e01b      	b.n	800312c <HAL_ADC_ConfigChannel+0x6a8>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	613b      	str	r3, [r7, #16]
  return result;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	3b1e      	subs	r3, #30
 8003126:	051b      	lsls	r3, r3, #20
 8003128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800312c:	430b      	orrs	r3, r1
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	6892      	ldr	r2, [r2, #8]
 8003132:	4619      	mov	r1, r3
 8003134:	f7ff f8e1 	bl	80022fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_ADC_ConfigChannel+0x6e0>)
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80be 	beq.w	80032c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314e:	d004      	beq.n	800315a <HAL_ADC_ConfigChannel+0x6d6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_ADC_ConfigChannel+0x6e4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10a      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x6ec>
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_ADC_ConfigChannel+0x6e8>)
 800315c:	e009      	b.n	8003172 <HAL_ADC_ConfigChannel+0x6ee>
 800315e:	bf00      	nop
 8003160:	407f0000 	.word	0x407f0000
 8003164:	80080000 	.word	0x80080000
 8003168:	50000100 	.word	0x50000100
 800316c:	50000300 	.word	0x50000300
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_ADC_ConfigChannel+0x854>)
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe ffd6 	bl	8002124 <LL_ADC_GetCommonPathInternalCh>
 8003178:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_ADC_ConfigChannel+0x858>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_ADC_ConfigChannel+0x70c>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a55      	ldr	r2, [pc, #340]	; (80032e0 <HAL_ADC_ConfigChannel+0x85c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d13a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d134      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a4:	d005      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x72e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_ADC_ConfigChannel+0x860>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f040 8085 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x742>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a49      	ldr	r2, [pc, #292]	; (80032e8 <HAL_ADC_ConfigChannel+0x864>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x746>
 80031c6:	4a49      	ldr	r2, [pc, #292]	; (80032ec <HAL_ADC_ConfigChannel+0x868>)
 80031c8:	e000      	b.n	80031cc <HAL_ADC_ConfigChannel+0x748>
 80031ca:	4a43      	ldr	r2, [pc, #268]	; (80032d8 <HAL_ADC_ConfigChannel+0x854>)
 80031cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f7fe ff91 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_ADC_ConfigChannel+0x86c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	4a44      	ldr	r2, [pc, #272]	; (80032f4 <HAL_ADC_ConfigChannel+0x870>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031f6:	e002      	b.n	80031fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003204:	e05a      	b.n	80032bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <HAL_ADC_ConfigChannel+0x874>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d125      	bne.n	800325c <HAL_ADC_ConfigChannel+0x7d8>
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11f      	bne.n	800325c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_ADC_ConfigChannel+0x864>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d104      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x7ac>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <HAL_ADC_ConfigChannel+0x878>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d047      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADC_ConfigChannel+0x7c0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <HAL_ADC_ConfigChannel+0x864>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x7c4>
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <HAL_ADC_ConfigChannel+0x868>)
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x7c6>
 8003248:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <HAL_ADC_ConfigChannel+0x854>)
 800324a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800324e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fe ff52 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800325a:	e031      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_ADC_ConfigChannel+0x87c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12d      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d127      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_ADC_ConfigChannel+0x864>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d004      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x80c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_ADC_ConfigChannel+0x864>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x810>
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_ADC_ConfigChannel+0x868>)
 8003292:	e000      	b.n	8003296 <HAL_ADC_ConfigChannel+0x812>
 8003294:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <HAL_ADC_ConfigChannel+0x854>)
 8003296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe ff2c 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
 80032a6:	e00c      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80032ba:	e002      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	37d8      	adds	r7, #216	; 0xd8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	50000700 	.word	0x50000700
 80032dc:	c3210000 	.word	0xc3210000
 80032e0:	90c00010 	.word	0x90c00010
 80032e4:	50000600 	.word	0x50000600
 80032e8:	50000100 	.word	0x50000100
 80032ec:	50000300 	.word	0x50000300
 80032f0:	2000000c 	.word	0x2000000c
 80032f4:	053e2d63 	.word	0x053e2d63
 80032f8:	c7520000 	.word	0xc7520000
 80032fc:	50000500 	.word	0x50000500
 8003300:	cb840000 	.word	0xcb840000

08003304 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f8b5 	bl	8002480 <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d14d      	bne.n	80033b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <ADC_Enable+0xc0>)
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e039      	b.n	80033ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f884 	bl	8002458 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003350:	f7fe fe94 	bl	800207c <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003356:	e028      	b.n	80033aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f88f 	bl	8002480 <LL_ADC_IsEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f873 	bl	8002458 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003372:	f7fe fe83 	bl	800207c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d914      	bls.n	80033aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d00d      	beq.n	80033aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d1cf      	bne.n	8003358 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	8000003f 	.word	0x8000003f

080033c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d14b      	bne.n	800347a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d021      	beq.n	8003440 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ff3b 	bl	800227c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d032      	beq.n	8003472 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d12b      	bne.n	8003472 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c
 800343e:	e018      	b.n	8003472 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d111      	bne.n	8003472 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fae8 	bl	8002a48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003478:	e00e      	b.n	8003498 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff faf2 	bl	8002a70 <HAL_ADC_ErrorCallback>
}
 800348c:	e004      	b.n	8003498 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fad4 	bl	8002a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	f043 0204 	orr.w	r2, r3, #4
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff fac4 	bl	8002a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <LL_ADC_IsEnabled>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <LL_ADC_IsEnabled+0x18>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <LL_ADC_IsEnabled+0x1a>
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_ADC_REG_IsConversionOngoing>:
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d101      	bne.n	800352e <LL_ADC_REG_IsConversionOngoing+0x18>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b0a1      	sub	sp, #132	; 0x84
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003556:	2302      	movs	r3, #2
 8003558:	e0e7      	b.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003562:	2300      	movs	r3, #0
 8003564:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003566:	2300      	movs	r3, #0
 8003568:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003572:	d102      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003574:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e009      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6e      	ldr	r2, [pc, #440]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e001      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0be      	b.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ffb1 	bl	8003516 <LL_ADC_REG_IsConversionOngoing>
 80035b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ffab 	bl	8003516 <LL_ADC_REG_IsConversionOngoing>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80a0 	bne.w	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 809c 	bne.w	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d8:	d004      	beq.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035e6:	e000      	b.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d04b      	beq.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003606:	035b      	lsls	r3, r3, #13
 8003608:	430b      	orrs	r3, r1
 800360a:	431a      	orrs	r2, r3
 800360c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003618:	d004      	beq.n	8003624 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a45      	ldr	r2, [pc, #276]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10f      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003624:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003628:	f7ff ff62 	bl	80034f0 <LL_ADC_IsEnabled>
 800362c:	4604      	mov	r4, r0
 800362e:	4841      	ldr	r0, [pc, #260]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003630:	f7ff ff5e 	bl	80034f0 <LL_ADC_IsEnabled>
 8003634:	4603      	mov	r3, r0
 8003636:	4323      	orrs	r3, r4
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e012      	b.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003644:	483c      	ldr	r0, [pc, #240]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003646:	f7ff ff53 	bl	80034f0 <LL_ADC_IsEnabled>
 800364a:	4604      	mov	r4, r0
 800364c:	483b      	ldr	r0, [pc, #236]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800364e:	f7ff ff4f 	bl	80034f0 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	431c      	orrs	r4, r3
 8003656:	483c      	ldr	r0, [pc, #240]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003658:	f7ff ff4a 	bl	80034f0 <LL_ADC_IsEnabled>
 800365c:	4603      	mov	r3, r0
 800365e:	4323      	orrs	r3, r4
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d056      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003676:	f023 030f 	bic.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	430a      	orrs	r2, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003688:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800368a:	e047      	b.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800368c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003696:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a0:	d004      	beq.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10f      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036b0:	f7ff ff1e 	bl	80034f0 <LL_ADC_IsEnabled>
 80036b4:	4604      	mov	r4, r0
 80036b6:	481f      	ldr	r0, [pc, #124]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b8:	f7ff ff1a 	bl	80034f0 <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	4323      	orrs	r3, r4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036cc:	481a      	ldr	r0, [pc, #104]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ce:	f7ff ff0f 	bl	80034f0 <LL_ADC_IsEnabled>
 80036d2:	4604      	mov	r4, r0
 80036d4:	4819      	ldr	r0, [pc, #100]	; (800373c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036d6:	f7ff ff0b 	bl	80034f0 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	431c      	orrs	r4, r3
 80036de:	481a      	ldr	r0, [pc, #104]	; (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036e0:	f7ff ff06 	bl	80034f0 <LL_ADC_IsEnabled>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4323      	orrs	r3, r4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036fe:	f023 030f 	bic.w	r3, r3, #15
 8003702:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003704:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003706:	e009      	b.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800371a:	e000      	b.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800371c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003726:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800372a:	4618      	mov	r0, r3
 800372c:	3784      	adds	r7, #132	; 0x84
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}
 8003732:	bf00      	nop
 8003734:	50000100 	.word	0x50000100
 8003738:	50000400 	.word	0x50000400
 800373c:	50000500 	.word	0x50000500
 8003740:	50000300 	.word	0x50000300
 8003744:	50000700 	.word	0x50000700
 8003748:	50000600 	.word	0x50000600

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <__NVIC_EnableIRQ+0x38>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000e100 	.word	0xe000e100

080037ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db12      	blt.n	8003824 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	490a      	ldr	r1, [pc, #40]	; (8003830 <__NVIC_DisableIRQ+0x44>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	3320      	adds	r3, #32
 8003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003818:	f3bf 8f4f 	dsb	sy
}
 800381c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800381e:	f3bf 8f6f 	isb	sy
}
 8003822:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	; (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	; (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
         );
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff8e 	bl	8003834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff05 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff1c 	bl	8003794 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff90 	bl	8003888 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5f 	bl	8003834 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff0f 	bl	80037b0 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff1f 	bl	80037ec <__NVIC_DisableIRQ>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ff96 	bl	80038f0 <SysTick_Config>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e014      	b.n	8003a0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	791b      	ldrb	r3, [r3, #4]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fe f815 	bl	8001a20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	795b      	ldrb	r3, [r3, #5]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DAC_ConfigChannel+0x18>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e192      	b.n	8003d8e <HAL_DAC_ConfigChannel+0x33e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2202      	movs	r2, #2
 8003a72:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d174      	bne.n	8003b66 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fafe 	bl	800207c <HAL_GetTick>
 8003a80:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d134      	bne.n	8003af2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a88:	e011      	b.n	8003aae <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a8a:	f7fe faf7 	bl	800207c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d90a      	bls.n	8003aae <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f043 0208 	orr.w	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e16f      	b.n	8003d8e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003abc:	2001      	movs	r0, #1
 8003abe:	f7fe fae9 	bl	8002094 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
 8003acc:	e01e      	b.n	8003b0c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ace:	f7fe fad5 	bl	800207c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d90a      	bls.n	8003af2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f043 0208 	orr.w	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2203      	movs	r2, #3
 8003aec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e14d      	b.n	8003d8e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dbe8      	blt.n	8003ace <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fe fac9 	bl	8002094 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	ea02 0103 	and.w	r1, r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	21ff      	movs	r1, #255	; 0xff
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	ea02 0103 	and.w	r1, r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d11d      	bne.n	8003baa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	221f      	movs	r2, #31
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	4013      	ands	r3, r2
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2207      	movs	r2, #7
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	e00f      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d102      	bne.n	8003be2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	e008      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003bea:	2301      	movs	r3, #1
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	e001      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	4013      	ands	r3, r2
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	791b      	ldrb	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_DAC_ConfigChannel+0x1d8>
 8003c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c26:	e000      	b.n	8003c2a <HAL_DAC_ConfigChannel+0x1da>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	4013      	ands	r3, r2
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	795b      	ldrb	r3, [r3, #5]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_DAC_ConfigChannel+0x204>
 8003c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c52:	e000      	b.n	8003c56 <HAL_DAC_ConfigChannel+0x206>
 8003c54:	2300      	movs	r3, #0
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d114      	bne.n	8003c96 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003c6c:	f001 fc82 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 8003c70:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4a48      	ldr	r2, [pc, #288]	; (8003d98 <HAL_DAC_ConfigChannel+0x348>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d904      	bls.n	8003c84 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e00f      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4a45      	ldr	r2, [pc, #276]	; (8003d9c <HAL_DAC_ConfigChannel+0x34c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d90a      	bls.n	8003ca2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
 8003c94:	e006      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	e000      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003ca2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	22c0      	movs	r2, #192	; 0xc0
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	400a      	ands	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	ea02 0103 	and.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	09896800 	.word	0x09896800
 8003d9c:	04c4b400 	.word	0x04c4b400

08003da0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fe2f 	bl	8003a12 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	711a      	strb	r2, [r3, #4]
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fe28 	bl	8003a26 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fe1e 	bl	8003a3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	711a      	strb	r2, [r3, #4]
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0UL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
  /* Ensure Channel 2 exists for this particular DAC instance */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	795b      	ldrb	r3, [r3, #5]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_DACEx_DualStart_DMA+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e095      	b.n	8003f56 <HAL_DACEx_DualStart_DMA+0x14a>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2202      	movs	r2, #2
 8003e34:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d114      	bne.n	8003e66 <HAL_DACEx_DualStart_DMA+0x5a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <HAL_DACEx_DualStart_DMA+0x154>)
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <HAL_DACEx_DualStart_DMA+0x158>)
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a45      	ldr	r2, [pc, #276]	; (8003f68 <HAL_DACEx_DualStart_DMA+0x15c>)
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e013      	b.n	8003e8e <HAL_DACEx_DualStart_DMA+0x82>
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <HAL_DACEx_DualStart_DMA+0x160>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4a3f      	ldr	r2, [pc, #252]	; (8003f70 <HAL_DACEx_DualStart_DMA+0x164>)
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a3e      	ldr	r2, [pc, #248]	; (8003f74 <HAL_DACEx_DualStart_DMA+0x168>)
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  switch (Alignment)
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d013      	beq.n	8003ebc <HAL_DACEx_DualStart_DMA+0xb0>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d815      	bhi.n	8003ec6 <HAL_DACEx_DualStart_DMA+0xba>
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_DACEx_DualStart_DMA+0x9c>
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d005      	beq.n	8003eb2 <HAL_DACEx_DualStart_DMA+0xa6>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
      break;
    default:
      break;
 8003ea6:	e00e      	b.n	8003ec6 <HAL_DACEx_DualStart_DMA+0xba>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3320      	adds	r3, #32
 8003eae:	613b      	str	r3, [r7, #16]
      break;
 8003eb0:	e00a      	b.n	8003ec8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3324      	adds	r3, #36	; 0x24
 8003eb8:	613b      	str	r3, [r7, #16]
      break;
 8003eba:	e005      	b.n	8003ec8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3328      	adds	r3, #40	; 0x28
 8003ec2:	613b      	str	r3, [r7, #16]
      break;
 8003ec4:	e000      	b.n	8003ec8 <HAL_DACEx_DualStart_DMA+0xbc>
      break;
 8003ec6:	bf00      	nop
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d111      	bne.n	8003ef2 <HAL_DACEx_DualStart_DMA+0xe6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003edc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6898      	ldr	r0, [r3, #8]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	f000 f96a 	bl	80041c0 <HAL_DMA_Start_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]
 8003ef0:	e010      	b.n	8003f14 <HAL_DACEx_DualStart_DMA+0x108>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68d8      	ldr	r0, [r3, #12]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	f000 f958 	bl	80041c0 <HAL_DMA_Start_IT>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d113      	bne.n	8003f48 <HAL_DACEx_DualStart_DMA+0x13c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f3e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003f40:	2001      	movs	r0, #1
 8003f42:	f7fe f8a7 	bl	8002094 <HAL_Delay>
 8003f46:	e005      	b.n	8003f54 <HAL_DACEx_DualStart_DMA+0x148>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	08003da1 	.word	0x08003da1
 8003f64:	08003dc3 	.word	0x08003dc3
 8003f68:	08003ddf 	.word	0x08003ddf
 8003f6c:	08004003 	.word	0x08004003
 8003f70:	08004025 	.word	0x08004025
 8003f74:	08004041 	.word	0x08004041

08003f78 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d105      	bne.n	8003f98 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e004      	b.n	8003fa2 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	3320      	adds	r3, #32
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ffd8 	bl	8003fc6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	711a      	strb	r2, [r3, #4]
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff ffd1 	bl	8003fda <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f043 0204 	orr.w	r2, r3, #4
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ffc7 	bl	8003fee <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	711a      	strb	r2, [r3, #4]
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e08d      	b.n	800419e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_DMA_Init+0x138>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d80f      	bhi.n	80040ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4b45      	ldr	r3, [pc, #276]	; (80041ac <HAL_DMA_Init+0x13c>)
 8004096:	4413      	add	r3, r2
 8004098:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_DMA_Init+0x140>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_DMA_Init+0x144>)
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
 80040ac:	e00e      	b.n	80040cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <HAL_DMA_Init+0x148>)
 80040b6:	4413      	add	r3, r2
 80040b8:	4a3d      	ldr	r2, [pc, #244]	; (80041b0 <HAL_DMA_Init+0x140>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <HAL_DMA_Init+0x14c>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9b6 	bl	8004490 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412c:	d102      	bne.n	8004134 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004148:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_DMA_Init+0x104>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d80c      	bhi.n	8004174 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9d6 	bl	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e008      	b.n	8004186 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40020407 	.word	0x40020407
 80041ac:	bffdfff8 	.word	0xbffdfff8
 80041b0:	cccccccd 	.word	0xcccccccd
 80041b4:	40020000 	.word	0x40020000
 80041b8:	bffdfbf8 	.word	0xbffdfbf8
 80041bc:	40020400 	.word	0x40020400

080041c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_DMA_Start_IT+0x20>
 80041dc:	2302      	movs	r3, #2
 80041de:	e066      	b.n	80042ae <HAL_DMA_Start_IT+0xee>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d155      	bne.n	80042a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8fb 	bl	8004414 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 020e 	orr.w	r2, r2, #14
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e00f      	b.n	8004258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0204 	bic.w	r2, r2, #4
 8004246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 020a 	orr.w	r2, r2, #10
 8004256:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e005      	b.n	80042ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2204      	movs	r2, #4
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d026      	beq.n	8004330 <HAL_DMA_IRQHandler+0x7a>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d021      	beq.n	8004330 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0204 	bic.w	r2, r2, #4
 8004308:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f003 021f 	and.w	r2, r3, #31
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2104      	movs	r1, #4
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	2b00      	cmp	r3, #0
 8004324:	d071      	beq.n	800440a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800432e:	e06c      	b.n	800440a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2202      	movs	r2, #2
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02e      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d029      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 020a 	bic.w	r2, r2, #10
 800436a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2102      	movs	r1, #2
 8004382:	fa01 f202 	lsl.w	r2, r1, r2
 8004386:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d038      	beq.n	800440a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a0:	e033      	b.n	800440a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2208      	movs	r2, #8
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02a      	beq.n	800440c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d025      	beq.n	800440c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 020e 	bic.w	r2, r2, #14
 80043ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800440a:	bf00      	nop
 800440c:	bf00      	nop
}
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800442a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f003 021f 	and.w	r2, r3, #31
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f202 	lsl.w	r2, r1, r2
 8004450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b10      	cmp	r3, #16
 8004460:	d108      	bne.n	8004474 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004472:	e007      	b.n	8004484 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d802      	bhi.n	80044aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044a4:	4b15      	ldr	r3, [pc, #84]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e001      	b.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3b08      	subs	r3, #8
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	009a      	lsls	r2, r3, #2
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40020407 	.word	0x40020407
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020820 	.word	0x40020820
 8004504:	cccccccd 	.word	0xcccccccd
 8004508:	40020880 	.word	0x40020880

0800450c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	461a      	mov	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800452e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	1000823f 	.word	0x1000823f
 8004550:	40020940 	.word	0x40020940

08004554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004562:	e15a      	b.n	800481a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 814c 	beq.w	8004814 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d005      	beq.n	8004594 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004590:	2b02      	cmp	r3, #2
 8004592:	d130      	bne.n	80045f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	2203      	movs	r2, #3
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ca:	2201      	movs	r2, #1
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 0201 	and.w	r2, r3, #1
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d017      	beq.n	8004632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2203      	movs	r2, #3
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d123      	bne.n	8004686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	08da      	lsrs	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3208      	adds	r2, #8
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0203 	and.w	r2, r3, #3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a6 	beq.w	8004814 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c8:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_GPIO_Init+0x2e4>)
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	4a5a      	ldr	r2, [pc, #360]	; (8004838 <HAL_GPIO_Init+0x2e4>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6613      	str	r3, [r2, #96]	; 0x60
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_GPIO_Init+0x2e4>)
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046e0:	4a56      	ldr	r2, [pc, #344]	; (800483c <HAL_GPIO_Init+0x2e8>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	3302      	adds	r3, #2
 80046e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	220f      	movs	r2, #15
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800470a:	d01f      	beq.n	800474c <HAL_GPIO_Init+0x1f8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_GPIO_Init+0x2ec>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d019      	beq.n	8004748 <HAL_GPIO_Init+0x1f4>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_GPIO_Init+0x2f0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_GPIO_Init+0x1f0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <HAL_GPIO_Init+0x2f4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00d      	beq.n	8004740 <HAL_GPIO_Init+0x1ec>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_GPIO_Init+0x2f8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <HAL_GPIO_Init+0x1e8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a48      	ldr	r2, [pc, #288]	; (8004850 <HAL_GPIO_Init+0x2fc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_GPIO_Init+0x1e4>
 8004734:	2305      	movs	r3, #5
 8004736:	e00a      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 8004738:	2306      	movs	r3, #6
 800473a:	e008      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 800473c:	2304      	movs	r3, #4
 800473e:	e006      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 8004740:	2303      	movs	r3, #3
 8004742:	e004      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 8004744:	2302      	movs	r3, #2
 8004746:	e002      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_GPIO_Init+0x1fa>
 800474c:	2300      	movs	r3, #0
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	f002 0203 	and.w	r2, r2, #3
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	4093      	lsls	r3, r2
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475e:	4937      	ldr	r1, [pc, #220]	; (800483c <HAL_GPIO_Init+0x2e8>)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_GPIO_Init+0x300>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43db      	mvns	r3, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004790:	4a30      	ldr	r2, [pc, #192]	; (8004854 <HAL_GPIO_Init+0x300>)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_GPIO_Init+0x300>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	43db      	mvns	r3, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4013      	ands	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047ba:	4a26      	ldr	r2, [pc, #152]	; (8004854 <HAL_GPIO_Init+0x300>)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_GPIO_Init+0x300>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4013      	ands	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <HAL_GPIO_Init+0x300>)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ea:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <HAL_GPIO_Init+0x300>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	43db      	mvns	r3, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_GPIO_Init+0x300>)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3301      	adds	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f ae9d 	bne.w	8004564 <HAL_GPIO_Init+0x10>
  }
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40021000 	.word	0x40021000
 800483c:	40010000 	.word	0x40010000
 8004840:	48000400 	.word	0x48000400
 8004844:	48000800 	.word	0x48000800
 8004848:	48000c00 	.word	0x48000c00
 800484c:	48001000 	.word	0x48001000
 8004850:	48001400 	.word	0x48001400
 8004854:	40010400 	.word	0x40010400

08004858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
 8004864:	4613      	mov	r3, r2
 8004866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004868:	787b      	ldrb	r3, [r7, #1]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004874:	e002      	b.n	800487c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4013      	ands	r3, r2
 80048a0:	041a      	lsls	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43d9      	mvns	r1, r3
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	400b      	ands	r3, r1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0bb      	b.n	8004a4a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d101      	bne.n	80048e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0b3      	b.n	8004a4a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d101      	bne.n	80048f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0ab      	b.n	8004a4a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f2:	4b58      	ldr	r3, [pc, #352]	; (8004a54 <HAL_OPAMP_Init+0x198>)
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <HAL_OPAMP_Init+0x198>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6613      	str	r3, [r2, #96]	; 0x60
 80048fe:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_OPAMP_Init+0x198>)
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd f924 	bl	8001b6c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d003      	beq.n	8004934 <HAL_OPAMP_Init+0x78>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b60      	cmp	r3, #96	; 0x60
 8004932:	d133      	bne.n	800499c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0110 	bic.w	r1, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_OPAMP_Init+0x19c>)
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6851      	ldr	r1, [r2, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6912      	ldr	r2, [r2, #16]
 8004962:	430a      	orrs	r2, r1
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	7d09      	ldrb	r1, [r1, #20]
 8004968:	2901      	cmp	r1, #1
 800496a:	d102      	bne.n	8004972 <HAL_OPAMP_Init+0xb6>
 800496c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004970:	e000      	b.n	8004974 <HAL_OPAMP_Init+0xb8>
 8004972:	2100      	movs	r1, #0
 8004974:	4311      	orrs	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004986:	04d2      	lsls	r2, r2, #19
 8004988:	4311      	orrs	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800498e:	0612      	lsls	r2, r2, #24
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	430b      	orrs	r3, r1
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e035      	b.n	8004a08 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 0110 	bic.w	r1, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <HAL_OPAMP_Init+0x19c>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6851      	ldr	r1, [r2, #4]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68d2      	ldr	r2, [r2, #12]
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6912      	ldr	r2, [r2, #16]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	7d09      	ldrb	r1, [r1, #20]
 80049d6:	2901      	cmp	r1, #1
 80049d8:	d102      	bne.n	80049e0 <HAL_OPAMP_Init+0x124>
 80049da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049de:	e000      	b.n	80049e2 <HAL_OPAMP_Init+0x126>
 80049e0:	2100      	movs	r1, #0
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f4:	04d2      	lsls	r2, r2, #19
 80049f6:	4311      	orrs	r1, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049fc:	0612      	lsls	r2, r2, #24
 80049fe:	4311      	orrs	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db10      	blt.n	8004a34 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	e0003e11 	.word	0xe0003e11

08004a5c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	e01d      	b.n	8004ab0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d102      	bne.n	8004a86 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e014      	b.n	8004ab0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10c      	bne.n	8004aac <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004aaa:	e001      	b.n	8004ab0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d141      	bne.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ace:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d131      	bne.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004adc:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aec:	4b43      	ldr	r3, [pc, #268]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004af4:	4a41      	ldr	r2, [pc, #260]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2232      	movs	r2, #50	; 0x32
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a3f      	ldr	r2, [pc, #252]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	0c9b      	lsrs	r3, r3, #18
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b12:	e002      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1a:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d102      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f2      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d158      	bne.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e057      	b.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b46:	4a2d      	ldr	r2, [pc, #180]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b50:	e04d      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b58:	d141      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5a:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b66:	d131      	bne.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b6e:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b78:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2232      	movs	r2, #50	; 0x32
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0c9b      	lsrs	r3, r3, #18
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9e:	e002      	b.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb2:	d102      	bne.n	8004bba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d112      	bne.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e011      	b.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bdc:	e007      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	431bde83 	.word	0x431bde83

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e306      	b.n	8005228 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d075      	beq.n	8004d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c26:	4b97      	ldr	r3, [pc, #604]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c30:	4b94      	ldr	r3, [pc, #592]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d102      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3e>
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d002      	beq.n	8004c4c <HAL_RCC_OscConfig+0x44>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b8d      	ldr	r3, [pc, #564]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x108>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e2e1      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x74>
 8004c6e:	4b85      	ldr	r3, [pc, #532]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a84      	ldr	r2, [pc, #528]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x98>
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7b      	ldr	r2, [pc, #492]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004ca0:	4b78      	ldr	r3, [pc, #480]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a74      	ldr	r2, [pc, #464]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd f9dc 	bl	800207c <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fd f9d8 	bl	800207c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e2a6      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cda:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd f9c8 	bl	800207c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd f9c4 	bl	800207c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e292      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d02:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xe8>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d075      	beq.n	8004e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x136>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x13c>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11f      	bne.n	8004d84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d44:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_OscConfig+0x154>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e265      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4946      	ldr	r1, [pc, #280]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d70:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <HAL_RCC_OscConfig+0x280>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fd f935 	bl	8001fe4 <HAL_InitTick>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d043      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e251      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8c:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3c      	ldr	r2, [pc, #240]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fd f970 	bl	800207c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da0:	f7fd f96c 	bl	800207c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e23a      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	492d      	ldr	r1, [pc, #180]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
 8004dd2:	e01a      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd f94c 	bl	800207c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fd f948 	bl	800207c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e216      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dfa:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1e0>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d041      	beq.n	8004e9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e24:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fd f925 	bl	800207c <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd f921 	bl	800207c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1ef      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ef      	beq.n	8004e36 <HAL_RCC_OscConfig+0x22e>
 8004e56:	e020      	b.n	8004e9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd f908 	bl	800207c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e6e:	e00d      	b.n	8004e8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fd f904 	bl	800207c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d906      	bls.n	8004e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1d2      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e8c:	4b8c      	ldr	r3, [pc, #560]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ea      	bne.n	8004e70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a6 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eac:	4b84      	ldr	r3, [pc, #528]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x2b4>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x2b6>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b7f      	ldr	r3, [pc, #508]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a7e      	ldr	r2, [pc, #504]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ece:	4b7c      	ldr	r3, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ede:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d118      	bne.n	8004f1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eea:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	; (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fd f8c1 	bl	800207c <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fd f8bd 	bl	800207c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e18b      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <HAL_RCC_OscConfig+0x4bc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_RCC_OscConfig+0x32e>
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	4a65      	ldr	r2, [pc, #404]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f34:	e024      	b.n	8004f80 <HAL_RCC_OscConfig+0x378>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d110      	bne.n	8004f60 <HAL_RCC_OscConfig+0x358>
 8004f3e:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	4a5e      	ldr	r2, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f4e:	4b5c      	ldr	r3, [pc, #368]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	4a5a      	ldr	r2, [pc, #360]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x378>
 8004f60:	4b57      	ldr	r3, [pc, #348]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd f878 	bl	800207c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd f874 	bl	800207c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e140      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ed      	beq.n	8004f90 <HAL_RCC_OscConfig+0x388>
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fd f861 	bl	800207c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fd f85d 	bl	800207c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e129      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ed      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe8:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d03c      	beq.n	800507a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01c      	beq.n	8005042 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800500e:	4a2c      	ldr	r2, [pc, #176]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd f830 	bl	800207c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005020:	f7fd f82c 	bl	800207c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0fa      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <HAL_RCC_OscConfig+0x418>
 8005040:	e01b      	b.n	800507a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005042:	4b1f      	ldr	r3, [pc, #124]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fd f813 	bl	800207c <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505a:	f7fd f80f 	bl	800207c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0dd      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ef      	bne.n	800505a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80d1 	beq.w	8005226 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f000 808b 	beq.w	80051a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d15e      	bne.n	8005158 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc ffe9 	bl	800207c <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	e00c      	b.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fc ffe5 	bl	800207c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d905      	bls.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0b3      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c8:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ec      	bne.n	80050ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d4:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b56      	ldr	r3, [pc, #344]	; (8005234 <HAL_RCC_OscConfig+0x62c>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6a11      	ldr	r1, [r2, #32]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e4:	3a01      	subs	r2, #1
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050ee:	0212      	lsls	r2, r2, #8
 80050f0:	4311      	orrs	r1, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050f6:	0852      	lsrs	r2, r2, #1
 80050f8:	3a01      	subs	r2, #1
 80050fa:	0552      	lsls	r2, r2, #21
 80050fc:	4311      	orrs	r1, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005102:	0852      	lsrs	r2, r2, #1
 8005104:	3a01      	subs	r2, #1
 8005106:	0652      	lsls	r2, r2, #25
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800510e:	06d2      	lsls	r2, r2, #27
 8005110:	430a      	orrs	r2, r1
 8005112:	4947      	ldr	r1, [pc, #284]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 8005114:	4313      	orrs	r3, r2
 8005116:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b45      	ldr	r3, [pc, #276]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a44      	ldr	r2, [pc, #272]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800511e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a41      	ldr	r2, [pc, #260]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800512a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800512e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fc ffa4 	bl	800207c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fc ffa0 	bl	800207c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e06e      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	4b39      	ldr	r3, [pc, #228]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x530>
 8005156:	e066      	b.n	8005226 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a34      	ldr	r2, [pc, #208]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800515e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a31      	ldr	r2, [pc, #196]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005170:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a2e      	ldr	r2, [pc, #184]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 8005176:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800517a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fc ff7c 	bl	800207c <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fc ff78 	bl	800207c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e046      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519a:	4b25      	ldr	r3, [pc, #148]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x580>
 80051a6:	e03e      	b.n	8005226 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e039      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051b4:	4b1e      	ldr	r3, [pc, #120]	; (8005230 <HAL_RCC_OscConfig+0x628>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d12c      	bne.n	8005222 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	3b01      	subs	r3, #1
 80051d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d123      	bne.n	8005222 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d11b      	bne.n	8005222 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d113      	bne.n	8005222 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	3b01      	subs	r3, #1
 8005208:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d109      	bne.n	8005222 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	3b01      	subs	r3, #1
 800521c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	019f800c 	.word	0x019f800c

08005238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e11e      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b91      	ldr	r3, [pc, #580]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d910      	bls.n	8005280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b8e      	ldr	r3, [pc, #568]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	498c      	ldr	r1, [pc, #560]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b8a      	ldr	r3, [pc, #552]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e106      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d073      	beq.n	8005374 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d129      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005294:	4b81      	ldr	r3, [pc, #516]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0f4      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052a4:	f000 f99e 	bl	80055e4 <RCC_GetSysClockFreqFromPLLSource>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4a7c      	ldr	r2, [pc, #496]	; (80054a0 <HAL_RCC_ClockConfig+0x268>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d93f      	bls.n	8005332 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052b2:	4b7a      	ldr	r3, [pc, #488]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d033      	beq.n	8005332 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d12f      	bne.n	8005332 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052d2:	4b72      	ldr	r3, [pc, #456]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052da:	4a70      	ldr	r2, [pc, #448]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80052dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e024      	b.n	8005332 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052f0:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0c6      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005300:	4b66      	ldr	r3, [pc, #408]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0be      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005310:	f000 f8ce 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8005314:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4a61      	ldr	r2, [pc, #388]	; (80054a0 <HAL_RCC_ClockConfig+0x268>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d909      	bls.n	8005332 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800531e:	4b5f      	ldr	r3, [pc, #380]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005326:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005332:	4b5a      	ldr	r3, [pc, #360]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f023 0203 	bic.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4957      	ldr	r1, [pc, #348]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005340:	4313      	orrs	r3, r2
 8005342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005344:	f7fc fe9a 	bl	800207c <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	e00a      	b.n	8005362 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534c:	f7fc fe96 	bl	800207c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e095      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	4b4e      	ldr	r3, [pc, #312]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 020c 	and.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	429a      	cmp	r2, r3
 8005372:	d1eb      	bne.n	800534c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800538c:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a42      	ldr	r2, [pc, #264]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005396:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053a4:	4b3d      	ldr	r3, [pc, #244]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053ac:	4a3b      	ldr	r2, [pc, #236]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4936      	ldr	r1, [pc, #216]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
 80053c6:	e008      	b.n	80053da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d105      	bne.n	80053da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ce:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 80053d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d21d      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 020f 	bic.w	r2, r3, #15
 80053f0:	4929      	ldr	r1, [pc, #164]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053f8:	f7fc fe40 	bl	800207c <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005400:	f7fc fe3c 	bl	800207c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e03b      	b.n	800548e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_RCC_ClockConfig+0x260>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d1ed      	bne.n	8005400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4917      	ldr	r1, [pc, #92]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490f      	ldr	r1, [pc, #60]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005462:	f000 f825 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <HAL_RCC_ClockConfig+0x264>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490c      	ldr	r1, [pc, #48]	; (80054a4 <HAL_RCC_ClockConfig+0x26c>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <HAL_RCC_ClockConfig+0x270>)
 8005480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_RCC_ClockConfig+0x274>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fc fdac 	bl	8001fe4 <HAL_InitTick>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40022000 	.word	0x40022000
 800549c:	40021000 	.word	0x40021000
 80054a0:	04c4b400 	.word	0x04c4b400
 80054a4:	08009394 	.word	0x08009394
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	20000010 	.word	0x20000010

080054b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d102      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_RCC_GetSysClockFreq+0xbc>)
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e047      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d102      	bne.n	80054da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054d4:	4b26      	ldr	r3, [pc, #152]	; (8005570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e03e      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054da:	4b23      	ldr	r3, [pc, #140]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d136      	bne.n	8005554 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054e6:	4b20      	ldr	r3, [pc, #128]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f0:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3301      	adds	r3, #1
 80054fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d10c      	bne.n	800551e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	4a16      	ldr	r2, [pc, #88]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800550e:	68d2      	ldr	r2, [r2, #12]
 8005510:	0a12      	lsrs	r2, r2, #8
 8005512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	617b      	str	r3, [r7, #20]
      break;
 800551c:	e00c      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005528:	68d2      	ldr	r2, [r2, #12]
 800552a:	0a12      	lsrs	r2, r2, #8
 800552c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
      break;
 8005536:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	0e5b      	lsrs	r3, r3, #25
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	3301      	adds	r3, #1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e001      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005558:	693b      	ldr	r3, [r7, #16]
}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000
 800556c:	00f42400 	.word	0x00f42400
 8005570:	007a1200 	.word	0x007a1200

08005574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <HAL_RCC_GetHCLKFreq+0x14>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	2000000c 	.word	0x2000000c

0800558c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005590:	f7ff fff0 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4904      	ldr	r1, [pc, #16]	; (80055b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	080093a4 	.word	0x080093a4

080055b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055bc:	f7ff ffda 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	0adb      	lsrs	r3, r3, #11
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	080093a4 	.word	0x080093a4

080055e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ea:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10c      	bne.n	8005622 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005612:	68d2      	ldr	r2, [r2, #12]
 8005614:	0a12      	lsrs	r2, r2, #8
 8005616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	617b      	str	r3, [r7, #20]
    break;
 8005620:	e00c      	b.n	800563c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	0a12      	lsrs	r2, r2, #8
 8005630:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]
    break;
 800563a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	0e5b      	lsrs	r3, r3, #25
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005656:	687b      	ldr	r3, [r7, #4]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40021000 	.word	0x40021000
 8005668:	007a1200 	.word	0x007a1200
 800566c:	00f42400 	.word	0x00f42400

08005670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005678:	2300      	movs	r3, #0
 800567a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800567c:	2300      	movs	r3, #0
 800567e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8098 	beq.w	80057be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568e:	2300      	movs	r3, #0
 8005690:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6593      	str	r3, [r2, #88]	; 0x58
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b6:	2301      	movs	r3, #1
 80056b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ba:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a39      	ldr	r2, [pc, #228]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c6:	f7fc fcd9 	bl	800207c <HAL_GetTick>
 80056ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056cc:	e009      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ce:	f7fc fcd5 	bl	800207c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d902      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	74fb      	strb	r3, [r7, #19]
        break;
 80056e0:	e005      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e2:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ef      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d159      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	d019      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005710:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800571c:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fc fc95 	bl	800207c <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005754:	e00b      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fc fc91 	bl	800207c <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d902      	bls.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	74fb      	strb	r3, [r7, #19]
            break;
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ec      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	4903      	ldr	r1, [pc, #12]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	74bb      	strb	r3, [r7, #18]
 800579e:	e005      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ac:	7c7b      	ldrb	r3, [r7, #17]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b2:	4ba7      	ldr	r3, [pc, #668]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4aa6      	ldr	r2, [pc, #664]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ca:	4ba1      	ldr	r3, [pc, #644]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f023 0203 	bic.w	r2, r3, #3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	499d      	ldr	r1, [pc, #628]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ec:	4b98      	ldr	r3, [pc, #608]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 020c 	bic.w	r2, r3, #12
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4995      	ldr	r1, [pc, #596]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580e:	4b90      	ldr	r3, [pc, #576]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	498c      	ldr	r1, [pc, #560]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005830:	4b87      	ldr	r3, [pc, #540]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4984      	ldr	r1, [pc, #528]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005852:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	497b      	ldr	r1, [pc, #492]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005874:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	4973      	ldr	r1, [pc, #460]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	496a      	ldr	r1, [pc, #424]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058b8:	4b65      	ldr	r3, [pc, #404]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4962      	ldr	r1, [pc, #392]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058da:	4b5d      	ldr	r3, [pc, #372]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4959      	ldr	r1, [pc, #356]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fc:	4b54      	ldr	r3, [pc, #336]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	4951      	ldr	r1, [pc, #324]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800591e:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4948      	ldr	r1, [pc, #288]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d015      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005940:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4940      	ldr	r1, [pc, #256]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595e:	d105      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800596a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005974:	2b00      	cmp	r3, #0
 8005976:	d015      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005978:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	4932      	ldr	r1, [pc, #200]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005998:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	4924      	ldr	r1, [pc, #144]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d0:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	4916      	ldr	r1, [pc, #88]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4908      	ldr	r1, [pc, #32]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3e:	d109      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a40:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a02      	ldr	r2, [pc, #8]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4a:	60d3      	str	r3, [r2, #12]
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a60:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	4926      	ldr	r1, [pc, #152]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	4918      	ldr	r1, [pc, #96]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	490a      	ldr	r1, [pc, #40]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000

08005b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e049      	b.n	8005bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f8cc 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fbca 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <HAL_TIM_Base_DeInit+0x40>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f244 4344 	movw	r3, #17476	; 0x4444
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_Base_DeInit+0x40>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fc f88e 	bl	8001d1c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e04c      	b.n	8005d26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <HAL_TIM_Base_Start+0xc0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d022      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d01d      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_TIM_Base_Start+0xc4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_TIM_Base_Start+0xc8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_TIM_Base_Start+0xcc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_TIM_Base_Start+0xd0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_TIM_Base_Start+0xd4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIM_Base_Start+0xd8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d115      	bne.n	8005d10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <HAL_TIM_Base_Start+0xdc>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d015      	beq.n	8005d22 <HAL_TIM_Base_Start+0xae>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d011      	beq.n	8005d22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40015000 	.word	0x40015000
 8005d50:	00010007 	.word	0x00010007

08005d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0202 	mvn.w	r2, #2
 8005d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa86 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa78 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa89 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0204 	mvn.w	r2, #4
 8005dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa5c 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa4e 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa5f 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0208 	mvn.w	r2, #8
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa32 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa24 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa35 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2208      	movs	r2, #8
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa08 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9fa 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fa0b 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0201 	mvn.w	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9d4 	bl	8006280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fbd4 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d107      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fbc7 	bl	80066c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d10e      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d107      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9b9 	bl	80062d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d10e      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0220 	mvn.w	r2, #32
 8005f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb87 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f98:	d10f      	bne.n	8005fba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb8d 	bl	80066d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc8:	d10f      	bne.n	8005fea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb7f 	bl	80066e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff8:	d10f      	bne.n	800601a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fb71 	bl	80066fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006028:	d10f      	bne.n	800604a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb63 	bl	8006710 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_TIM_ConfigClockSource+0x1c>
 800606c:	2302      	movs	r3, #2
 800606e:	e0f6      	b.n	800625e <HAL_TIM_ConfigClockSource+0x20a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800608e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800609a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a6f      	ldr	r2, [pc, #444]	; (8006268 <HAL_TIM_ConfigClockSource+0x214>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f000 80c1 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 80060b0:	4a6d      	ldr	r2, [pc, #436]	; (8006268 <HAL_TIM_ConfigClockSource+0x214>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	f200 80c6 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 80060b8:	4a6c      	ldr	r2, [pc, #432]	; (800626c <HAL_TIM_ConfigClockSource+0x218>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f000 80b9 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 80060c0:	4a6a      	ldr	r2, [pc, #424]	; (800626c <HAL_TIM_ConfigClockSource+0x218>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	f200 80be 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 80060c8:	4a69      	ldr	r2, [pc, #420]	; (8006270 <HAL_TIM_ConfigClockSource+0x21c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f000 80b1 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 80060d0:	4a67      	ldr	r2, [pc, #412]	; (8006270 <HAL_TIM_ConfigClockSource+0x21c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f200 80b6 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 80060d8:	4a66      	ldr	r2, [pc, #408]	; (8006274 <HAL_TIM_ConfigClockSource+0x220>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f000 80a9 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 80060e0:	4a64      	ldr	r2, [pc, #400]	; (8006274 <HAL_TIM_ConfigClockSource+0x220>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f200 80ae 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 80060e8:	4a63      	ldr	r2, [pc, #396]	; (8006278 <HAL_TIM_ConfigClockSource+0x224>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f000 80a1 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 80060f0:	4a61      	ldr	r2, [pc, #388]	; (8006278 <HAL_TIM_ConfigClockSource+0x224>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	f200 80a6 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 80060f8:	4a60      	ldr	r2, [pc, #384]	; (800627c <HAL_TIM_ConfigClockSource+0x228>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f000 8099 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006100:	4a5e      	ldr	r2, [pc, #376]	; (800627c <HAL_TIM_ConfigClockSource+0x228>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f200 809e 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800610c:	f000 8091 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006110:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006114:	f200 8096 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611c:	f000 8089 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006124:	f200 808e 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612c:	d03e      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x158>
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006132:	f200 8087 	bhi.w	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	f000 8086 	beq.w	800624a <HAL_TIM_ConfigClockSource+0x1f6>
 800613e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006142:	d87f      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006144:	2b70      	cmp	r3, #112	; 0x70
 8006146:	d01a      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x12a>
 8006148:	2b70      	cmp	r3, #112	; 0x70
 800614a:	d87b      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 800614c:	2b60      	cmp	r3, #96	; 0x60
 800614e:	d050      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x19e>
 8006150:	2b60      	cmp	r3, #96	; 0x60
 8006152:	d877      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006154:	2b50      	cmp	r3, #80	; 0x50
 8006156:	d03c      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x17e>
 8006158:	2b50      	cmp	r3, #80	; 0x50
 800615a:	d873      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d058      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x1be>
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d86f      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006164:	2b30      	cmp	r3, #48	; 0x30
 8006166:	d064      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006168:	2b30      	cmp	r3, #48	; 0x30
 800616a:	d86b      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 800616c:	2b20      	cmp	r3, #32
 800616e:	d060      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006170:	2b20      	cmp	r3, #32
 8006172:	d867      	bhi.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d05c      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 8006178:	2b10      	cmp	r3, #16
 800617a:	d05a      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x1de>
 800617c:	e062      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f000 f9cd 	bl	800652c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	609a      	str	r2, [r3, #8]
      break;
 80061aa:	e04f      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6899      	ldr	r1, [r3, #8]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f000 f9b6 	bl	800652c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ce:	609a      	str	r2, [r3, #8]
      break;
 80061d0:	e03c      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 f928 	bl	8006434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2150      	movs	r1, #80	; 0x50
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f981 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e02c      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 f947 	bl	8006492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2160      	movs	r1, #96	; 0x60
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f971 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006210:	e01c      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	461a      	mov	r2, r3
 8006220:	f000 f908 	bl	8006434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f961 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006230:	e00c      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 f958 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006242:	e003      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
      break;
 8006248:	e000      	b.n	800624c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800624a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	00100070 	.word	0x00100070
 800626c:	00100060 	.word	0x00100060
 8006270:	00100050 	.word	0x00100050
 8006274:	00100040 	.word	0x00100040
 8006278:	00100030 	.word	0x00100030
 800627c:	00100020 	.word	0x00100020

08006280 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a46      	ldr	r2, [pc, #280]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d017      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d013      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a43      	ldr	r2, [pc, #268]	; (8006414 <TIM_Base_SetConfig+0x130>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00f      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a42      	ldr	r2, [pc, #264]	; (8006418 <TIM_Base_SetConfig+0x134>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a41      	ldr	r2, [pc, #260]	; (800641c <TIM_Base_SetConfig+0x138>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a40      	ldr	r2, [pc, #256]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a3f      	ldr	r2, [pc, #252]	; (8006424 <TIM_Base_SetConfig+0x140>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a33      	ldr	r2, [pc, #204]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d023      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d01f      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a30      	ldr	r2, [pc, #192]	; (8006414 <TIM_Base_SetConfig+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01b      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <TIM_Base_SetConfig+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d017      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2e      	ldr	r2, [pc, #184]	; (800641c <TIM_Base_SetConfig+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2d      	ldr	r2, [pc, #180]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00f      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <TIM_Base_SetConfig+0x144>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2c      	ldr	r2, [pc, #176]	; (800642c <TIM_Base_SetConfig+0x148>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <TIM_Base_SetConfig+0x14c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_Base_SetConfig+0xaa>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <TIM_Base_SetConfig+0x140>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d108      	bne.n	80063a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a12      	ldr	r2, [pc, #72]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <TIM_Base_SetConfig+0x110>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a14      	ldr	r2, [pc, #80]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00f      	beq.n	80063f4 <TIM_Base_SetConfig+0x110>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <TIM_Base_SetConfig+0x144>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_Base_SetConfig+0x110>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a13      	ldr	r2, [pc, #76]	; (800642c <TIM_Base_SetConfig+0x148>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_Base_SetConfig+0x110>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a12      	ldr	r2, [pc, #72]	; (8006430 <TIM_Base_SetConfig+0x14c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0x110>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a0d      	ldr	r2, [pc, #52]	; (8006424 <TIM_Base_SetConfig+0x140>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	615a      	str	r2, [r3, #20]
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40015000 	.word	0x40015000
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0210 	bic.w	r2, r3, #16
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	f043 0307 	orr.w	r3, r3, #7
 8006518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	021a      	lsls	r2, r3, #8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	431a      	orrs	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4313      	orrs	r3, r2
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006580:	2302      	movs	r3, #2
 8006582:	e074      	b.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a34      	ldr	r2, [pc, #208]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a33      	ldr	r2, [pc, #204]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a31      	ldr	r2, [pc, #196]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a21      	ldr	r2, [pc, #132]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d01d      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a15      	ldr	r2, [pc, #84]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	; (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10c      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4313      	orrs	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40013400 	.word	0x40013400
 8006684:	40015000 	.word	0x40015000
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40014000 	.word	0x40014000

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e042      	b.n	80067bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb f9b7 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2224      	movs	r2, #36	; 0x24
 8006752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8c2 	bl	80068f0 <UART_SetConfig>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e022      	b.n	80067bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fbb2 	bl	8006ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fc39 	bl	800702c <UART_CheckIdleState>
 80067ba:	4603      	mov	r3, r0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067da:	2b20      	cmp	r3, #32
 80067dc:	f040 8083 	bne.w	80068e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Transmit+0x28>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e07b      	b.n	80068e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Transmit+0x3a>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e074      	b.n	80068e8 <HAL_UART_Transmit+0x124>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2221      	movs	r2, #33	; 0x21
 8006812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006816:	f7fb fc31 	bl	800207c <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	d108      	bne.n	8006848 <HAL_UART_Transmit+0x84>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	e003      	b.n	8006850 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006858:	e02c      	b.n	80068b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fc2c 	bl	80070c2 <UART_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e039      	b.n	80068e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	3302      	adds	r3, #2
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e007      	b.n	80068a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	3301      	adds	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1cc      	bne.n	800685a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fbf9 	bl	80070c2 <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e006      	b.n	80068e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f4:	b08c      	sub	sp, #48	; 0x30
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	431a      	orrs	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	431a      	orrs	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4313      	orrs	r3, r2
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4baa      	ldr	r3, [pc, #680]	; (8006bc8 <UART_SetConfig+0x2d8>)
 8006920:	4013      	ands	r3, r2
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006928:	430b      	orrs	r3, r1
 800692a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a9f      	ldr	r2, [pc, #636]	; (8006bcc <UART_SetConfig+0x2dc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006958:	4313      	orrs	r3, r2
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006970:	430b      	orrs	r3, r1
 8006972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f023 010f 	bic.w	r1, r3, #15
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a90      	ldr	r2, [pc, #576]	; (8006bd0 <UART_SetConfig+0x2e0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d125      	bne.n	80069e0 <UART_SetConfig+0xf0>
 8006994:	4b8f      	ldr	r3, [pc, #572]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d81a      	bhi.n	80069d8 <UART_SetConfig+0xe8>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <UART_SetConfig+0xb8>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069be:	e116      	b.n	8006bee <UART_SetConfig+0x2fe>
 80069c0:	2302      	movs	r3, #2
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069c6:	e112      	b.n	8006bee <UART_SetConfig+0x2fe>
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ce:	e10e      	b.n	8006bee <UART_SetConfig+0x2fe>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069d6:	e10a      	b.n	8006bee <UART_SetConfig+0x2fe>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069de:	e106      	b.n	8006bee <UART_SetConfig+0x2fe>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7c      	ldr	r2, [pc, #496]	; (8006bd8 <UART_SetConfig+0x2e8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d138      	bne.n	8006a5c <UART_SetConfig+0x16c>
 80069ea:	4b7a      	ldr	r3, [pc, #488]	; (8006bd4 <UART_SetConfig+0x2e4>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f003 030c 	and.w	r3, r3, #12
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d82d      	bhi.n	8006a54 <UART_SetConfig+0x164>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x110>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	08006a55 	.word	0x08006a55
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a55 	.word	0x08006a55
 8006a18:	08006a55 	.word	0x08006a55
 8006a1c:	08006a55 	.word	0x08006a55
 8006a20:	08006a3d 	.word	0x08006a3d
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a55 	.word	0x08006a55
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a3a:	e0d8      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a42:	e0d4      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4a:	e0d0      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a52:	e0cc      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5a:	e0c8      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5e      	ldr	r2, [pc, #376]	; (8006bdc <UART_SetConfig+0x2ec>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d125      	bne.n	8006ab2 <UART_SetConfig+0x1c2>
 8006a66:	4b5b      	ldr	r3, [pc, #364]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a70:	2b30      	cmp	r3, #48	; 0x30
 8006a72:	d016      	beq.n	8006aa2 <UART_SetConfig+0x1b2>
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d818      	bhi.n	8006aaa <UART_SetConfig+0x1ba>
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d00a      	beq.n	8006a92 <UART_SetConfig+0x1a2>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d814      	bhi.n	8006aaa <UART_SetConfig+0x1ba>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <UART_SetConfig+0x19a>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d008      	beq.n	8006a9a <UART_SetConfig+0x1aa>
 8006a88:	e00f      	b.n	8006aaa <UART_SetConfig+0x1ba>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a90:	e0ad      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a92:	2302      	movs	r3, #2
 8006a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a98:	e0a9      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa0:	e0a5      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa8:	e0a1      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006aaa:	2310      	movs	r3, #16
 8006aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab0:	e09d      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a4a      	ldr	r2, [pc, #296]	; (8006be0 <UART_SetConfig+0x2f0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d125      	bne.n	8006b08 <UART_SetConfig+0x218>
 8006abc:	4b45      	ldr	r3, [pc, #276]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac8:	d016      	beq.n	8006af8 <UART_SetConfig+0x208>
 8006aca:	2bc0      	cmp	r3, #192	; 0xc0
 8006acc:	d818      	bhi.n	8006b00 <UART_SetConfig+0x210>
 8006ace:	2b80      	cmp	r3, #128	; 0x80
 8006ad0:	d00a      	beq.n	8006ae8 <UART_SetConfig+0x1f8>
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d814      	bhi.n	8006b00 <UART_SetConfig+0x210>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <UART_SetConfig+0x1f0>
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d008      	beq.n	8006af0 <UART_SetConfig+0x200>
 8006ade:	e00f      	b.n	8006b00 <UART_SetConfig+0x210>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae6:	e082      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aee:	e07e      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af6:	e07a      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afe:	e076      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b06:	e072      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a35      	ldr	r2, [pc, #212]	; (8006be4 <UART_SetConfig+0x2f4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d12a      	bne.n	8006b68 <UART_SetConfig+0x278>
 8006b12:	4b30      	ldr	r3, [pc, #192]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b20:	d01a      	beq.n	8006b58 <UART_SetConfig+0x268>
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b26:	d81b      	bhi.n	8006b60 <UART_SetConfig+0x270>
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2c:	d00c      	beq.n	8006b48 <UART_SetConfig+0x258>
 8006b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b32:	d815      	bhi.n	8006b60 <UART_SetConfig+0x270>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <UART_SetConfig+0x250>
 8006b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3c:	d008      	beq.n	8006b50 <UART_SetConfig+0x260>
 8006b3e:	e00f      	b.n	8006b60 <UART_SetConfig+0x270>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b46:	e052      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4e:	e04e      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b56:	e04a      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	e046      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b66:	e042      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <UART_SetConfig+0x2dc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d13a      	bne.n	8006be8 <UART_SetConfig+0x2f8>
 8006b72:	4b18      	ldr	r3, [pc, #96]	; (8006bd4 <UART_SetConfig+0x2e4>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b80:	d01a      	beq.n	8006bb8 <UART_SetConfig+0x2c8>
 8006b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b86:	d81b      	bhi.n	8006bc0 <UART_SetConfig+0x2d0>
 8006b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x2b8>
 8006b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b92:	d815      	bhi.n	8006bc0 <UART_SetConfig+0x2d0>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x2b0>
 8006b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9c:	d008      	beq.n	8006bb0 <UART_SetConfig+0x2c0>
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x2d0>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba6:	e022      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bae:	e01e      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb6:	e01a      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbe:	e016      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc6:	e012      	b.n	8006bee <UART_SetConfig+0x2fe>
 8006bc8:	cfff69f3 	.word	0xcfff69f3
 8006bcc:	40008000 	.word	0x40008000
 8006bd0:	40013800 	.word	0x40013800
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40004400 	.word	0x40004400
 8006bdc:	40004800 	.word	0x40004800
 8006be0:	40004c00 	.word	0x40004c00
 8006be4:	40005000 	.word	0x40005000
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4aae      	ldr	r2, [pc, #696]	; (8006eac <UART_SetConfig+0x5bc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f040 8097 	bne.w	8006d28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d823      	bhi.n	8006c4a <UART_SetConfig+0x35a>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x318>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c4b 	.word	0x08006c4b
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c3b 	.word	0x08006c3b
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c4b 	.word	0x08006c4b
 8006c28:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe fcae 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8006c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c32:	e010      	b.n	8006c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b9e      	ldr	r3, [pc, #632]	; (8006eb0 <UART_SetConfig+0x5c0>)
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c38:	e00d      	b.n	8006c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe fc39 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c40:	e009      	b.n	8006c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c48:	e005      	b.n	8006c56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8130 	beq.w	8006ebe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	4a94      	ldr	r2, [pc, #592]	; (8006eb4 <UART_SetConfig+0x5c4>)
 8006c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d305      	bcc.n	8006c8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d903      	bls.n	8006c96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c94:	e113      	b.n	8006ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	60fa      	str	r2, [r7, #12]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	4a84      	ldr	r2, [pc, #528]	; (8006eb4 <UART_SetConfig+0x5c4>)
 8006ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2200      	movs	r2, #0
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cb8:	f7f9 feb8 	bl	8000a2c <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	020b      	lsls	r3, r1, #8
 8006cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd2:	0202      	lsls	r2, r0, #8
 8006cd4:	6979      	ldr	r1, [r7, #20]
 8006cd6:	6849      	ldr	r1, [r1, #4]
 8006cd8:	0849      	lsrs	r1, r1, #1
 8006cda:	2000      	movs	r0, #0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	4605      	mov	r5, r0
 8006ce0:	eb12 0804 	adds.w	r8, r2, r4
 8006ce4:	eb43 0905 	adc.w	r9, r3, r5
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	469a      	mov	sl, r3
 8006cf0:	4693      	mov	fp, r2
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	465b      	mov	r3, fp
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fe97 	bl	8000a2c <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4613      	mov	r3, r2
 8006d04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0c:	d308      	bcc.n	8006d20 <UART_SetConfig+0x430>
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d14:	d204      	bcs.n	8006d20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	60da      	str	r2, [r3, #12]
 8006d1e:	e0ce      	b.n	8006ebe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d26:	e0ca      	b.n	8006ebe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d30:	d166      	bne.n	8006e00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d827      	bhi.n	8006d8a <UART_SetConfig+0x49a>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <UART_SetConfig+0x450>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d7b 	.word	0x08006d7b
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d8b 	.word	0x08006d8b
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d64:	f7fe fc12 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8006d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d6a:	e014      	b.n	8006d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d6c:	f7fe fc24 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
 8006d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d72:	e010      	b.n	8006d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b4e      	ldr	r3, [pc, #312]	; (8006eb0 <UART_SetConfig+0x5c0>)
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d78:	e00d      	b.n	8006d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe fb99 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d80:	e009      	b.n	8006d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d88:	e005      	b.n	8006d96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8090 	beq.w	8006ebe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	4a44      	ldr	r2, [pc, #272]	; (8006eb4 <UART_SetConfig+0x5c4>)
 8006da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db0:	005a      	lsls	r2, r3, #1
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	441a      	add	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2b0f      	cmp	r3, #15
 8006dc8:	d916      	bls.n	8006df8 <UART_SetConfig+0x508>
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d212      	bcs.n	8006df8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f023 030f 	bic.w	r3, r3, #15
 8006dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	8bfb      	ldrh	r3, [r7, #30]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	8bfa      	ldrh	r2, [r7, #30]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	e062      	b.n	8006ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dfe:	e05e      	b.n	8006ebe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d828      	bhi.n	8006e5a <UART_SetConfig+0x56a>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0x520>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e3d 	.word	0x08006e3d
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e5b 	.word	0x08006e5b
 8006e20:	08006e4b 	.word	0x08006e4b
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e5b 	.word	0x08006e5b
 8006e2c:	08006e5b 	.word	0x08006e5b
 8006e30:	08006e53 	.word	0x08006e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fe fbaa 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 8006e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e3a:	e014      	b.n	8006e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e3c:	f7fe fbbc 	bl	80055b8 <HAL_RCC_GetPCLK2Freq>
 8006e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e42:	e010      	b.n	8006e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <UART_SetConfig+0x5c0>)
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e48:	e00d      	b.n	8006e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fe fb31 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8006e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e50:	e009      	b.n	8006e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e58:	e005      	b.n	8006e66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e64:	bf00      	nop
    }

    if (pclk != 0U)
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d028      	beq.n	8006ebe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <UART_SetConfig+0x5c4>)
 8006e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	441a      	add	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	2b0f      	cmp	r3, #15
 8006e94:	d910      	bls.n	8006eb8 <UART_SetConfig+0x5c8>
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d20c      	bcs.n	8006eb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60da      	str	r2, [r3, #12]
 8006ea8:	e009      	b.n	8006ebe <UART_SetConfig+0x5ce>
 8006eaa:	bf00      	nop
 8006eac:	40008000 	.word	0x40008000
 8006eb0:	00f42400 	.word	0x00f42400
 8006eb4:	080093ac 	.word	0x080093ac
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006eda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3730      	adds	r7, #48	; 0x30
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe6:	d10a      	bne.n	8006ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800703c:	f7fb f81e 	bl	800207c <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b08      	cmp	r3, #8
 800704e:	d10e      	bne.n	800706e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f82f 	bl	80070c2 <UART_WaitOnFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e025      	b.n	80070ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b04      	cmp	r3, #4
 800707a:	d10e      	bne.n	800709a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800707c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f819 	bl	80070c2 <UART_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e00f      	b.n	80070ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b09c      	sub	sp, #112	; 0x70
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d2:	e0a9      	b.n	8007228 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	f000 80a5 	beq.w	8007228 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070de:	f7fa ffcd 	bl	800207c <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d302      	bcc.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d140      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007108:	667b      	str	r3, [r7, #100]	; 0x64
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007114:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	663b      	str	r3, [r7, #96]	; 0x60
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007146:	64ba      	str	r2, [r7, #72]	; 0x48
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800714c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e069      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d051      	beq.n	8007228 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007192:	d149      	bne.n	8007228 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800719c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
 80071be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	613b      	str	r3, [r7, #16]
   return(result);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3308      	adds	r3, #8
 80071ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071f0:	623a      	str	r2, [r7, #32]
 80071f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	69f9      	ldr	r1, [r7, #28]
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e5      	bne.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e010      	b.n	800724a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4013      	ands	r3, r2
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	429a      	cmp	r2, r3
 8007244:	f43f af46 	beq.w	80070d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3770      	adds	r7, #112	; 0x70
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_DisableFifoMode+0x16>
 8007264:	2302      	movs	r3, #2
 8007266:	e027      	b.n	80072b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	; 0x24
 8007274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007296:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e02d      	b.n	8007338 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	; 0x24
 80072e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f84f 	bl	80073bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e02d      	b.n	80073b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2224      	movs	r2, #36	; 0x24
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f811 	bl	80073bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d108      	bne.n	80073de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073dc:	e031      	b.n	8007442 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073de:	2308      	movs	r3, #8
 80073e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073e2:	2308      	movs	r3, #8
 80073e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	0e5b      	lsrs	r3, r3, #25
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	0f5b      	lsrs	r3, r3, #29
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	7b3a      	ldrb	r2, [r7, #12]
 800740a:	4911      	ldr	r1, [pc, #68]	; (8007450 <UARTEx_SetNbDataToProcess+0x94>)
 800740c:	5c8a      	ldrb	r2, [r1, r2]
 800740e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007412:	7b3a      	ldrb	r2, [r7, #12]
 8007414:	490f      	ldr	r1, [pc, #60]	; (8007454 <UARTEx_SetNbDataToProcess+0x98>)
 8007416:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007418:	fb93 f3f2 	sdiv	r3, r3, r2
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	7b7a      	ldrb	r2, [r7, #13]
 8007428:	4909      	ldr	r1, [pc, #36]	; (8007450 <UARTEx_SetNbDataToProcess+0x94>)
 800742a:	5c8a      	ldrb	r2, [r1, r2]
 800742c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007430:	7b7a      	ldrb	r2, [r7, #13]
 8007432:	4908      	ldr	r1, [pc, #32]	; (8007454 <UARTEx_SetNbDataToProcess+0x98>)
 8007434:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007436:	fb93 f3f2 	sdiv	r3, r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007442:	bf00      	nop
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	080093c4 	.word	0x080093c4
 8007454:	080093cc 	.word	0x080093cc

08007458 <std>:
 8007458:	2300      	movs	r3, #0
 800745a:	b510      	push	{r4, lr}
 800745c:	4604      	mov	r4, r0
 800745e:	e9c0 3300 	strd	r3, r3, [r0]
 8007462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007466:	6083      	str	r3, [r0, #8]
 8007468:	8181      	strh	r1, [r0, #12]
 800746a:	6643      	str	r3, [r0, #100]	; 0x64
 800746c:	81c2      	strh	r2, [r0, #14]
 800746e:	6183      	str	r3, [r0, #24]
 8007470:	4619      	mov	r1, r3
 8007472:	2208      	movs	r2, #8
 8007474:	305c      	adds	r0, #92	; 0x5c
 8007476:	f000 f906 	bl	8007686 <memset>
 800747a:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <std+0x58>)
 800747c:	6263      	str	r3, [r4, #36]	; 0x24
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <std+0x5c>)
 8007480:	62a3      	str	r3, [r4, #40]	; 0x28
 8007482:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <std+0x60>)
 8007484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <std+0x64>)
 8007488:	6323      	str	r3, [r4, #48]	; 0x30
 800748a:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <std+0x68>)
 800748c:	6224      	str	r4, [r4, #32]
 800748e:	429c      	cmp	r4, r3
 8007490:	d006      	beq.n	80074a0 <std+0x48>
 8007492:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007496:	4294      	cmp	r4, r2
 8007498:	d002      	beq.n	80074a0 <std+0x48>
 800749a:	33d0      	adds	r3, #208	; 0xd0
 800749c:	429c      	cmp	r4, r3
 800749e:	d105      	bne.n	80074ac <std+0x54>
 80074a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a8:	f000 b966 	b.w	8007778 <__retarget_lock_init_recursive>
 80074ac:	bd10      	pop	{r4, pc}
 80074ae:	bf00      	nop
 80074b0:	08007601 	.word	0x08007601
 80074b4:	08007623 	.word	0x08007623
 80074b8:	0800765b 	.word	0x0800765b
 80074bc:	0800767f 	.word	0x0800767f
 80074c0:	20000ef4 	.word	0x20000ef4

080074c4 <stdio_exit_handler>:
 80074c4:	4a02      	ldr	r2, [pc, #8]	; (80074d0 <stdio_exit_handler+0xc>)
 80074c6:	4903      	ldr	r1, [pc, #12]	; (80074d4 <stdio_exit_handler+0x10>)
 80074c8:	4803      	ldr	r0, [pc, #12]	; (80074d8 <stdio_exit_handler+0x14>)
 80074ca:	f000 b869 	b.w	80075a0 <_fwalk_sglue>
 80074ce:	bf00      	nop
 80074d0:	20000018 	.word	0x20000018
 80074d4:	08008025 	.word	0x08008025
 80074d8:	20000024 	.word	0x20000024

080074dc <cleanup_stdio>:
 80074dc:	6841      	ldr	r1, [r0, #4]
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <cleanup_stdio+0x34>)
 80074e0:	4299      	cmp	r1, r3
 80074e2:	b510      	push	{r4, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	d001      	beq.n	80074ec <cleanup_stdio+0x10>
 80074e8:	f000 fd9c 	bl	8008024 <_fflush_r>
 80074ec:	68a1      	ldr	r1, [r4, #8]
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <cleanup_stdio+0x38>)
 80074f0:	4299      	cmp	r1, r3
 80074f2:	d002      	beq.n	80074fa <cleanup_stdio+0x1e>
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 fd95 	bl	8008024 <_fflush_r>
 80074fa:	68e1      	ldr	r1, [r4, #12]
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <cleanup_stdio+0x3c>)
 80074fe:	4299      	cmp	r1, r3
 8007500:	d004      	beq.n	800750c <cleanup_stdio+0x30>
 8007502:	4620      	mov	r0, r4
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007508:	f000 bd8c 	b.w	8008024 <_fflush_r>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	20000ef4 	.word	0x20000ef4
 8007514:	20000f5c 	.word	0x20000f5c
 8007518:	20000fc4 	.word	0x20000fc4

0800751c <global_stdio_init.part.0>:
 800751c:	b510      	push	{r4, lr}
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <global_stdio_init.part.0+0x30>)
 8007520:	4c0b      	ldr	r4, [pc, #44]	; (8007550 <global_stdio_init.part.0+0x34>)
 8007522:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <global_stdio_init.part.0+0x38>)
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	4620      	mov	r0, r4
 8007528:	2200      	movs	r2, #0
 800752a:	2104      	movs	r1, #4
 800752c:	f7ff ff94 	bl	8007458 <std>
 8007530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007534:	2201      	movs	r2, #1
 8007536:	2109      	movs	r1, #9
 8007538:	f7ff ff8e 	bl	8007458 <std>
 800753c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007540:	2202      	movs	r2, #2
 8007542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007546:	2112      	movs	r1, #18
 8007548:	f7ff bf86 	b.w	8007458 <std>
 800754c:	2000102c 	.word	0x2000102c
 8007550:	20000ef4 	.word	0x20000ef4
 8007554:	080074c5 	.word	0x080074c5

08007558 <__sfp_lock_acquire>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__sfp_lock_acquire+0x8>)
 800755a:	f000 b90e 	b.w	800777a <__retarget_lock_acquire_recursive>
 800755e:	bf00      	nop
 8007560:	20001035 	.word	0x20001035

08007564 <__sfp_lock_release>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__sfp_lock_release+0x8>)
 8007566:	f000 b909 	b.w	800777c <__retarget_lock_release_recursive>
 800756a:	bf00      	nop
 800756c:	20001035 	.word	0x20001035

08007570 <__sinit>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	f7ff fff0 	bl	8007558 <__sfp_lock_acquire>
 8007578:	6a23      	ldr	r3, [r4, #32]
 800757a:	b11b      	cbz	r3, 8007584 <__sinit+0x14>
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f7ff bff0 	b.w	8007564 <__sfp_lock_release>
 8007584:	4b04      	ldr	r3, [pc, #16]	; (8007598 <__sinit+0x28>)
 8007586:	6223      	str	r3, [r4, #32]
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <__sinit+0x2c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f5      	bne.n	800757c <__sinit+0xc>
 8007590:	f7ff ffc4 	bl	800751c <global_stdio_init.part.0>
 8007594:	e7f2      	b.n	800757c <__sinit+0xc>
 8007596:	bf00      	nop
 8007598:	080074dd 	.word	0x080074dd
 800759c:	2000102c 	.word	0x2000102c

080075a0 <_fwalk_sglue>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	4607      	mov	r7, r0
 80075a6:	4688      	mov	r8, r1
 80075a8:	4614      	mov	r4, r2
 80075aa:	2600      	movs	r6, #0
 80075ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075b0:	f1b9 0901 	subs.w	r9, r9, #1
 80075b4:	d505      	bpl.n	80075c2 <_fwalk_sglue+0x22>
 80075b6:	6824      	ldr	r4, [r4, #0]
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	d1f7      	bne.n	80075ac <_fwalk_sglue+0xc>
 80075bc:	4630      	mov	r0, r6
 80075be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d907      	bls.n	80075d8 <_fwalk_sglue+0x38>
 80075c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075cc:	3301      	adds	r3, #1
 80075ce:	d003      	beq.n	80075d8 <_fwalk_sglue+0x38>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4638      	mov	r0, r7
 80075d4:	47c0      	blx	r8
 80075d6:	4306      	orrs	r6, r0
 80075d8:	3568      	adds	r5, #104	; 0x68
 80075da:	e7e9      	b.n	80075b0 <_fwalk_sglue+0x10>

080075dc <iprintf>:
 80075dc:	b40f      	push	{r0, r1, r2, r3}
 80075de:	b507      	push	{r0, r1, r2, lr}
 80075e0:	4906      	ldr	r1, [pc, #24]	; (80075fc <iprintf+0x20>)
 80075e2:	ab04      	add	r3, sp, #16
 80075e4:	6808      	ldr	r0, [r1, #0]
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	6881      	ldr	r1, [r0, #8]
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	f000 f9e9 	bl	80079c4 <_vfiprintf_r>
 80075f2:	b003      	add	sp, #12
 80075f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f8:	b004      	add	sp, #16
 80075fa:	4770      	bx	lr
 80075fc:	20000070 	.word	0x20000070

08007600 <__sread>:
 8007600:	b510      	push	{r4, lr}
 8007602:	460c      	mov	r4, r1
 8007604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007608:	f000 f868 	bl	80076dc <_read_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	bfab      	itete	ge
 8007610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007612:	89a3      	ldrhlt	r3, [r4, #12]
 8007614:	181b      	addge	r3, r3, r0
 8007616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800761a:	bfac      	ite	ge
 800761c:	6563      	strge	r3, [r4, #84]	; 0x54
 800761e:	81a3      	strhlt	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__swrite>:
 8007622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	461f      	mov	r7, r3
 8007628:	898b      	ldrh	r3, [r1, #12]
 800762a:	05db      	lsls	r3, r3, #23
 800762c:	4605      	mov	r5, r0
 800762e:	460c      	mov	r4, r1
 8007630:	4616      	mov	r6, r2
 8007632:	d505      	bpl.n	8007640 <__swrite+0x1e>
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	2302      	movs	r3, #2
 800763a:	2200      	movs	r2, #0
 800763c:	f000 f83c 	bl	80076b8 <_lseek_r>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	4628      	mov	r0, r5
 8007652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	f000 b853 	b.w	8007700 <_write_r>

0800765a <__sseek>:
 800765a:	b510      	push	{r4, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007662:	f000 f829 	bl	80076b8 <_lseek_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	bf15      	itete	ne
 800766c:	6560      	strne	r0, [r4, #84]	; 0x54
 800766e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007676:	81a3      	strheq	r3, [r4, #12]
 8007678:	bf18      	it	ne
 800767a:	81a3      	strhne	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__sclose>:
 800767e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007682:	f000 b809 	b.w	8007698 <_close_r>

08007686 <memset>:
 8007686:	4402      	add	r2, r0
 8007688:	4603      	mov	r3, r0
 800768a:	4293      	cmp	r3, r2
 800768c:	d100      	bne.n	8007690 <memset+0xa>
 800768e:	4770      	bx	lr
 8007690:	f803 1b01 	strb.w	r1, [r3], #1
 8007694:	e7f9      	b.n	800768a <memset+0x4>
	...

08007698 <_close_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d06      	ldr	r5, [pc, #24]	; (80076b4 <_close_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7fa fbdf 	bl	8001e66 <_close>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_close_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_close_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20001030 	.word	0x20001030

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	; (80076d8 <_lseek_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7fa fbf4 	bl	8001eb4 <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20001030 	.word	0x20001030

080076dc <_read_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	; (80076fc <_read_r+0x20>)
 80076e0:	4604      	mov	r4, r0
 80076e2:	4608      	mov	r0, r1
 80076e4:	4611      	mov	r1, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7fa fb82 	bl	8001df4 <_read>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_read_r+0x1e>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_read_r+0x1e>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20001030 	.word	0x20001030

08007700 <_write_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d07      	ldr	r5, [pc, #28]	; (8007720 <_write_r+0x20>)
 8007704:	4604      	mov	r4, r0
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7fa fb8d 	bl	8001e2e <_write>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_write_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_write_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	20001030 	.word	0x20001030

08007724 <__errno>:
 8007724:	4b01      	ldr	r3, [pc, #4]	; (800772c <__errno+0x8>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000070 	.word	0x20000070

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	4d0d      	ldr	r5, [pc, #52]	; (8007768 <__libc_init_array+0x38>)
 8007734:	4c0d      	ldr	r4, [pc, #52]	; (800776c <__libc_init_array+0x3c>)
 8007736:	1b64      	subs	r4, r4, r5
 8007738:	10a4      	asrs	r4, r4, #2
 800773a:	2600      	movs	r6, #0
 800773c:	42a6      	cmp	r6, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	4d0b      	ldr	r5, [pc, #44]	; (8007770 <__libc_init_array+0x40>)
 8007742:	4c0c      	ldr	r4, [pc, #48]	; (8007774 <__libc_init_array+0x44>)
 8007744:	f001 fe00 	bl	8009348 <_init>
 8007748:	1b64      	subs	r4, r4, r5
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	2600      	movs	r6, #0
 800774e:	42a6      	cmp	r6, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f855 3b04 	ldr.w	r3, [r5], #4
 8007758:	4798      	blx	r3
 800775a:	3601      	adds	r6, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007762:	4798      	blx	r3
 8007764:	3601      	adds	r6, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	080095e8 	.word	0x080095e8
 800776c:	080095e8 	.word	0x080095e8
 8007770:	080095e8 	.word	0x080095e8
 8007774:	080095ec 	.word	0x080095ec

08007778 <__retarget_lock_init_recursive>:
 8007778:	4770      	bx	lr

0800777a <__retarget_lock_acquire_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_release_recursive>:
 800777c:	4770      	bx	lr
	...

08007780 <_free_r>:
 8007780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007782:	2900      	cmp	r1, #0
 8007784:	d044      	beq.n	8007810 <_free_r+0x90>
 8007786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778a:	9001      	str	r0, [sp, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f1a1 0404 	sub.w	r4, r1, #4
 8007792:	bfb8      	it	lt
 8007794:	18e4      	addlt	r4, r4, r3
 8007796:	f000 f8df 	bl	8007958 <__malloc_lock>
 800779a:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <_free_r+0x94>)
 800779c:	9801      	ldr	r0, [sp, #4]
 800779e:	6813      	ldr	r3, [r2, #0]
 80077a0:	b933      	cbnz	r3, 80077b0 <_free_r+0x30>
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	6014      	str	r4, [r2, #0]
 80077a6:	b003      	add	sp, #12
 80077a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077ac:	f000 b8da 	b.w	8007964 <__malloc_unlock>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d908      	bls.n	80077c6 <_free_r+0x46>
 80077b4:	6825      	ldr	r5, [r4, #0]
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf01      	itttt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	1949      	addeq	r1, r1, r5
 80077c2:	6021      	streq	r1, [r4, #0]
 80077c4:	e7ed      	b.n	80077a2 <_free_r+0x22>
 80077c6:	461a      	mov	r2, r3
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	b10b      	cbz	r3, 80077d0 <_free_r+0x50>
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	d9fa      	bls.n	80077c6 <_free_r+0x46>
 80077d0:	6811      	ldr	r1, [r2, #0]
 80077d2:	1855      	adds	r5, r2, r1
 80077d4:	42a5      	cmp	r5, r4
 80077d6:	d10b      	bne.n	80077f0 <_free_r+0x70>
 80077d8:	6824      	ldr	r4, [r4, #0]
 80077da:	4421      	add	r1, r4
 80077dc:	1854      	adds	r4, r2, r1
 80077de:	42a3      	cmp	r3, r4
 80077e0:	6011      	str	r1, [r2, #0]
 80077e2:	d1e0      	bne.n	80077a6 <_free_r+0x26>
 80077e4:	681c      	ldr	r4, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	6053      	str	r3, [r2, #4]
 80077ea:	440c      	add	r4, r1
 80077ec:	6014      	str	r4, [r2, #0]
 80077ee:	e7da      	b.n	80077a6 <_free_r+0x26>
 80077f0:	d902      	bls.n	80077f8 <_free_r+0x78>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	e7d6      	b.n	80077a6 <_free_r+0x26>
 80077f8:	6825      	ldr	r5, [r4, #0]
 80077fa:	1961      	adds	r1, r4, r5
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf04      	itt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	6063      	str	r3, [r4, #4]
 8007806:	bf04      	itt	eq
 8007808:	1949      	addeq	r1, r1, r5
 800780a:	6021      	streq	r1, [r4, #0]
 800780c:	6054      	str	r4, [r2, #4]
 800780e:	e7ca      	b.n	80077a6 <_free_r+0x26>
 8007810:	b003      	add	sp, #12
 8007812:	bd30      	pop	{r4, r5, pc}
 8007814:	20001038 	.word	0x20001038

08007818 <sbrk_aligned>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4e0e      	ldr	r6, [pc, #56]	; (8007854 <sbrk_aligned+0x3c>)
 800781c:	460c      	mov	r4, r1
 800781e:	6831      	ldr	r1, [r6, #0]
 8007820:	4605      	mov	r5, r0
 8007822:	b911      	cbnz	r1, 800782a <sbrk_aligned+0x12>
 8007824:	f000 fcbc 	bl	80081a0 <_sbrk_r>
 8007828:	6030      	str	r0, [r6, #0]
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f000 fcb7 	bl	80081a0 <_sbrk_r>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d00a      	beq.n	800784c <sbrk_aligned+0x34>
 8007836:	1cc4      	adds	r4, r0, #3
 8007838:	f024 0403 	bic.w	r4, r4, #3
 800783c:	42a0      	cmp	r0, r4
 800783e:	d007      	beq.n	8007850 <sbrk_aligned+0x38>
 8007840:	1a21      	subs	r1, r4, r0
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fcac 	bl	80081a0 <_sbrk_r>
 8007848:	3001      	adds	r0, #1
 800784a:	d101      	bne.n	8007850 <sbrk_aligned+0x38>
 800784c:	f04f 34ff 	mov.w	r4, #4294967295
 8007850:	4620      	mov	r0, r4
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	2000103c 	.word	0x2000103c

08007858 <_malloc_r>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	1ccd      	adds	r5, r1, #3
 800785e:	f025 0503 	bic.w	r5, r5, #3
 8007862:	3508      	adds	r5, #8
 8007864:	2d0c      	cmp	r5, #12
 8007866:	bf38      	it	cc
 8007868:	250c      	movcc	r5, #12
 800786a:	2d00      	cmp	r5, #0
 800786c:	4607      	mov	r7, r0
 800786e:	db01      	blt.n	8007874 <_malloc_r+0x1c>
 8007870:	42a9      	cmp	r1, r5
 8007872:	d905      	bls.n	8007880 <_malloc_r+0x28>
 8007874:	230c      	movs	r3, #12
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	2600      	movs	r6, #0
 800787a:	4630      	mov	r0, r6
 800787c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007880:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007954 <_malloc_r+0xfc>
 8007884:	f000 f868 	bl	8007958 <__malloc_lock>
 8007888:	f8d8 3000 	ldr.w	r3, [r8]
 800788c:	461c      	mov	r4, r3
 800788e:	bb5c      	cbnz	r4, 80078e8 <_malloc_r+0x90>
 8007890:	4629      	mov	r1, r5
 8007892:	4638      	mov	r0, r7
 8007894:	f7ff ffc0 	bl	8007818 <sbrk_aligned>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	4604      	mov	r4, r0
 800789c:	d155      	bne.n	800794a <_malloc_r+0xf2>
 800789e:	f8d8 4000 	ldr.w	r4, [r8]
 80078a2:	4626      	mov	r6, r4
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	d145      	bne.n	8007934 <_malloc_r+0xdc>
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	d048      	beq.n	800793e <_malloc_r+0xe6>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	4631      	mov	r1, r6
 80078b0:	4638      	mov	r0, r7
 80078b2:	eb04 0903 	add.w	r9, r4, r3
 80078b6:	f000 fc73 	bl	80081a0 <_sbrk_r>
 80078ba:	4581      	cmp	r9, r0
 80078bc:	d13f      	bne.n	800793e <_malloc_r+0xe6>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	1a6d      	subs	r5, r5, r1
 80078c2:	4629      	mov	r1, r5
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff ffa7 	bl	8007818 <sbrk_aligned>
 80078ca:	3001      	adds	r0, #1
 80078cc:	d037      	beq.n	800793e <_malloc_r+0xe6>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	442b      	add	r3, r5
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	f8d8 3000 	ldr.w	r3, [r8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d038      	beq.n	800794e <_malloc_r+0xf6>
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	42a2      	cmp	r2, r4
 80078e0:	d12b      	bne.n	800793a <_malloc_r+0xe2>
 80078e2:	2200      	movs	r2, #0
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	e00f      	b.n	8007908 <_malloc_r+0xb0>
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	1b52      	subs	r2, r2, r5
 80078ec:	d41f      	bmi.n	800792e <_malloc_r+0xd6>
 80078ee:	2a0b      	cmp	r2, #11
 80078f0:	d917      	bls.n	8007922 <_malloc_r+0xca>
 80078f2:	1961      	adds	r1, r4, r5
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	6025      	str	r5, [r4, #0]
 80078f8:	bf18      	it	ne
 80078fa:	6059      	strne	r1, [r3, #4]
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	bf08      	it	eq
 8007900:	f8c8 1000 	streq.w	r1, [r8]
 8007904:	5162      	str	r2, [r4, r5]
 8007906:	604b      	str	r3, [r1, #4]
 8007908:	4638      	mov	r0, r7
 800790a:	f104 060b 	add.w	r6, r4, #11
 800790e:	f000 f829 	bl	8007964 <__malloc_unlock>
 8007912:	f026 0607 	bic.w	r6, r6, #7
 8007916:	1d23      	adds	r3, r4, #4
 8007918:	1af2      	subs	r2, r6, r3
 800791a:	d0ae      	beq.n	800787a <_malloc_r+0x22>
 800791c:	1b9b      	subs	r3, r3, r6
 800791e:	50a3      	str	r3, [r4, r2]
 8007920:	e7ab      	b.n	800787a <_malloc_r+0x22>
 8007922:	42a3      	cmp	r3, r4
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	d1dd      	bne.n	80078e4 <_malloc_r+0x8c>
 8007928:	f8c8 2000 	str.w	r2, [r8]
 800792c:	e7ec      	b.n	8007908 <_malloc_r+0xb0>
 800792e:	4623      	mov	r3, r4
 8007930:	6864      	ldr	r4, [r4, #4]
 8007932:	e7ac      	b.n	800788e <_malloc_r+0x36>
 8007934:	4634      	mov	r4, r6
 8007936:	6876      	ldr	r6, [r6, #4]
 8007938:	e7b4      	b.n	80078a4 <_malloc_r+0x4c>
 800793a:	4613      	mov	r3, r2
 800793c:	e7cc      	b.n	80078d8 <_malloc_r+0x80>
 800793e:	230c      	movs	r3, #12
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4638      	mov	r0, r7
 8007944:	f000 f80e 	bl	8007964 <__malloc_unlock>
 8007948:	e797      	b.n	800787a <_malloc_r+0x22>
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	e7dc      	b.n	8007908 <_malloc_r+0xb0>
 800794e:	605b      	str	r3, [r3, #4]
 8007950:	deff      	udf	#255	; 0xff
 8007952:	bf00      	nop
 8007954:	20001038 	.word	0x20001038

08007958 <__malloc_lock>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__malloc_lock+0x8>)
 800795a:	f7ff bf0e 	b.w	800777a <__retarget_lock_acquire_recursive>
 800795e:	bf00      	nop
 8007960:	20001034 	.word	0x20001034

08007964 <__malloc_unlock>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__malloc_unlock+0x8>)
 8007966:	f7ff bf09 	b.w	800777c <__retarget_lock_release_recursive>
 800796a:	bf00      	nop
 800796c:	20001034 	.word	0x20001034

08007970 <__sfputc_r>:
 8007970:	6893      	ldr	r3, [r2, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	b410      	push	{r4}
 8007978:	6093      	str	r3, [r2, #8]
 800797a:	da08      	bge.n	800798e <__sfputc_r+0x1e>
 800797c:	6994      	ldr	r4, [r2, #24]
 800797e:	42a3      	cmp	r3, r4
 8007980:	db01      	blt.n	8007986 <__sfputc_r+0x16>
 8007982:	290a      	cmp	r1, #10
 8007984:	d103      	bne.n	800798e <__sfputc_r+0x1e>
 8007986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800798a:	f000 bb73 	b.w	8008074 <__swbuf_r>
 800798e:	6813      	ldr	r3, [r2, #0]
 8007990:	1c58      	adds	r0, r3, #1
 8007992:	6010      	str	r0, [r2, #0]
 8007994:	7019      	strb	r1, [r3, #0]
 8007996:	4608      	mov	r0, r1
 8007998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800799c:	4770      	bx	lr

0800799e <__sfputs_r>:
 800799e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	4614      	mov	r4, r2
 80079a6:	18d5      	adds	r5, r2, r3
 80079a8:	42ac      	cmp	r4, r5
 80079aa:	d101      	bne.n	80079b0 <__sfputs_r+0x12>
 80079ac:	2000      	movs	r0, #0
 80079ae:	e007      	b.n	80079c0 <__sfputs_r+0x22>
 80079b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b4:	463a      	mov	r2, r7
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ffda 	bl	8007970 <__sfputc_r>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d1f3      	bne.n	80079a8 <__sfputs_r+0xa>
 80079c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c4 <_vfiprintf_r>:
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	460d      	mov	r5, r1
 80079ca:	b09d      	sub	sp, #116	; 0x74
 80079cc:	4614      	mov	r4, r2
 80079ce:	4698      	mov	r8, r3
 80079d0:	4606      	mov	r6, r0
 80079d2:	b118      	cbz	r0, 80079dc <_vfiprintf_r+0x18>
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b90b      	cbnz	r3, 80079dc <_vfiprintf_r+0x18>
 80079d8:	f7ff fdca 	bl	8007570 <__sinit>
 80079dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_vfiprintf_r+0x2a>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_vfiprintf_r+0x2a>
 80079e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ea:	f7ff fec6 	bl	800777a <__retarget_lock_acquire_recursive>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	071b      	lsls	r3, r3, #28
 80079f2:	d501      	bpl.n	80079f8 <_vfiprintf_r+0x34>
 80079f4:	692b      	ldr	r3, [r5, #16]
 80079f6:	b99b      	cbnz	r3, 8007a20 <_vfiprintf_r+0x5c>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f000 fb78 	bl	80080f0 <__swsetup_r>
 8007a00:	b170      	cbz	r0, 8007a20 <_vfiprintf_r+0x5c>
 8007a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a04:	07dc      	lsls	r4, r3, #31
 8007a06:	d504      	bpl.n	8007a12 <_vfiprintf_r+0x4e>
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	b01d      	add	sp, #116	; 0x74
 8007a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d4f7      	bmi.n	8007a08 <_vfiprintf_r+0x44>
 8007a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1a:	f7ff feaf 	bl	800777c <__retarget_lock_release_recursive>
 8007a1e:	e7f3      	b.n	8007a08 <_vfiprintf_r+0x44>
 8007a20:	2300      	movs	r3, #0
 8007a22:	9309      	str	r3, [sp, #36]	; 0x24
 8007a24:	2320      	movs	r3, #32
 8007a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2e:	2330      	movs	r3, #48	; 0x30
 8007a30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007be4 <_vfiprintf_r+0x220>
 8007a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a38:	f04f 0901 	mov.w	r9, #1
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	469a      	mov	sl, r3
 8007a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a44:	b10a      	cbz	r2, 8007a4a <_vfiprintf_r+0x86>
 8007a46:	2a25      	cmp	r2, #37	; 0x25
 8007a48:	d1f9      	bne.n	8007a3e <_vfiprintf_r+0x7a>
 8007a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4e:	d00b      	beq.n	8007a68 <_vfiprintf_r+0xa4>
 8007a50:	465b      	mov	r3, fp
 8007a52:	4622      	mov	r2, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ffa1 	bl	800799e <__sfputs_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f000 80a9 	beq.w	8007bb4 <_vfiprintf_r+0x1f0>
 8007a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a64:	445a      	add	r2, fp
 8007a66:	9209      	str	r2, [sp, #36]	; 0x24
 8007a68:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80a1 	beq.w	8007bb4 <_vfiprintf_r+0x1f0>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7c:	f10a 0a01 	add.w	sl, sl, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a88:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8a:	4654      	mov	r4, sl
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a92:	4854      	ldr	r0, [pc, #336]	; (8007be4 <_vfiprintf_r+0x220>)
 8007a94:	f7f8 fbc4 	bl	8000220 <memchr>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	b9d8      	cbnz	r0, 8007ad4 <_vfiprintf_r+0x110>
 8007a9c:	06d1      	lsls	r1, r2, #27
 8007a9e:	bf44      	itt	mi
 8007aa0:	2320      	movmi	r3, #32
 8007aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa6:	0713      	lsls	r3, r2, #28
 8007aa8:	bf44      	itt	mi
 8007aaa:	232b      	movmi	r3, #43	; 0x2b
 8007aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab6:	d015      	beq.n	8007ae4 <_vfiprintf_r+0x120>
 8007ab8:	9a07      	ldr	r2, [sp, #28]
 8007aba:	4654      	mov	r4, sl
 8007abc:	2000      	movs	r0, #0
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	; 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94d      	bls.n	8007b6a <_vfiprintf_r+0x1a6>
 8007ace:	b1b0      	cbz	r0, 8007afe <_vfiprintf_r+0x13a>
 8007ad0:	9207      	str	r2, [sp, #28]
 8007ad2:	e014      	b.n	8007afe <_vfiprintf_r+0x13a>
 8007ad4:	eba0 0308 	sub.w	r3, r0, r8
 8007ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	46a2      	mov	sl, r4
 8007ae2:	e7d2      	b.n	8007a8a <_vfiprintf_r+0xc6>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1d19      	adds	r1, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	425b      	neglt	r3, r3
 8007af2:	f042 0202 	orrlt.w	r2, r2, #2
 8007af6:	9307      	strge	r3, [sp, #28]
 8007af8:	9307      	strlt	r3, [sp, #28]
 8007afa:	bfb8      	it	lt
 8007afc:	9204      	strlt	r2, [sp, #16]
 8007afe:	7823      	ldrb	r3, [r4, #0]
 8007b00:	2b2e      	cmp	r3, #46	; 0x2e
 8007b02:	d10c      	bne.n	8007b1e <_vfiprintf_r+0x15a>
 8007b04:	7863      	ldrb	r3, [r4, #1]
 8007b06:	2b2a      	cmp	r3, #42	; 0x2a
 8007b08:	d134      	bne.n	8007b74 <_vfiprintf_r+0x1b0>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfb8      	it	lt
 8007b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1a:	3402      	adds	r4, #2
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bf4 <_vfiprintf_r+0x230>
 8007b22:	7821      	ldrb	r1, [r4, #0]
 8007b24:	2203      	movs	r2, #3
 8007b26:	4650      	mov	r0, sl
 8007b28:	f7f8 fb7a 	bl	8000220 <memchr>
 8007b2c:	b138      	cbz	r0, 8007b3e <_vfiprintf_r+0x17a>
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	eba0 000a 	sub.w	r0, r0, sl
 8007b34:	2240      	movs	r2, #64	; 0x40
 8007b36:	4082      	lsls	r2, r0
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	3401      	adds	r4, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b42:	4829      	ldr	r0, [pc, #164]	; (8007be8 <_vfiprintf_r+0x224>)
 8007b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b48:	2206      	movs	r2, #6
 8007b4a:	f7f8 fb69 	bl	8000220 <memchr>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d03f      	beq.n	8007bd2 <_vfiprintf_r+0x20e>
 8007b52:	4b26      	ldr	r3, [pc, #152]	; (8007bec <_vfiprintf_r+0x228>)
 8007b54:	bb1b      	cbnz	r3, 8007b9e <_vfiprintf_r+0x1da>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	3308      	adds	r3, #8
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	443b      	add	r3, r7
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	e768      	b.n	8007a3c <_vfiprintf_r+0x78>
 8007b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6e:	460c      	mov	r4, r1
 8007b70:	2001      	movs	r0, #1
 8007b72:	e7a6      	b.n	8007ac2 <_vfiprintf_r+0xfe>
 8007b74:	2300      	movs	r3, #0
 8007b76:	3401      	adds	r4, #1
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f04f 0c0a 	mov.w	ip, #10
 8007b80:	4620      	mov	r0, r4
 8007b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b86:	3a30      	subs	r2, #48	; 0x30
 8007b88:	2a09      	cmp	r2, #9
 8007b8a:	d903      	bls.n	8007b94 <_vfiprintf_r+0x1d0>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0c6      	beq.n	8007b1e <_vfiprintf_r+0x15a>
 8007b90:	9105      	str	r1, [sp, #20]
 8007b92:	e7c4      	b.n	8007b1e <_vfiprintf_r+0x15a>
 8007b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b98:	4604      	mov	r4, r0
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7f0      	b.n	8007b80 <_vfiprintf_r+0x1bc>
 8007b9e:	ab03      	add	r3, sp, #12
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <_vfiprintf_r+0x22c>)
 8007ba6:	a904      	add	r1, sp, #16
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f3af 8000 	nop.w
 8007bae:	4607      	mov	r7, r0
 8007bb0:	1c78      	adds	r0, r7, #1
 8007bb2:	d1d6      	bne.n	8007b62 <_vfiprintf_r+0x19e>
 8007bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb6:	07d9      	lsls	r1, r3, #31
 8007bb8:	d405      	bmi.n	8007bc6 <_vfiprintf_r+0x202>
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	059a      	lsls	r2, r3, #22
 8007bbe:	d402      	bmi.n	8007bc6 <_vfiprintf_r+0x202>
 8007bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc2:	f7ff fddb 	bl	800777c <__retarget_lock_release_recursive>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	065b      	lsls	r3, r3, #25
 8007bca:	f53f af1d 	bmi.w	8007a08 <_vfiprintf_r+0x44>
 8007bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd0:	e71c      	b.n	8007a0c <_vfiprintf_r+0x48>
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <_vfiprintf_r+0x22c>)
 8007bda:	a904      	add	r1, sp, #16
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f879 	bl	8007cd4 <_printf_i>
 8007be2:	e7e4      	b.n	8007bae <_vfiprintf_r+0x1ea>
 8007be4:	080093d4 	.word	0x080093d4
 8007be8:	080093de 	.word	0x080093de
 8007bec:	00000000 	.word	0x00000000
 8007bf0:	0800799f 	.word	0x0800799f
 8007bf4:	080093da 	.word	0x080093da

08007bf8 <_printf_common>:
 8007bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	4699      	mov	r9, r3
 8007c00:	688a      	ldr	r2, [r1, #8]
 8007c02:	690b      	ldr	r3, [r1, #16]
 8007c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	bfb8      	it	lt
 8007c0c:	4613      	movlt	r3, r2
 8007c0e:	6033      	str	r3, [r6, #0]
 8007c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c14:	4607      	mov	r7, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	b10a      	cbz	r2, 8007c1e <_printf_common+0x26>
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	6033      	str	r3, [r6, #0]
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	0699      	lsls	r1, r3, #26
 8007c22:	bf42      	ittt	mi
 8007c24:	6833      	ldrmi	r3, [r6, #0]
 8007c26:	3302      	addmi	r3, #2
 8007c28:	6033      	strmi	r3, [r6, #0]
 8007c2a:	6825      	ldr	r5, [r4, #0]
 8007c2c:	f015 0506 	ands.w	r5, r5, #6
 8007c30:	d106      	bne.n	8007c40 <_printf_common+0x48>
 8007c32:	f104 0a19 	add.w	sl, r4, #25
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	6832      	ldr	r2, [r6, #0]
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	dc26      	bgt.n	8007c8e <_printf_common+0x96>
 8007c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c44:	1e13      	subs	r3, r2, #0
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	bf18      	it	ne
 8007c4a:	2301      	movne	r3, #1
 8007c4c:	0692      	lsls	r2, r2, #26
 8007c4e:	d42b      	bmi.n	8007ca8 <_printf_common+0xb0>
 8007c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c54:	4649      	mov	r1, r9
 8007c56:	4638      	mov	r0, r7
 8007c58:	47c0      	blx	r8
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d01e      	beq.n	8007c9c <_printf_common+0xa4>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	6922      	ldr	r2, [r4, #16]
 8007c62:	f003 0306 	and.w	r3, r3, #6
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	bf02      	ittt	eq
 8007c6a:	68e5      	ldreq	r5, [r4, #12]
 8007c6c:	6833      	ldreq	r3, [r6, #0]
 8007c6e:	1aed      	subeq	r5, r5, r3
 8007c70:	68a3      	ldr	r3, [r4, #8]
 8007c72:	bf0c      	ite	eq
 8007c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c78:	2500      	movne	r5, #0
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	bfc4      	itt	gt
 8007c7e:	1a9b      	subgt	r3, r3, r2
 8007c80:	18ed      	addgt	r5, r5, r3
 8007c82:	2600      	movs	r6, #0
 8007c84:	341a      	adds	r4, #26
 8007c86:	42b5      	cmp	r5, r6
 8007c88:	d11a      	bne.n	8007cc0 <_printf_common+0xc8>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e008      	b.n	8007ca0 <_printf_common+0xa8>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4652      	mov	r2, sl
 8007c92:	4649      	mov	r1, r9
 8007c94:	4638      	mov	r0, r7
 8007c96:	47c0      	blx	r8
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d103      	bne.n	8007ca4 <_printf_common+0xac>
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	e7c6      	b.n	8007c36 <_printf_common+0x3e>
 8007ca8:	18e1      	adds	r1, r4, r3
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	2030      	movs	r0, #48	; 0x30
 8007cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cb2:	4422      	add	r2, r4
 8007cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	e7c7      	b.n	8007c50 <_printf_common+0x58>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	47c0      	blx	r8
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d0e6      	beq.n	8007c9c <_printf_common+0xa4>
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7d9      	b.n	8007c86 <_printf_common+0x8e>
	...

08007cd4 <_printf_i>:
 8007cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	7e0f      	ldrb	r7, [r1, #24]
 8007cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cdc:	2f78      	cmp	r7, #120	; 0x78
 8007cde:	4691      	mov	r9, r2
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	469a      	mov	sl, r3
 8007ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cea:	d807      	bhi.n	8007cfc <_printf_i+0x28>
 8007cec:	2f62      	cmp	r7, #98	; 0x62
 8007cee:	d80a      	bhi.n	8007d06 <_printf_i+0x32>
 8007cf0:	2f00      	cmp	r7, #0
 8007cf2:	f000 80d4 	beq.w	8007e9e <_printf_i+0x1ca>
 8007cf6:	2f58      	cmp	r7, #88	; 0x58
 8007cf8:	f000 80c0 	beq.w	8007e7c <_printf_i+0x1a8>
 8007cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d04:	e03a      	b.n	8007d7c <_printf_i+0xa8>
 8007d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d0a:	2b15      	cmp	r3, #21
 8007d0c:	d8f6      	bhi.n	8007cfc <_printf_i+0x28>
 8007d0e:	a101      	add	r1, pc, #4	; (adr r1, 8007d14 <_printf_i+0x40>)
 8007d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d14:	08007d6d 	.word	0x08007d6d
 8007d18:	08007d81 	.word	0x08007d81
 8007d1c:	08007cfd 	.word	0x08007cfd
 8007d20:	08007cfd 	.word	0x08007cfd
 8007d24:	08007cfd 	.word	0x08007cfd
 8007d28:	08007cfd 	.word	0x08007cfd
 8007d2c:	08007d81 	.word	0x08007d81
 8007d30:	08007cfd 	.word	0x08007cfd
 8007d34:	08007cfd 	.word	0x08007cfd
 8007d38:	08007cfd 	.word	0x08007cfd
 8007d3c:	08007cfd 	.word	0x08007cfd
 8007d40:	08007e85 	.word	0x08007e85
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007e3f 	.word	0x08007e3f
 8007d4c:	08007cfd 	.word	0x08007cfd
 8007d50:	08007cfd 	.word	0x08007cfd
 8007d54:	08007ea7 	.word	0x08007ea7
 8007d58:	08007cfd 	.word	0x08007cfd
 8007d5c:	08007dad 	.word	0x08007dad
 8007d60:	08007cfd 	.word	0x08007cfd
 8007d64:	08007cfd 	.word	0x08007cfd
 8007d68:	08007e47 	.word	0x08007e47
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	1d1a      	adds	r2, r3, #4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	602a      	str	r2, [r5, #0]
 8007d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e09f      	b.n	8007ec0 <_printf_i+0x1ec>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	0607      	lsls	r7, r0, #24
 8007d86:	f103 0104 	add.w	r1, r3, #4
 8007d8a:	6029      	str	r1, [r5, #0]
 8007d8c:	d501      	bpl.n	8007d92 <_printf_i+0xbe>
 8007d8e:	681e      	ldr	r6, [r3, #0]
 8007d90:	e003      	b.n	8007d9a <_printf_i+0xc6>
 8007d92:	0646      	lsls	r6, r0, #25
 8007d94:	d5fb      	bpl.n	8007d8e <_printf_i+0xba>
 8007d96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d9a:	2e00      	cmp	r6, #0
 8007d9c:	da03      	bge.n	8007da6 <_printf_i+0xd2>
 8007d9e:	232d      	movs	r3, #45	; 0x2d
 8007da0:	4276      	negs	r6, r6
 8007da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da6:	485a      	ldr	r0, [pc, #360]	; (8007f10 <_printf_i+0x23c>)
 8007da8:	230a      	movs	r3, #10
 8007daa:	e012      	b.n	8007dd2 <_printf_i+0xfe>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	6820      	ldr	r0, [r4, #0]
 8007db0:	1d19      	adds	r1, r3, #4
 8007db2:	6029      	str	r1, [r5, #0]
 8007db4:	0605      	lsls	r5, r0, #24
 8007db6:	d501      	bpl.n	8007dbc <_printf_i+0xe8>
 8007db8:	681e      	ldr	r6, [r3, #0]
 8007dba:	e002      	b.n	8007dc2 <_printf_i+0xee>
 8007dbc:	0641      	lsls	r1, r0, #25
 8007dbe:	d5fb      	bpl.n	8007db8 <_printf_i+0xe4>
 8007dc0:	881e      	ldrh	r6, [r3, #0]
 8007dc2:	4853      	ldr	r0, [pc, #332]	; (8007f10 <_printf_i+0x23c>)
 8007dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2308      	moveq	r3, #8
 8007dca:	230a      	movne	r3, #10
 8007dcc:	2100      	movs	r1, #0
 8007dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dd2:	6865      	ldr	r5, [r4, #4]
 8007dd4:	60a5      	str	r5, [r4, #8]
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	bfa2      	ittt	ge
 8007dda:	6821      	ldrge	r1, [r4, #0]
 8007ddc:	f021 0104 	bicge.w	r1, r1, #4
 8007de0:	6021      	strge	r1, [r4, #0]
 8007de2:	b90e      	cbnz	r6, 8007de8 <_printf_i+0x114>
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	d04b      	beq.n	8007e80 <_printf_i+0x1ac>
 8007de8:	4615      	mov	r5, r2
 8007dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dee:	fb03 6711 	mls	r7, r3, r1, r6
 8007df2:	5dc7      	ldrb	r7, [r0, r7]
 8007df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007df8:	4637      	mov	r7, r6
 8007dfa:	42bb      	cmp	r3, r7
 8007dfc:	460e      	mov	r6, r1
 8007dfe:	d9f4      	bls.n	8007dea <_printf_i+0x116>
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d10b      	bne.n	8007e1c <_printf_i+0x148>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	07de      	lsls	r6, r3, #31
 8007e08:	d508      	bpl.n	8007e1c <_printf_i+0x148>
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	6861      	ldr	r1, [r4, #4]
 8007e0e:	4299      	cmp	r1, r3
 8007e10:	bfde      	ittt	le
 8007e12:	2330      	movle	r3, #48	; 0x30
 8007e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e1c:	1b52      	subs	r2, r2, r5
 8007e1e:	6122      	str	r2, [r4, #16]
 8007e20:	f8cd a000 	str.w	sl, [sp]
 8007e24:	464b      	mov	r3, r9
 8007e26:	aa03      	add	r2, sp, #12
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	f7ff fee4 	bl	8007bf8 <_printf_common>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d14a      	bne.n	8007eca <_printf_i+0x1f6>
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	b004      	add	sp, #16
 8007e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f043 0320 	orr.w	r3, r3, #32
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	4833      	ldr	r0, [pc, #204]	; (8007f14 <_printf_i+0x240>)
 8007e48:	2778      	movs	r7, #120	; 0x78
 8007e4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	061f      	lsls	r7, r3, #24
 8007e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e58:	d402      	bmi.n	8007e60 <_printf_i+0x18c>
 8007e5a:	065f      	lsls	r7, r3, #25
 8007e5c:	bf48      	it	mi
 8007e5e:	b2b6      	uxthmi	r6, r6
 8007e60:	07df      	lsls	r7, r3, #31
 8007e62:	bf48      	it	mi
 8007e64:	f043 0320 	orrmi.w	r3, r3, #32
 8007e68:	6029      	str	r1, [r5, #0]
 8007e6a:	bf48      	it	mi
 8007e6c:	6023      	strmi	r3, [r4, #0]
 8007e6e:	b91e      	cbnz	r6, 8007e78 <_printf_i+0x1a4>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	f023 0320 	bic.w	r3, r3, #32
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	2310      	movs	r3, #16
 8007e7a:	e7a7      	b.n	8007dcc <_printf_i+0xf8>
 8007e7c:	4824      	ldr	r0, [pc, #144]	; (8007f10 <_printf_i+0x23c>)
 8007e7e:	e7e4      	b.n	8007e4a <_printf_i+0x176>
 8007e80:	4615      	mov	r5, r2
 8007e82:	e7bd      	b.n	8007e00 <_printf_i+0x12c>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	6826      	ldr	r6, [r4, #0]
 8007e88:	6961      	ldr	r1, [r4, #20]
 8007e8a:	1d18      	adds	r0, r3, #4
 8007e8c:	6028      	str	r0, [r5, #0]
 8007e8e:	0635      	lsls	r5, r6, #24
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	d501      	bpl.n	8007e98 <_printf_i+0x1c4>
 8007e94:	6019      	str	r1, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <_printf_i+0x1ca>
 8007e98:	0670      	lsls	r0, r6, #25
 8007e9a:	d5fb      	bpl.n	8007e94 <_printf_i+0x1c0>
 8007e9c:	8019      	strh	r1, [r3, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6123      	str	r3, [r4, #16]
 8007ea2:	4615      	mov	r5, r2
 8007ea4:	e7bc      	b.n	8007e20 <_printf_i+0x14c>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	602a      	str	r2, [r5, #0]
 8007eac:	681d      	ldr	r5, [r3, #0]
 8007eae:	6862      	ldr	r2, [r4, #4]
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f7f8 f9b4 	bl	8000220 <memchr>
 8007eb8:	b108      	cbz	r0, 8007ebe <_printf_i+0x1ea>
 8007eba:	1b40      	subs	r0, r0, r5
 8007ebc:	6060      	str	r0, [r4, #4]
 8007ebe:	6863      	ldr	r3, [r4, #4]
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec8:	e7aa      	b.n	8007e20 <_printf_i+0x14c>
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	462a      	mov	r2, r5
 8007ece:	4649      	mov	r1, r9
 8007ed0:	4640      	mov	r0, r8
 8007ed2:	47d0      	blx	sl
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d0ad      	beq.n	8007e34 <_printf_i+0x160>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	079b      	lsls	r3, r3, #30
 8007edc:	d413      	bmi.n	8007f06 <_printf_i+0x232>
 8007ede:	68e0      	ldr	r0, [r4, #12]
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	4298      	cmp	r0, r3
 8007ee4:	bfb8      	it	lt
 8007ee6:	4618      	movlt	r0, r3
 8007ee8:	e7a6      	b.n	8007e38 <_printf_i+0x164>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4632      	mov	r2, r6
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	47d0      	blx	sl
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d09d      	beq.n	8007e34 <_printf_i+0x160>
 8007ef8:	3501      	adds	r5, #1
 8007efa:	68e3      	ldr	r3, [r4, #12]
 8007efc:	9903      	ldr	r1, [sp, #12]
 8007efe:	1a5b      	subs	r3, r3, r1
 8007f00:	42ab      	cmp	r3, r5
 8007f02:	dcf2      	bgt.n	8007eea <_printf_i+0x216>
 8007f04:	e7eb      	b.n	8007ede <_printf_i+0x20a>
 8007f06:	2500      	movs	r5, #0
 8007f08:	f104 0619 	add.w	r6, r4, #25
 8007f0c:	e7f5      	b.n	8007efa <_printf_i+0x226>
 8007f0e:	bf00      	nop
 8007f10:	080093e5 	.word	0x080093e5
 8007f14:	080093f6 	.word	0x080093f6

08007f18 <__sflush_r>:
 8007f18:	898a      	ldrh	r2, [r1, #12]
 8007f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	4605      	mov	r5, r0
 8007f20:	0710      	lsls	r0, r2, #28
 8007f22:	460c      	mov	r4, r1
 8007f24:	d458      	bmi.n	8007fd8 <__sflush_r+0xc0>
 8007f26:	684b      	ldr	r3, [r1, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc05      	bgt.n	8007f38 <__sflush_r+0x20>
 8007f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dc02      	bgt.n	8007f38 <__sflush_r+0x20>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	d0f9      	beq.n	8007f32 <__sflush_r+0x1a>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f44:	682f      	ldr	r7, [r5, #0]
 8007f46:	6a21      	ldr	r1, [r4, #32]
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	d032      	beq.n	8007fb2 <__sflush_r+0x9a>
 8007f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	075a      	lsls	r2, r3, #29
 8007f52:	d505      	bpl.n	8007f60 <__sflush_r+0x48>
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	1ac0      	subs	r0, r0, r3
 8007f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f5a:	b10b      	cbz	r3, 8007f60 <__sflush_r+0x48>
 8007f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5e:	1ac0      	subs	r0, r0, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	4602      	mov	r2, r0
 8007f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f66:	6a21      	ldr	r1, [r4, #32]
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b0      	blx	r6
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	d106      	bne.n	8007f80 <__sflush_r+0x68>
 8007f72:	6829      	ldr	r1, [r5, #0]
 8007f74:	291d      	cmp	r1, #29
 8007f76:	d82b      	bhi.n	8007fd0 <__sflush_r+0xb8>
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <__sflush_r+0x108>)
 8007f7a:	410a      	asrs	r2, r1
 8007f7c:	07d6      	lsls	r6, r2, #31
 8007f7e:	d427      	bmi.n	8007fd0 <__sflush_r+0xb8>
 8007f80:	2200      	movs	r2, #0
 8007f82:	6062      	str	r2, [r4, #4]
 8007f84:	04d9      	lsls	r1, r3, #19
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	d504      	bpl.n	8007f96 <__sflush_r+0x7e>
 8007f8c:	1c42      	adds	r2, r0, #1
 8007f8e:	d101      	bne.n	8007f94 <__sflush_r+0x7c>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b903      	cbnz	r3, 8007f96 <__sflush_r+0x7e>
 8007f94:	6560      	str	r0, [r4, #84]	; 0x54
 8007f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f98:	602f      	str	r7, [r5, #0]
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	d0c9      	beq.n	8007f32 <__sflush_r+0x1a>
 8007f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d002      	beq.n	8007fac <__sflush_r+0x94>
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f7ff fbea 	bl	8007780 <_free_r>
 8007fac:	2000      	movs	r0, #0
 8007fae:	6360      	str	r0, [r4, #52]	; 0x34
 8007fb0:	e7c0      	b.n	8007f34 <__sflush_r+0x1c>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b0      	blx	r6
 8007fb8:	1c41      	adds	r1, r0, #1
 8007fba:	d1c8      	bne.n	8007f4e <__sflush_r+0x36>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0c5      	beq.n	8007f4e <__sflush_r+0x36>
 8007fc2:	2b1d      	cmp	r3, #29
 8007fc4:	d001      	beq.n	8007fca <__sflush_r+0xb2>
 8007fc6:	2b16      	cmp	r3, #22
 8007fc8:	d101      	bne.n	8007fce <__sflush_r+0xb6>
 8007fca:	602f      	str	r7, [r5, #0]
 8007fcc:	e7b1      	b.n	8007f32 <__sflush_r+0x1a>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	e7ad      	b.n	8007f34 <__sflush_r+0x1c>
 8007fd8:	690f      	ldr	r7, [r1, #16]
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	d0a9      	beq.n	8007f32 <__sflush_r+0x1a>
 8007fde:	0793      	lsls	r3, r2, #30
 8007fe0:	680e      	ldr	r6, [r1, #0]
 8007fe2:	bf08      	it	eq
 8007fe4:	694b      	ldreq	r3, [r1, #20]
 8007fe6:	600f      	str	r7, [r1, #0]
 8007fe8:	bf18      	it	ne
 8007fea:	2300      	movne	r3, #0
 8007fec:	eba6 0807 	sub.w	r8, r6, r7
 8007ff0:	608b      	str	r3, [r1, #8]
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	dd9c      	ble.n	8007f32 <__sflush_r+0x1a>
 8007ff8:	6a21      	ldr	r1, [r4, #32]
 8007ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ffc:	4643      	mov	r3, r8
 8007ffe:	463a      	mov	r2, r7
 8008000:	4628      	mov	r0, r5
 8008002:	47b0      	blx	r6
 8008004:	2800      	cmp	r0, #0
 8008006:	dc06      	bgt.n	8008016 <__sflush_r+0xfe>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e78e      	b.n	8007f34 <__sflush_r+0x1c>
 8008016:	4407      	add	r7, r0
 8008018:	eba8 0800 	sub.w	r8, r8, r0
 800801c:	e7e9      	b.n	8007ff2 <__sflush_r+0xda>
 800801e:	bf00      	nop
 8008020:	dfbffffe 	.word	0xdfbffffe

08008024 <_fflush_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b913      	cbnz	r3, 8008034 <_fflush_r+0x10>
 800802e:	2500      	movs	r5, #0
 8008030:	4628      	mov	r0, r5
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	b118      	cbz	r0, 800803e <_fflush_r+0x1a>
 8008036:	6a03      	ldr	r3, [r0, #32]
 8008038:	b90b      	cbnz	r3, 800803e <_fflush_r+0x1a>
 800803a:	f7ff fa99 	bl	8007570 <__sinit>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f3      	beq.n	800802e <_fflush_r+0xa>
 8008046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d404      	bmi.n	8008056 <_fflush_r+0x32>
 800804c:	0599      	lsls	r1, r3, #22
 800804e:	d402      	bmi.n	8008056 <_fflush_r+0x32>
 8008050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008052:	f7ff fb92 	bl	800777a <__retarget_lock_acquire_recursive>
 8008056:	4628      	mov	r0, r5
 8008058:	4621      	mov	r1, r4
 800805a:	f7ff ff5d 	bl	8007f18 <__sflush_r>
 800805e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008060:	07da      	lsls	r2, r3, #31
 8008062:	4605      	mov	r5, r0
 8008064:	d4e4      	bmi.n	8008030 <_fflush_r+0xc>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d4e1      	bmi.n	8008030 <_fflush_r+0xc>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f7ff fb85 	bl	800777c <__retarget_lock_release_recursive>
 8008072:	e7dd      	b.n	8008030 <_fflush_r+0xc>

08008074 <__swbuf_r>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	460e      	mov	r6, r1
 8008078:	4614      	mov	r4, r2
 800807a:	4605      	mov	r5, r0
 800807c:	b118      	cbz	r0, 8008086 <__swbuf_r+0x12>
 800807e:	6a03      	ldr	r3, [r0, #32]
 8008080:	b90b      	cbnz	r3, 8008086 <__swbuf_r+0x12>
 8008082:	f7ff fa75 	bl	8007570 <__sinit>
 8008086:	69a3      	ldr	r3, [r4, #24]
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	071a      	lsls	r2, r3, #28
 800808e:	d525      	bpl.n	80080dc <__swbuf_r+0x68>
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	b31b      	cbz	r3, 80080dc <__swbuf_r+0x68>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	6922      	ldr	r2, [r4, #16]
 8008098:	1a98      	subs	r0, r3, r2
 800809a:	6963      	ldr	r3, [r4, #20]
 800809c:	b2f6      	uxtb	r6, r6
 800809e:	4283      	cmp	r3, r0
 80080a0:	4637      	mov	r7, r6
 80080a2:	dc04      	bgt.n	80080ae <__swbuf_r+0x3a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7ff ffbc 	bl	8008024 <_fflush_r>
 80080ac:	b9e0      	cbnz	r0, 80080e8 <__swbuf_r+0x74>
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	6022      	str	r2, [r4, #0]
 80080ba:	701e      	strb	r6, [r3, #0]
 80080bc:	6962      	ldr	r2, [r4, #20]
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d004      	beq.n	80080ce <__swbuf_r+0x5a>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	07db      	lsls	r3, r3, #31
 80080c8:	d506      	bpl.n	80080d8 <__swbuf_r+0x64>
 80080ca:	2e0a      	cmp	r6, #10
 80080cc:	d104      	bne.n	80080d8 <__swbuf_r+0x64>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4628      	mov	r0, r5
 80080d2:	f7ff ffa7 	bl	8008024 <_fflush_r>
 80080d6:	b938      	cbnz	r0, 80080e8 <__swbuf_r+0x74>
 80080d8:	4638      	mov	r0, r7
 80080da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080dc:	4621      	mov	r1, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f806 	bl	80080f0 <__swsetup_r>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d0d5      	beq.n	8008094 <__swbuf_r+0x20>
 80080e8:	f04f 37ff 	mov.w	r7, #4294967295
 80080ec:	e7f4      	b.n	80080d8 <__swbuf_r+0x64>
	...

080080f0 <__swsetup_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <__swsetup_r+0xac>)
 80080f4:	4605      	mov	r5, r0
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	460c      	mov	r4, r1
 80080fa:	b118      	cbz	r0, 8008104 <__swsetup_r+0x14>
 80080fc:	6a03      	ldr	r3, [r0, #32]
 80080fe:	b90b      	cbnz	r3, 8008104 <__swsetup_r+0x14>
 8008100:	f7ff fa36 	bl	8007570 <__sinit>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800810a:	0718      	lsls	r0, r3, #28
 800810c:	d422      	bmi.n	8008154 <__swsetup_r+0x64>
 800810e:	06d9      	lsls	r1, r3, #27
 8008110:	d407      	bmi.n	8008122 <__swsetup_r+0x32>
 8008112:	2309      	movs	r3, #9
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e034      	b.n	800818c <__swsetup_r+0x9c>
 8008122:	0758      	lsls	r0, r3, #29
 8008124:	d512      	bpl.n	800814c <__swsetup_r+0x5c>
 8008126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008128:	b141      	cbz	r1, 800813c <__swsetup_r+0x4c>
 800812a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812e:	4299      	cmp	r1, r3
 8008130:	d002      	beq.n	8008138 <__swsetup_r+0x48>
 8008132:	4628      	mov	r0, r5
 8008134:	f7ff fb24 	bl	8007780 <_free_r>
 8008138:	2300      	movs	r3, #0
 800813a:	6363      	str	r3, [r4, #52]	; 0x34
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	2300      	movs	r3, #0
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f043 0308 	orr.w	r3, r3, #8
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	b94b      	cbnz	r3, 800816c <__swsetup_r+0x7c>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800815e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008162:	d003      	beq.n	800816c <__swsetup_r+0x7c>
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f850 	bl	800820c <__smakebuf_r>
 800816c:	89a0      	ldrh	r0, [r4, #12]
 800816e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008172:	f010 0301 	ands.w	r3, r0, #1
 8008176:	d00a      	beq.n	800818e <__swsetup_r+0x9e>
 8008178:	2300      	movs	r3, #0
 800817a:	60a3      	str	r3, [r4, #8]
 800817c:	6963      	ldr	r3, [r4, #20]
 800817e:	425b      	negs	r3, r3
 8008180:	61a3      	str	r3, [r4, #24]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	b943      	cbnz	r3, 8008198 <__swsetup_r+0xa8>
 8008186:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800818a:	d1c4      	bne.n	8008116 <__swsetup_r+0x26>
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	0781      	lsls	r1, r0, #30
 8008190:	bf58      	it	pl
 8008192:	6963      	ldrpl	r3, [r4, #20]
 8008194:	60a3      	str	r3, [r4, #8]
 8008196:	e7f4      	b.n	8008182 <__swsetup_r+0x92>
 8008198:	2000      	movs	r0, #0
 800819a:	e7f7      	b.n	800818c <__swsetup_r+0x9c>
 800819c:	20000070 	.word	0x20000070

080081a0 <_sbrk_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_sbrk_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7f9 fe90 	bl	8001ed0 <_sbrk>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_sbrk_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_sbrk_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20001030 	.word	0x20001030

080081c0 <__swhatbuf_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	460c      	mov	r4, r1
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	2900      	cmp	r1, #0
 80081ca:	b096      	sub	sp, #88	; 0x58
 80081cc:	4615      	mov	r5, r2
 80081ce:	461e      	mov	r6, r3
 80081d0:	da0d      	bge.n	80081ee <__swhatbuf_r+0x2e>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081d8:	f04f 0100 	mov.w	r1, #0
 80081dc:	bf0c      	ite	eq
 80081de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081e2:	2340      	movne	r3, #64	; 0x40
 80081e4:	2000      	movs	r0, #0
 80081e6:	6031      	str	r1, [r6, #0]
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	b016      	add	sp, #88	; 0x58
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	466a      	mov	r2, sp
 80081f0:	f000 f848 	bl	8008284 <_fstat_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	dbec      	blt.n	80081d2 <__swhatbuf_r+0x12>
 80081f8:	9901      	ldr	r1, [sp, #4]
 80081fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008202:	4259      	negs	r1, r3
 8008204:	4159      	adcs	r1, r3
 8008206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820a:	e7eb      	b.n	80081e4 <__swhatbuf_r+0x24>

0800820c <__smakebuf_r>:
 800820c:	898b      	ldrh	r3, [r1, #12]
 800820e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008210:	079d      	lsls	r5, r3, #30
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	d507      	bpl.n	8008228 <__smakebuf_r+0x1c>
 8008218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	2301      	movs	r3, #1
 8008222:	6163      	str	r3, [r4, #20]
 8008224:	b002      	add	sp, #8
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	ab01      	add	r3, sp, #4
 800822a:	466a      	mov	r2, sp
 800822c:	f7ff ffc8 	bl	80081c0 <__swhatbuf_r>
 8008230:	9900      	ldr	r1, [sp, #0]
 8008232:	4605      	mov	r5, r0
 8008234:	4630      	mov	r0, r6
 8008236:	f7ff fb0f 	bl	8007858 <_malloc_r>
 800823a:	b948      	cbnz	r0, 8008250 <__smakebuf_r+0x44>
 800823c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d4ef      	bmi.n	8008224 <__smakebuf_r+0x18>
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	f043 0302 	orr.w	r3, r3, #2
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e7e3      	b.n	8008218 <__smakebuf_r+0xc>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	6020      	str	r0, [r4, #0]
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	6163      	str	r3, [r4, #20]
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	6120      	str	r0, [r4, #16]
 8008262:	b15b      	cbz	r3, 800827c <__smakebuf_r+0x70>
 8008264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f81d 	bl	80082a8 <_isatty_r>
 800826e:	b128      	cbz	r0, 800827c <__smakebuf_r+0x70>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	f023 0303 	bic.w	r3, r3, #3
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	431d      	orrs	r5, r3
 8008280:	81a5      	strh	r5, [r4, #12]
 8008282:	e7cf      	b.n	8008224 <__smakebuf_r+0x18>

08008284 <_fstat_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	; (80082a4 <_fstat_r+0x20>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7f9 fdf4 	bl	8001e7e <_fstat>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_fstat_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_fstat_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20001030 	.word	0x20001030

080082a8 <_isatty_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	; (80082c4 <_isatty_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f9 fdf3 	bl	8001e9e <_isatty>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_isatty_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_isatty_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20001030 	.word	0x20001030

080082c8 <sin>:
 80082c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ca:	ec53 2b10 	vmov	r2, r3, d0
 80082ce:	4828      	ldr	r0, [pc, #160]	; (8008370 <sin+0xa8>)
 80082d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80082d4:	4281      	cmp	r1, r0
 80082d6:	dc07      	bgt.n	80082e8 <sin+0x20>
 80082d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008368 <sin+0xa0>
 80082dc:	2000      	movs	r0, #0
 80082de:	b005      	add	sp, #20
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	f000 b910 	b.w	8008508 <__kernel_sin>
 80082e8:	4822      	ldr	r0, [pc, #136]	; (8008374 <sin+0xac>)
 80082ea:	4281      	cmp	r1, r0
 80082ec:	dd09      	ble.n	8008302 <sin+0x3a>
 80082ee:	ee10 0a10 	vmov	r0, s0
 80082f2:	4619      	mov	r1, r3
 80082f4:	f7f8 f912 	bl	800051c <__aeabi_dsub>
 80082f8:	ec41 0b10 	vmov	d0, r0, r1
 80082fc:	b005      	add	sp, #20
 80082fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008302:	4668      	mov	r0, sp
 8008304:	f000 f9c0 	bl	8008688 <__ieee754_rem_pio2>
 8008308:	f000 0003 	and.w	r0, r0, #3
 800830c:	2801      	cmp	r0, #1
 800830e:	d00c      	beq.n	800832a <sin+0x62>
 8008310:	2802      	cmp	r0, #2
 8008312:	d011      	beq.n	8008338 <sin+0x70>
 8008314:	b9f0      	cbnz	r0, 8008354 <sin+0x8c>
 8008316:	ed9d 1b02 	vldr	d1, [sp, #8]
 800831a:	ed9d 0b00 	vldr	d0, [sp]
 800831e:	2001      	movs	r0, #1
 8008320:	f000 f8f2 	bl	8008508 <__kernel_sin>
 8008324:	ec51 0b10 	vmov	r0, r1, d0
 8008328:	e7e6      	b.n	80082f8 <sin+0x30>
 800832a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800832e:	ed9d 0b00 	vldr	d0, [sp]
 8008332:	f000 f821 	bl	8008378 <__kernel_cos>
 8008336:	e7f5      	b.n	8008324 <sin+0x5c>
 8008338:	ed9d 1b02 	vldr	d1, [sp, #8]
 800833c:	ed9d 0b00 	vldr	d0, [sp]
 8008340:	2001      	movs	r0, #1
 8008342:	f000 f8e1 	bl	8008508 <__kernel_sin>
 8008346:	ec53 2b10 	vmov	r2, r3, d0
 800834a:	ee10 0a10 	vmov	r0, s0
 800834e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008352:	e7d1      	b.n	80082f8 <sin+0x30>
 8008354:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008358:	ed9d 0b00 	vldr	d0, [sp]
 800835c:	f000 f80c 	bl	8008378 <__kernel_cos>
 8008360:	e7f1      	b.n	8008346 <sin+0x7e>
 8008362:	bf00      	nop
 8008364:	f3af 8000 	nop.w
	...
 8008370:	3fe921fb 	.word	0x3fe921fb
 8008374:	7fefffff 	.word	0x7fefffff

08008378 <__kernel_cos>:
 8008378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	ec57 6b10 	vmov	r6, r7, d0
 8008380:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008384:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008388:	ed8d 1b00 	vstr	d1, [sp]
 800838c:	da07      	bge.n	800839e <__kernel_cos+0x26>
 800838e:	ee10 0a10 	vmov	r0, s0
 8008392:	4639      	mov	r1, r7
 8008394:	f7f8 fb02 	bl	800099c <__aeabi_d2iz>
 8008398:	2800      	cmp	r0, #0
 800839a:	f000 8088 	beq.w	80084ae <__kernel_cos+0x136>
 800839e:	4632      	mov	r2, r6
 80083a0:	463b      	mov	r3, r7
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f7 ff8b 	bl	80002c0 <__aeabi_dmul>
 80083aa:	4b51      	ldr	r3, [pc, #324]	; (80084f0 <__kernel_cos+0x178>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	460d      	mov	r5, r1
 80083b2:	f7f7 ff85 	bl	80002c0 <__aeabi_dmul>
 80083b6:	a340      	add	r3, pc, #256	; (adr r3, 80084b8 <__kernel_cos+0x140>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	4620      	mov	r0, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7f7 ff7c 	bl	80002c0 <__aeabi_dmul>
 80083c8:	a33d      	add	r3, pc, #244	; (adr r3, 80084c0 <__kernel_cos+0x148>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f8 f8a7 	bl	8000520 <__adddf3>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f7 ff73 	bl	80002c0 <__aeabi_dmul>
 80083da:	a33b      	add	r3, pc, #236	; (adr r3, 80084c8 <__kernel_cos+0x150>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f8 f89c 	bl	800051c <__aeabi_dsub>
 80083e4:	4622      	mov	r2, r4
 80083e6:	462b      	mov	r3, r5
 80083e8:	f7f7 ff6a 	bl	80002c0 <__aeabi_dmul>
 80083ec:	a338      	add	r3, pc, #224	; (adr r3, 80084d0 <__kernel_cos+0x158>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 f895 	bl	8000520 <__adddf3>
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	f7f7 ff61 	bl	80002c0 <__aeabi_dmul>
 80083fe:	a336      	add	r3, pc, #216	; (adr r3, 80084d8 <__kernel_cos+0x160>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f8 f88a 	bl	800051c <__aeabi_dsub>
 8008408:	4622      	mov	r2, r4
 800840a:	462b      	mov	r3, r5
 800840c:	f7f7 ff58 	bl	80002c0 <__aeabi_dmul>
 8008410:	a333      	add	r3, pc, #204	; (adr r3, 80084e0 <__kernel_cos+0x168>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f8 f883 	bl	8000520 <__adddf3>
 800841a:	4622      	mov	r2, r4
 800841c:	462b      	mov	r3, r5
 800841e:	f7f7 ff4f 	bl	80002c0 <__aeabi_dmul>
 8008422:	4622      	mov	r2, r4
 8008424:	462b      	mov	r3, r5
 8008426:	f7f7 ff4b 	bl	80002c0 <__aeabi_dmul>
 800842a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800842e:	4604      	mov	r4, r0
 8008430:	460d      	mov	r5, r1
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f7 ff43 	bl	80002c0 <__aeabi_dmul>
 800843a:	460b      	mov	r3, r1
 800843c:	4602      	mov	r2, r0
 800843e:	4629      	mov	r1, r5
 8008440:	4620      	mov	r0, r4
 8008442:	f7f8 f86b 	bl	800051c <__aeabi_dsub>
 8008446:	4b2b      	ldr	r3, [pc, #172]	; (80084f4 <__kernel_cos+0x17c>)
 8008448:	4598      	cmp	r8, r3
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	dc10      	bgt.n	8008472 <__kernel_cos+0xfa>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	f7f8 f860 	bl	800051c <__aeabi_dsub>
 800845c:	460b      	mov	r3, r1
 800845e:	4926      	ldr	r1, [pc, #152]	; (80084f8 <__kernel_cos+0x180>)
 8008460:	4602      	mov	r2, r0
 8008462:	2000      	movs	r0, #0
 8008464:	f7f8 f85a 	bl	800051c <__aeabi_dsub>
 8008468:	ec41 0b10 	vmov	d0, r0, r1
 800846c:	b003      	add	sp, #12
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	4b22      	ldr	r3, [pc, #136]	; (80084fc <__kernel_cos+0x184>)
 8008474:	4920      	ldr	r1, [pc, #128]	; (80084f8 <__kernel_cos+0x180>)
 8008476:	4598      	cmp	r8, r3
 8008478:	bfcc      	ite	gt
 800847a:	4d21      	ldrgt	r5, [pc, #132]	; (8008500 <__kernel_cos+0x188>)
 800847c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008480:	2400      	movs	r4, #0
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	2000      	movs	r0, #0
 8008488:	f7f8 f848 	bl	800051c <__aeabi_dsub>
 800848c:	4622      	mov	r2, r4
 800848e:	4680      	mov	r8, r0
 8008490:	4689      	mov	r9, r1
 8008492:	462b      	mov	r3, r5
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f8 f840 	bl	800051c <__aeabi_dsub>
 800849c:	4632      	mov	r2, r6
 800849e:	463b      	mov	r3, r7
 80084a0:	f7f8 f83c 	bl	800051c <__aeabi_dsub>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	e7da      	b.n	8008464 <__kernel_cos+0xec>
 80084ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80084e8 <__kernel_cos+0x170>
 80084b2:	e7db      	b.n	800846c <__kernel_cos+0xf4>
 80084b4:	f3af 8000 	nop.w
 80084b8:	be8838d4 	.word	0xbe8838d4
 80084bc:	bda8fae9 	.word	0xbda8fae9
 80084c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80084c4:	3e21ee9e 	.word	0x3e21ee9e
 80084c8:	809c52ad 	.word	0x809c52ad
 80084cc:	3e927e4f 	.word	0x3e927e4f
 80084d0:	19cb1590 	.word	0x19cb1590
 80084d4:	3efa01a0 	.word	0x3efa01a0
 80084d8:	16c15177 	.word	0x16c15177
 80084dc:	3f56c16c 	.word	0x3f56c16c
 80084e0:	5555554c 	.word	0x5555554c
 80084e4:	3fa55555 	.word	0x3fa55555
 80084e8:	00000000 	.word	0x00000000
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	3fd33332 	.word	0x3fd33332
 80084f8:	3ff00000 	.word	0x3ff00000
 80084fc:	3fe90000 	.word	0x3fe90000
 8008500:	3fd20000 	.word	0x3fd20000
 8008504:	00000000 	.word	0x00000000

08008508 <__kernel_sin>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	ed2d 8b04 	vpush	{d8-d9}
 8008510:	eeb0 8a41 	vmov.f32	s16, s2
 8008514:	eef0 8a61 	vmov.f32	s17, s3
 8008518:	ec55 4b10 	vmov	r4, r5, d0
 800851c:	b083      	sub	sp, #12
 800851e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008522:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008526:	9001      	str	r0, [sp, #4]
 8008528:	da06      	bge.n	8008538 <__kernel_sin+0x30>
 800852a:	ee10 0a10 	vmov	r0, s0
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 fa34 	bl	800099c <__aeabi_d2iz>
 8008534:	2800      	cmp	r0, #0
 8008536:	d051      	beq.n	80085dc <__kernel_sin+0xd4>
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	4620      	mov	r0, r4
 800853e:	4629      	mov	r1, r5
 8008540:	f7f7 febe 	bl	80002c0 <__aeabi_dmul>
 8008544:	4682      	mov	sl, r0
 8008546:	468b      	mov	fp, r1
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f7 feb6 	bl	80002c0 <__aeabi_dmul>
 8008554:	a341      	add	r3, pc, #260	; (adr r3, 800865c <__kernel_sin+0x154>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	4650      	mov	r0, sl
 8008560:	4659      	mov	r1, fp
 8008562:	f7f7 fead 	bl	80002c0 <__aeabi_dmul>
 8008566:	a33f      	add	r3, pc, #252	; (adr r3, 8008664 <__kernel_sin+0x15c>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 ffd6 	bl	800051c <__aeabi_dsub>
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	f7f7 fea4 	bl	80002c0 <__aeabi_dmul>
 8008578:	a33c      	add	r3, pc, #240	; (adr r3, 800866c <__kernel_sin+0x164>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 ffcf 	bl	8000520 <__adddf3>
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	f7f7 fe9b 	bl	80002c0 <__aeabi_dmul>
 800858a:	a33a      	add	r3, pc, #232	; (adr r3, 8008674 <__kernel_sin+0x16c>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 ffc4 	bl	800051c <__aeabi_dsub>
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	f7f7 fe92 	bl	80002c0 <__aeabi_dmul>
 800859c:	a337      	add	r3, pc, #220	; (adr r3, 800867c <__kernel_sin+0x174>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 ffbd 	bl	8000520 <__adddf3>
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	4606      	mov	r6, r0
 80085aa:	460f      	mov	r7, r1
 80085ac:	b9eb      	cbnz	r3, 80085ea <__kernel_sin+0xe2>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f7 fe83 	bl	80002c0 <__aeabi_dmul>
 80085ba:	a325      	add	r3, pc, #148	; (adr r3, 8008650 <__kernel_sin+0x148>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 ffac 	bl	800051c <__aeabi_dsub>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	f7f7 fe7a 	bl	80002c0 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f7 ffa4 	bl	8000520 <__adddf3>
 80085d8:	4604      	mov	r4, r0
 80085da:	460d      	mov	r5, r1
 80085dc:	ec45 4b10 	vmov	d0, r4, r5
 80085e0:	b003      	add	sp, #12
 80085e2:	ecbd 8b04 	vpop	{d8-d9}
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <__kernel_sin+0x150>)
 80085ec:	ec51 0b18 	vmov	r0, r1, d8
 80085f0:	2200      	movs	r2, #0
 80085f2:	f7f7 fe65 	bl	80002c0 <__aeabi_dmul>
 80085f6:	4632      	mov	r2, r6
 80085f8:	ec41 0b19 	vmov	d9, r0, r1
 80085fc:	463b      	mov	r3, r7
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f7 fe5d 	bl	80002c0 <__aeabi_dmul>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	ec51 0b19 	vmov	r0, r1, d9
 800860e:	f7f7 ff85 	bl	800051c <__aeabi_dsub>
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	f7f7 fe53 	bl	80002c0 <__aeabi_dmul>
 800861a:	ec53 2b18 	vmov	r2, r3, d8
 800861e:	f7f7 ff7d 	bl	800051c <__aeabi_dsub>
 8008622:	a30b      	add	r3, pc, #44	; (adr r3, 8008650 <__kernel_sin+0x148>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	4640      	mov	r0, r8
 800862e:	4649      	mov	r1, r9
 8008630:	f7f7 fe46 	bl	80002c0 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f7 ff70 	bl	8000520 <__adddf3>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 ff68 	bl	800051c <__aeabi_dsub>
 800864c:	e7c4      	b.n	80085d8 <__kernel_sin+0xd0>
 800864e:	bf00      	nop
 8008650:	55555549 	.word	0x55555549
 8008654:	3fc55555 	.word	0x3fc55555
 8008658:	3fe00000 	.word	0x3fe00000
 800865c:	5acfd57c 	.word	0x5acfd57c
 8008660:	3de5d93a 	.word	0x3de5d93a
 8008664:	8a2b9ceb 	.word	0x8a2b9ceb
 8008668:	3e5ae5e6 	.word	0x3e5ae5e6
 800866c:	57b1fe7d 	.word	0x57b1fe7d
 8008670:	3ec71de3 	.word	0x3ec71de3
 8008674:	19c161d5 	.word	0x19c161d5
 8008678:	3f2a01a0 	.word	0x3f2a01a0
 800867c:	1110f8a6 	.word	0x1110f8a6
 8008680:	3f811111 	.word	0x3f811111
 8008684:	00000000 	.word	0x00000000

08008688 <__ieee754_rem_pio2>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	ed2d 8b02 	vpush	{d8}
 8008690:	ec55 4b10 	vmov	r4, r5, d0
 8008694:	4bca      	ldr	r3, [pc, #808]	; (80089c0 <__ieee754_rem_pio2+0x338>)
 8008696:	b08b      	sub	sp, #44	; 0x2c
 8008698:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800869c:	4598      	cmp	r8, r3
 800869e:	4682      	mov	sl, r0
 80086a0:	9502      	str	r5, [sp, #8]
 80086a2:	dc08      	bgt.n	80086b6 <__ieee754_rem_pio2+0x2e>
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	ed80 0b00 	vstr	d0, [r0]
 80086ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80086b0:	f04f 0b00 	mov.w	fp, #0
 80086b4:	e028      	b.n	8008708 <__ieee754_rem_pio2+0x80>
 80086b6:	4bc3      	ldr	r3, [pc, #780]	; (80089c4 <__ieee754_rem_pio2+0x33c>)
 80086b8:	4598      	cmp	r8, r3
 80086ba:	dc78      	bgt.n	80087ae <__ieee754_rem_pio2+0x126>
 80086bc:	9b02      	ldr	r3, [sp, #8]
 80086be:	4ec2      	ldr	r6, [pc, #776]	; (80089c8 <__ieee754_rem_pio2+0x340>)
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	ee10 0a10 	vmov	r0, s0
 80086c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008988 <__ieee754_rem_pio2+0x300>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	4629      	mov	r1, r5
 80086ce:	dd39      	ble.n	8008744 <__ieee754_rem_pio2+0xbc>
 80086d0:	f7f7 ff24 	bl	800051c <__aeabi_dsub>
 80086d4:	45b0      	cmp	r8, r6
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	d01b      	beq.n	8008714 <__ieee754_rem_pio2+0x8c>
 80086dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008990 <__ieee754_rem_pio2+0x308>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 ff1b 	bl	800051c <__aeabi_dsub>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9ca 2300 	strd	r2, r3, [sl]
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 ff13 	bl	800051c <__aeabi_dsub>
 80086f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008990 <__ieee754_rem_pio2+0x308>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f7 ff0e 	bl	800051c <__aeabi_dsub>
 8008700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008704:	f04f 0b01 	mov.w	fp, #1
 8008708:	4658      	mov	r0, fp
 800870a:	b00b      	add	sp, #44	; 0x2c
 800870c:	ecbd 8b02 	vpop	{d8}
 8008710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008714:	a3a0      	add	r3, pc, #640	; (adr r3, 8008998 <__ieee754_rem_pio2+0x310>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 feff 	bl	800051c <__aeabi_dsub>
 800871e:	a3a0      	add	r3, pc, #640	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x318>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	f7f7 fef8 	bl	800051c <__aeabi_dsub>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9ca 2300 	strd	r2, r3, [sl]
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 fef0 	bl	800051c <__aeabi_dsub>
 800873c:	a398      	add	r3, pc, #608	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x318>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	e7db      	b.n	80086fc <__ieee754_rem_pio2+0x74>
 8008744:	f7f7 feec 	bl	8000520 <__adddf3>
 8008748:	45b0      	cmp	r8, r6
 800874a:	4604      	mov	r4, r0
 800874c:	460d      	mov	r5, r1
 800874e:	d016      	beq.n	800877e <__ieee754_rem_pio2+0xf6>
 8008750:	a38f      	add	r3, pc, #572	; (adr r3, 8008990 <__ieee754_rem_pio2+0x308>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f7f7 fee3 	bl	8000520 <__adddf3>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	e9ca 2300 	strd	r2, r3, [sl]
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fed9 	bl	800051c <__aeabi_dsub>
 800876a:	a389      	add	r3, pc, #548	; (adr r3, 8008990 <__ieee754_rem_pio2+0x308>)
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f7f7 fed6 	bl	8000520 <__adddf3>
 8008774:	f04f 3bff 	mov.w	fp, #4294967295
 8008778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800877c:	e7c4      	b.n	8008708 <__ieee754_rem_pio2+0x80>
 800877e:	a386      	add	r3, pc, #536	; (adr r3, 8008998 <__ieee754_rem_pio2+0x310>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 fecc 	bl	8000520 <__adddf3>
 8008788:	a385      	add	r3, pc, #532	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x318>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	f7f7 fec5 	bl	8000520 <__adddf3>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	e9ca 2300 	strd	r2, r3, [sl]
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f7 febb 	bl	800051c <__aeabi_dsub>
 80087a6:	a37e      	add	r3, pc, #504	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x318>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	e7e0      	b.n	8008770 <__ieee754_rem_pio2+0xe8>
 80087ae:	4b87      	ldr	r3, [pc, #540]	; (80089cc <__ieee754_rem_pio2+0x344>)
 80087b0:	4598      	cmp	r8, r3
 80087b2:	f300 80d8 	bgt.w	8008966 <__ieee754_rem_pio2+0x2de>
 80087b6:	f000 f96d 	bl	8008a94 <fabs>
 80087ba:	ec55 4b10 	vmov	r4, r5, d0
 80087be:	ee10 0a10 	vmov	r0, s0
 80087c2:	a379      	add	r3, pc, #484	; (adr r3, 80089a8 <__ieee754_rem_pio2+0x320>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f7 fd79 	bl	80002c0 <__aeabi_dmul>
 80087ce:	4b80      	ldr	r3, [pc, #512]	; (80089d0 <__ieee754_rem_pio2+0x348>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	f7f7 fea5 	bl	8000520 <__adddf3>
 80087d6:	f7f8 f8e1 	bl	800099c <__aeabi_d2iz>
 80087da:	4683      	mov	fp, r0
 80087dc:	f7f7 ffec 	bl	80007b8 <__aeabi_i2d>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	ec43 2b18 	vmov	d8, r2, r3
 80087e8:	a367      	add	r3, pc, #412	; (adr r3, 8008988 <__ieee754_rem_pio2+0x300>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f7 fd67 	bl	80002c0 <__aeabi_dmul>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f7 fe8f 	bl	800051c <__aeabi_dsub>
 80087fe:	a364      	add	r3, pc, #400	; (adr r3, 8008990 <__ieee754_rem_pio2+0x308>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	ec51 0b18 	vmov	r0, r1, d8
 800880c:	f7f7 fd58 	bl	80002c0 <__aeabi_dmul>
 8008810:	f1bb 0f1f 	cmp.w	fp, #31
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	dc0d      	bgt.n	8008836 <__ieee754_rem_pio2+0x1ae>
 800881a:	4b6e      	ldr	r3, [pc, #440]	; (80089d4 <__ieee754_rem_pio2+0x34c>)
 800881c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008824:	4543      	cmp	r3, r8
 8008826:	d006      	beq.n	8008836 <__ieee754_rem_pio2+0x1ae>
 8008828:	4622      	mov	r2, r4
 800882a:	462b      	mov	r3, r5
 800882c:	4630      	mov	r0, r6
 800882e:	4639      	mov	r1, r7
 8008830:	f7f7 fe74 	bl	800051c <__aeabi_dsub>
 8008834:	e00e      	b.n	8008854 <__ieee754_rem_pio2+0x1cc>
 8008836:	462b      	mov	r3, r5
 8008838:	4622      	mov	r2, r4
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f7 fe6d 	bl	800051c <__aeabi_dsub>
 8008842:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800884c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008850:	2b10      	cmp	r3, #16
 8008852:	dc02      	bgt.n	800885a <__ieee754_rem_pio2+0x1d2>
 8008854:	e9ca 0100 	strd	r0, r1, [sl]
 8008858:	e039      	b.n	80088ce <__ieee754_rem_pio2+0x246>
 800885a:	a34f      	add	r3, pc, #316	; (adr r3, 8008998 <__ieee754_rem_pio2+0x310>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	ec51 0b18 	vmov	r0, r1, d8
 8008864:	f7f7 fd2c 	bl	80002c0 <__aeabi_dmul>
 8008868:	4604      	mov	r4, r0
 800886a:	460d      	mov	r5, r1
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f7 fe52 	bl	800051c <__aeabi_dsub>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 fe4a 	bl	800051c <__aeabi_dsub>
 8008888:	4622      	mov	r2, r4
 800888a:	462b      	mov	r3, r5
 800888c:	f7f7 fe46 	bl	800051c <__aeabi_dsub>
 8008890:	a343      	add	r3, pc, #268	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x318>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	ec51 0b18 	vmov	r0, r1, d8
 800889e:	f7f7 fd0f 	bl	80002c0 <__aeabi_dmul>
 80088a2:	4622      	mov	r2, r4
 80088a4:	462b      	mov	r3, r5
 80088a6:	f7f7 fe39 	bl	800051c <__aeabi_dsub>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	4640      	mov	r0, r8
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f7 fe31 	bl	800051c <__aeabi_dsub>
 80088ba:	9a03      	ldr	r2, [sp, #12]
 80088bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b31      	cmp	r3, #49	; 0x31
 80088c4:	dc24      	bgt.n	8008910 <__ieee754_rem_pio2+0x288>
 80088c6:	e9ca 0100 	strd	r0, r1, [sl]
 80088ca:	4646      	mov	r6, r8
 80088cc:	464f      	mov	r7, r9
 80088ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80088d2:	4630      	mov	r0, r6
 80088d4:	4642      	mov	r2, r8
 80088d6:	464b      	mov	r3, r9
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f7 fe1f 	bl	800051c <__aeabi_dsub>
 80088de:	462b      	mov	r3, r5
 80088e0:	4622      	mov	r2, r4
 80088e2:	f7f7 fe1b 	bl	800051c <__aeabi_dsub>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088ee:	f6bf af0b 	bge.w	8008708 <__ieee754_rem_pio2+0x80>
 80088f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80088f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80088fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088fe:	f8ca 8000 	str.w	r8, [sl]
 8008902:	f8ca 0008 	str.w	r0, [sl, #8]
 8008906:	f8ca 300c 	str.w	r3, [sl, #12]
 800890a:	f1cb 0b00 	rsb	fp, fp, #0
 800890e:	e6fb      	b.n	8008708 <__ieee754_rem_pio2+0x80>
 8008910:	a327      	add	r3, pc, #156	; (adr r3, 80089b0 <__ieee754_rem_pio2+0x328>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	ec51 0b18 	vmov	r0, r1, d8
 800891a:	f7f7 fcd1 	bl	80002c0 <__aeabi_dmul>
 800891e:	4604      	mov	r4, r0
 8008920:	460d      	mov	r5, r1
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f7 fdf7 	bl	800051c <__aeabi_dsub>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4606      	mov	r6, r0
 8008934:	460f      	mov	r7, r1
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f7 fdef 	bl	800051c <__aeabi_dsub>
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	f7f7 fdeb 	bl	800051c <__aeabi_dsub>
 8008946:	a31c      	add	r3, pc, #112	; (adr r3, 80089b8 <__ieee754_rem_pio2+0x330>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	4604      	mov	r4, r0
 800894e:	460d      	mov	r5, r1
 8008950:	ec51 0b18 	vmov	r0, r1, d8
 8008954:	f7f7 fcb4 	bl	80002c0 <__aeabi_dmul>
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	f7f7 fdde 	bl	800051c <__aeabi_dsub>
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	e760      	b.n	8008828 <__ieee754_rem_pio2+0x1a0>
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <__ieee754_rem_pio2+0x350>)
 8008968:	4598      	cmp	r8, r3
 800896a:	dd37      	ble.n	80089dc <__ieee754_rem_pio2+0x354>
 800896c:	ee10 2a10 	vmov	r2, s0
 8008970:	462b      	mov	r3, r5
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fdd1 	bl	800051c <__aeabi_dsub>
 800897a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800897e:	e9ca 0100 	strd	r0, r1, [sl]
 8008982:	e695      	b.n	80086b0 <__ieee754_rem_pio2+0x28>
 8008984:	f3af 8000 	nop.w
 8008988:	54400000 	.word	0x54400000
 800898c:	3ff921fb 	.word	0x3ff921fb
 8008990:	1a626331 	.word	0x1a626331
 8008994:	3dd0b461 	.word	0x3dd0b461
 8008998:	1a600000 	.word	0x1a600000
 800899c:	3dd0b461 	.word	0x3dd0b461
 80089a0:	2e037073 	.word	0x2e037073
 80089a4:	3ba3198a 	.word	0x3ba3198a
 80089a8:	6dc9c883 	.word	0x6dc9c883
 80089ac:	3fe45f30 	.word	0x3fe45f30
 80089b0:	2e000000 	.word	0x2e000000
 80089b4:	3ba3198a 	.word	0x3ba3198a
 80089b8:	252049c1 	.word	0x252049c1
 80089bc:	397b839a 	.word	0x397b839a
 80089c0:	3fe921fb 	.word	0x3fe921fb
 80089c4:	4002d97b 	.word	0x4002d97b
 80089c8:	3ff921fb 	.word	0x3ff921fb
 80089cc:	413921fb 	.word	0x413921fb
 80089d0:	3fe00000 	.word	0x3fe00000
 80089d4:	08009408 	.word	0x08009408
 80089d8:	7fefffff 	.word	0x7fefffff
 80089dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80089e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80089e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80089e8:	4620      	mov	r0, r4
 80089ea:	460d      	mov	r5, r1
 80089ec:	f7f7 ffd6 	bl	800099c <__aeabi_d2iz>
 80089f0:	f7f7 fee2 	bl	80007b8 <__aeabi_i2d>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a00:	f7f7 fd8c 	bl	800051c <__aeabi_dsub>
 8008a04:	4b21      	ldr	r3, [pc, #132]	; (8008a8c <__ieee754_rem_pio2+0x404>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	f7f7 fc5a 	bl	80002c0 <__aeabi_dmul>
 8008a0c:	460d      	mov	r5, r1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7f7 ffc4 	bl	800099c <__aeabi_d2iz>
 8008a14:	f7f7 fed0 	bl	80007b8 <__aeabi_i2d>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a24:	f7f7 fd7a 	bl	800051c <__aeabi_dsub>
 8008a28:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <__ieee754_rem_pio2+0x404>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f7f7 fc48 	bl	80002c0 <__aeabi_dmul>
 8008a30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a34:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008a38:	2703      	movs	r7, #3
 8008a3a:	2400      	movs	r4, #0
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	46b9      	mov	r9, r7
 8008a48:	3f01      	subs	r7, #1
 8008a4a:	f7f7 ff75 	bl	8000938 <__aeabi_dcmpeq>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1f5      	bne.n	8008a3e <__ieee754_rem_pio2+0x3b6>
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <__ieee754_rem_pio2+0x408>)
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	2302      	movs	r3, #2
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	464b      	mov	r3, r9
 8008a5e:	4651      	mov	r1, sl
 8008a60:	a804      	add	r0, sp, #16
 8008a62:	f000 f821 	bl	8008aa8 <__kernel_rem_pio2>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	4683      	mov	fp, r0
 8008a6c:	f6bf ae4c 	bge.w	8008708 <__ieee754_rem_pio2+0x80>
 8008a70:	e9da 2100 	ldrd	r2, r1, [sl]
 8008a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a78:	e9ca 2300 	strd	r2, r3, [sl]
 8008a7c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a84:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008a88:	e73f      	b.n	800890a <__ieee754_rem_pio2+0x282>
 8008a8a:	bf00      	nop
 8008a8c:	41700000 	.word	0x41700000
 8008a90:	08009488 	.word	0x08009488

08008a94 <fabs>:
 8008a94:	ec51 0b10 	vmov	r0, r1, d0
 8008a98:	ee10 2a10 	vmov	r2, s0
 8008a9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008aa0:	ec43 2b10 	vmov	d0, r2, r3
 8008aa4:	4770      	bx	lr
	...

08008aa8 <__kernel_rem_pio2>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b02 	vpush	{d8}
 8008ab0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008ab4:	f112 0f14 	cmn.w	r2, #20
 8008ab8:	9306      	str	r3, [sp, #24]
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	4bc2      	ldr	r3, [pc, #776]	; (8008dc8 <__kernel_rem_pio2+0x320>)
 8008abe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8008ac2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ace:	bfa8      	it	ge
 8008ad0:	1ed4      	subge	r4, r2, #3
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	bfb2      	itee	lt
 8008ad6:	2400      	movlt	r4, #0
 8008ad8:	2318      	movge	r3, #24
 8008ada:	fb94 f4f3 	sdivge	r4, r4, r3
 8008ade:	f06f 0317 	mvn.w	r3, #23
 8008ae2:	fb04 3303 	mla	r3, r4, r3, r3
 8008ae6:	eb03 0a02 	add.w	sl, r3, r2
 8008aea:	9b00      	ldr	r3, [sp, #0]
 8008aec:	9a05      	ldr	r2, [sp, #20]
 8008aee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008db8 <__kernel_rem_pio2+0x310>
 8008af2:	eb03 0802 	add.w	r8, r3, r2
 8008af6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008af8:	1aa7      	subs	r7, r4, r2
 8008afa:	ae20      	add	r6, sp, #128	; 0x80
 8008afc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b00:	2500      	movs	r5, #0
 8008b02:	4545      	cmp	r5, r8
 8008b04:	dd13      	ble.n	8008b2e <__kernel_rem_pio2+0x86>
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	aa20      	add	r2, sp, #128	; 0x80
 8008b0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008b0e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	4598      	cmp	r8, r3
 8008b1a:	dc31      	bgt.n	8008b80 <__kernel_rem_pio2+0xd8>
 8008b1c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008db8 <__kernel_rem_pio2+0x310>
 8008b20:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b28:	462f      	mov	r7, r5
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	e01b      	b.n	8008b66 <__kernel_rem_pio2+0xbe>
 8008b2e:	42ef      	cmn	r7, r5
 8008b30:	d407      	bmi.n	8008b42 <__kernel_rem_pio2+0x9a>
 8008b32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008b36:	f7f7 fe3f 	bl	80007b8 <__aeabi_i2d>
 8008b3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008b3e:	3501      	adds	r5, #1
 8008b40:	e7df      	b.n	8008b02 <__kernel_rem_pio2+0x5a>
 8008b42:	ec51 0b18 	vmov	r0, r1, d8
 8008b46:	e7f8      	b.n	8008b3a <__kernel_rem_pio2+0x92>
 8008b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008b50:	f7f7 fbb6 	bl	80002c0 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b5c:	f7f7 fce0 	bl	8000520 <__adddf3>
 8008b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b64:	3601      	adds	r6, #1
 8008b66:	9b05      	ldr	r3, [sp, #20]
 8008b68:	429e      	cmp	r6, r3
 8008b6a:	f1a7 0708 	sub.w	r7, r7, #8
 8008b6e:	ddeb      	ble.n	8008b48 <__kernel_rem_pio2+0xa0>
 8008b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b74:	f108 0801 	add.w	r8, r8, #1
 8008b78:	ecab 7b02 	vstmia	fp!, {d7}
 8008b7c:	3508      	adds	r5, #8
 8008b7e:	e7ca      	b.n	8008b16 <__kernel_rem_pio2+0x6e>
 8008b80:	9b00      	ldr	r3, [sp, #0]
 8008b82:	aa0c      	add	r2, sp, #48	; 0x30
 8008b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b8a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008b8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b90:	9c00      	ldr	r4, [sp, #0]
 8008b92:	930a      	str	r3, [sp, #40]	; 0x28
 8008b94:	00e3      	lsls	r3, r4, #3
 8008b96:	9308      	str	r3, [sp, #32]
 8008b98:	ab98      	add	r3, sp, #608	; 0x260
 8008b9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008ba2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008ba6:	ab70      	add	r3, sp, #448	; 0x1c0
 8008ba8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008bac:	46c3      	mov	fp, r8
 8008bae:	46a1      	mov	r9, r4
 8008bb0:	f1b9 0f00 	cmp.w	r9, #0
 8008bb4:	f1a5 0508 	sub.w	r5, r5, #8
 8008bb8:	dc77      	bgt.n	8008caa <__kernel_rem_pio2+0x202>
 8008bba:	ec47 6b10 	vmov	d0, r6, r7
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	f000 fac2 	bl	8009148 <scalbn>
 8008bc4:	ec57 6b10 	vmov	r6, r7, d0
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008bce:	ee10 0a10 	vmov	r0, s0
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 fb74 	bl	80002c0 <__aeabi_dmul>
 8008bd8:	ec41 0b10 	vmov	d0, r0, r1
 8008bdc:	f000 fb34 	bl	8009248 <floor>
 8008be0:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <__kernel_rem_pio2+0x324>)
 8008be2:	ec51 0b10 	vmov	r0, r1, d0
 8008be6:	2200      	movs	r2, #0
 8008be8:	f7f7 fb6a 	bl	80002c0 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 fc92 	bl	800051c <__aeabi_dsub>
 8008bf8:	460f      	mov	r7, r1
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	f7f7 fece 	bl	800099c <__aeabi_d2iz>
 8008c00:	9002      	str	r0, [sp, #8]
 8008c02:	f7f7 fdd9 	bl	80007b8 <__aeabi_i2d>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	f7f7 fc85 	bl	800051c <__aeabi_dsub>
 8008c12:	f1ba 0f00 	cmp.w	sl, #0
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	dd6d      	ble.n	8008cf8 <__kernel_rem_pio2+0x250>
 8008c1c:	1e61      	subs	r1, r4, #1
 8008c1e:	ab0c      	add	r3, sp, #48	; 0x30
 8008c20:	9d02      	ldr	r5, [sp, #8]
 8008c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c26:	f1ca 0018 	rsb	r0, sl, #24
 8008c2a:	fa43 f200 	asr.w	r2, r3, r0
 8008c2e:	4415      	add	r5, r2
 8008c30:	4082      	lsls	r2, r0
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	aa0c      	add	r2, sp, #48	; 0x30
 8008c36:	9502      	str	r5, [sp, #8]
 8008c38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008c3c:	f1ca 0217 	rsb	r2, sl, #23
 8008c40:	fa43 fb02 	asr.w	fp, r3, r2
 8008c44:	f1bb 0f00 	cmp.w	fp, #0
 8008c48:	dd65      	ble.n	8008d16 <__kernel_rem_pio2+0x26e>
 8008c4a:	9b02      	ldr	r3, [sp, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	3301      	adds	r3, #1
 8008c50:	9302      	str	r3, [sp, #8]
 8008c52:	4615      	mov	r5, r2
 8008c54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008c58:	4294      	cmp	r4, r2
 8008c5a:	f300 809f 	bgt.w	8008d9c <__kernel_rem_pio2+0x2f4>
 8008c5e:	f1ba 0f00 	cmp.w	sl, #0
 8008c62:	dd07      	ble.n	8008c74 <__kernel_rem_pio2+0x1cc>
 8008c64:	f1ba 0f01 	cmp.w	sl, #1
 8008c68:	f000 80c1 	beq.w	8008dee <__kernel_rem_pio2+0x346>
 8008c6c:	f1ba 0f02 	cmp.w	sl, #2
 8008c70:	f000 80c7 	beq.w	8008e02 <__kernel_rem_pio2+0x35a>
 8008c74:	f1bb 0f02 	cmp.w	fp, #2
 8008c78:	d14d      	bne.n	8008d16 <__kernel_rem_pio2+0x26e>
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	4954      	ldr	r1, [pc, #336]	; (8008dd0 <__kernel_rem_pio2+0x328>)
 8008c80:	2000      	movs	r0, #0
 8008c82:	f7f7 fc4b 	bl	800051c <__aeabi_dsub>
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	d043      	beq.n	8008d16 <__kernel_rem_pio2+0x26e>
 8008c8e:	4650      	mov	r0, sl
 8008c90:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008dc0 <__kernel_rem_pio2+0x318>
 8008c94:	f000 fa58 	bl	8009148 <scalbn>
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ca0:	f7f7 fc3c 	bl	800051c <__aeabi_dsub>
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	e035      	b.n	8008d16 <__kernel_rem_pio2+0x26e>
 8008caa:	4b4a      	ldr	r3, [pc, #296]	; (8008dd4 <__kernel_rem_pio2+0x32c>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fb05 	bl	80002c0 <__aeabi_dmul>
 8008cb6:	f7f7 fe71 	bl	800099c <__aeabi_d2iz>
 8008cba:	f7f7 fd7d 	bl	80007b8 <__aeabi_i2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	ec43 2b18 	vmov	d8, r2, r3
 8008cc6:	4b44      	ldr	r3, [pc, #272]	; (8008dd8 <__kernel_rem_pio2+0x330>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f7f7 faf9 	bl	80002c0 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fc21 	bl	800051c <__aeabi_dsub>
 8008cda:	f7f7 fe5f 	bl	800099c <__aeabi_d2iz>
 8008cde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ce2:	f84b 0b04 	str.w	r0, [fp], #4
 8008ce6:	ec51 0b18 	vmov	r0, r1, d8
 8008cea:	f7f7 fc19 	bl	8000520 <__adddf3>
 8008cee:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	460f      	mov	r7, r1
 8008cf6:	e75b      	b.n	8008bb0 <__kernel_rem_pio2+0x108>
 8008cf8:	d106      	bne.n	8008d08 <__kernel_rem_pio2+0x260>
 8008cfa:	1e63      	subs	r3, r4, #1
 8008cfc:	aa0c      	add	r2, sp, #48	; 0x30
 8008cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d02:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008d06:	e79d      	b.n	8008c44 <__kernel_rem_pio2+0x19c>
 8008d08:	4b34      	ldr	r3, [pc, #208]	; (8008ddc <__kernel_rem_pio2+0x334>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7f7 fe32 	bl	8000974 <__aeabi_dcmpge>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d140      	bne.n	8008d96 <__kernel_rem_pio2+0x2ee>
 8008d14:	4683      	mov	fp, r0
 8008d16:	2200      	movs	r2, #0
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fe0b 	bl	8000938 <__aeabi_dcmpeq>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f000 80c1 	beq.w	8008eaa <__kernel_rem_pio2+0x402>
 8008d28:	1e65      	subs	r5, r4, #1
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	9900      	ldr	r1, [sp, #0]
 8008d30:	428b      	cmp	r3, r1
 8008d32:	da6d      	bge.n	8008e10 <__kernel_rem_pio2+0x368>
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	f000 808a 	beq.w	8008e4e <__kernel_rem_pio2+0x3a6>
 8008d3a:	ab0c      	add	r3, sp, #48	; 0x30
 8008d3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008d40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80ae 	beq.w	8008ea6 <__kernel_rem_pio2+0x3fe>
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008dc0 <__kernel_rem_pio2+0x318>
 8008d50:	f000 f9fa 	bl	8009148 <scalbn>
 8008d54:	1c6b      	adds	r3, r5, #1
 8008d56:	00da      	lsls	r2, r3, #3
 8008d58:	9205      	str	r2, [sp, #20]
 8008d5a:	ec57 6b10 	vmov	r6, r7, d0
 8008d5e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008d60:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008dd4 <__kernel_rem_pio2+0x32c>
 8008d64:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008d68:	462c      	mov	r4, r5
 8008d6a:	f04f 0800 	mov.w	r8, #0
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	f280 80d4 	bge.w	8008f1c <__kernel_rem_pio2+0x474>
 8008d74:	462c      	mov	r4, r5
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	f2c0 8102 	blt.w	8008f80 <__kernel_rem_pio2+0x4d8>
 8008d7c:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <__kernel_rem_pio2+0x338>)
 8008d7e:	461e      	mov	r6, r3
 8008d80:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d82:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008d86:	1b2b      	subs	r3, r5, r4
 8008d88:	f04f 0900 	mov.w	r9, #0
 8008d8c:	f04f 0a00 	mov.w	sl, #0
 8008d90:	2700      	movs	r7, #0
 8008d92:	9306      	str	r3, [sp, #24]
 8008d94:	e0e6      	b.n	8008f64 <__kernel_rem_pio2+0x4bc>
 8008d96:	f04f 0b02 	mov.w	fp, #2
 8008d9a:	e756      	b.n	8008c4a <__kernel_rem_pio2+0x1a2>
 8008d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008da0:	bb05      	cbnz	r5, 8008de4 <__kernel_rem_pio2+0x33c>
 8008da2:	b123      	cbz	r3, 8008dae <__kernel_rem_pio2+0x306>
 8008da4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008da8:	f8c8 3000 	str.w	r3, [r8]
 8008dac:	2301      	movs	r3, #1
 8008dae:	3201      	adds	r2, #1
 8008db0:	f108 0804 	add.w	r8, r8, #4
 8008db4:	461d      	mov	r5, r3
 8008db6:	e74f      	b.n	8008c58 <__kernel_rem_pio2+0x1b0>
	...
 8008dc4:	3ff00000 	.word	0x3ff00000
 8008dc8:	080095d0 	.word	0x080095d0
 8008dcc:	40200000 	.word	0x40200000
 8008dd0:	3ff00000 	.word	0x3ff00000
 8008dd4:	3e700000 	.word	0x3e700000
 8008dd8:	41700000 	.word	0x41700000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	08009590 	.word	0x08009590
 8008de4:	1acb      	subs	r3, r1, r3
 8008de6:	f8c8 3000 	str.w	r3, [r8]
 8008dea:	462b      	mov	r3, r5
 8008dec:	e7df      	b.n	8008dae <__kernel_rem_pio2+0x306>
 8008dee:	1e62      	subs	r2, r4, #1
 8008df0:	ab0c      	add	r3, sp, #48	; 0x30
 8008df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008dfa:	a90c      	add	r1, sp, #48	; 0x30
 8008dfc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e00:	e738      	b.n	8008c74 <__kernel_rem_pio2+0x1cc>
 8008e02:	1e62      	subs	r2, r4, #1
 8008e04:	ab0c      	add	r3, sp, #48	; 0x30
 8008e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e0e:	e7f4      	b.n	8008dfa <__kernel_rem_pio2+0x352>
 8008e10:	a90c      	add	r1, sp, #48	; 0x30
 8008e12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	e788      	b.n	8008d2e <__kernel_rem_pio2+0x286>
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008e22:	2900      	cmp	r1, #0
 8008e24:	d0fa      	beq.n	8008e1c <__kernel_rem_pio2+0x374>
 8008e26:	9a08      	ldr	r2, [sp, #32]
 8008e28:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008e2c:	446a      	add	r2, sp
 8008e2e:	3a98      	subs	r2, #152	; 0x98
 8008e30:	9208      	str	r2, [sp, #32]
 8008e32:	9a06      	ldr	r2, [sp, #24]
 8008e34:	a920      	add	r1, sp, #128	; 0x80
 8008e36:	18a2      	adds	r2, r4, r2
 8008e38:	18e3      	adds	r3, r4, r3
 8008e3a:	f104 0801 	add.w	r8, r4, #1
 8008e3e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	4543      	cmp	r3, r8
 8008e48:	da04      	bge.n	8008e54 <__kernel_rem_pio2+0x3ac>
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	e6a2      	b.n	8008b94 <__kernel_rem_pio2+0xec>
 8008e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7e4      	b.n	8008e1e <__kernel_rem_pio2+0x376>
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008e5a:	f7f7 fcad 	bl	80007b8 <__aeabi_i2d>
 8008e5e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e64:	46ab      	mov	fp, r5
 8008e66:	461c      	mov	r4, r3
 8008e68:	f04f 0900 	mov.w	r9, #0
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	2700      	movs	r7, #0
 8008e70:	9b05      	ldr	r3, [sp, #20]
 8008e72:	4599      	cmp	r9, r3
 8008e74:	dd06      	ble.n	8008e84 <__kernel_rem_pio2+0x3dc>
 8008e76:	9b08      	ldr	r3, [sp, #32]
 8008e78:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008e7c:	f108 0801 	add.w	r8, r8, #1
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	e7df      	b.n	8008e44 <__kernel_rem_pio2+0x39c>
 8008e84:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008e88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008e8c:	f7f7 fa18 	bl	80002c0 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4630      	mov	r0, r6
 8008e96:	4639      	mov	r1, r7
 8008e98:	f7f7 fb42 	bl	8000520 <__adddf3>
 8008e9c:	f109 0901 	add.w	r9, r9, #1
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	460f      	mov	r7, r1
 8008ea4:	e7e4      	b.n	8008e70 <__kernel_rem_pio2+0x3c8>
 8008ea6:	3d01      	subs	r5, #1
 8008ea8:	e747      	b.n	8008d3a <__kernel_rem_pio2+0x292>
 8008eaa:	ec47 6b10 	vmov	d0, r6, r7
 8008eae:	f1ca 0000 	rsb	r0, sl, #0
 8008eb2:	f000 f949 	bl	8009148 <scalbn>
 8008eb6:	ec57 6b10 	vmov	r6, r7, d0
 8008eba:	4ba0      	ldr	r3, [pc, #640]	; (800913c <__kernel_rem_pio2+0x694>)
 8008ebc:	ee10 0a10 	vmov	r0, s0
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fd56 	bl	8000974 <__aeabi_dcmpge>
 8008ec8:	b1f8      	cbz	r0, 8008f0a <__kernel_rem_pio2+0x462>
 8008eca:	4b9d      	ldr	r3, [pc, #628]	; (8009140 <__kernel_rem_pio2+0x698>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 f9f5 	bl	80002c0 <__aeabi_dmul>
 8008ed6:	f7f7 fd61 	bl	800099c <__aeabi_d2iz>
 8008eda:	4680      	mov	r8, r0
 8008edc:	f7f7 fc6c 	bl	80007b8 <__aeabi_i2d>
 8008ee0:	4b96      	ldr	r3, [pc, #600]	; (800913c <__kernel_rem_pio2+0x694>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f7f7 f9ec 	bl	80002c0 <__aeabi_dmul>
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4602      	mov	r2, r0
 8008eec:	4639      	mov	r1, r7
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7f7 fb14 	bl	800051c <__aeabi_dsub>
 8008ef4:	f7f7 fd52 	bl	800099c <__aeabi_d2iz>
 8008ef8:	1c65      	adds	r5, r4, #1
 8008efa:	ab0c      	add	r3, sp, #48	; 0x30
 8008efc:	f10a 0a18 	add.w	sl, sl, #24
 8008f00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f08:	e71f      	b.n	8008d4a <__kernel_rem_pio2+0x2a2>
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 fd45 	bl	800099c <__aeabi_d2iz>
 8008f12:	ab0c      	add	r3, sp, #48	; 0x30
 8008f14:	4625      	mov	r5, r4
 8008f16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f1a:	e716      	b.n	8008d4a <__kernel_rem_pio2+0x2a2>
 8008f1c:	ab0c      	add	r3, sp, #48	; 0x30
 8008f1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008f22:	f7f7 fc49 	bl	80007b8 <__aeabi_i2d>
 8008f26:	4632      	mov	r2, r6
 8008f28:	463b      	mov	r3, r7
 8008f2a:	f7f7 f9c9 	bl	80002c0 <__aeabi_dmul>
 8008f2e:	4642      	mov	r2, r8
 8008f30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008f34:	464b      	mov	r3, r9
 8008f36:	4630      	mov	r0, r6
 8008f38:	4639      	mov	r1, r7
 8008f3a:	f7f7 f9c1 	bl	80002c0 <__aeabi_dmul>
 8008f3e:	3c01      	subs	r4, #1
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	e713      	b.n	8008d6e <__kernel_rem_pio2+0x2c6>
 8008f46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008f4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008f4e:	f7f7 f9b7 	bl	80002c0 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4648      	mov	r0, r9
 8008f58:	4651      	mov	r1, sl
 8008f5a:	f7f7 fae1 	bl	8000520 <__adddf3>
 8008f5e:	3701      	adds	r7, #1
 8008f60:	4681      	mov	r9, r0
 8008f62:	468a      	mov	sl, r1
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	429f      	cmp	r7, r3
 8008f68:	dc02      	bgt.n	8008f70 <__kernel_rem_pio2+0x4c8>
 8008f6a:	9b06      	ldr	r3, [sp, #24]
 8008f6c:	429f      	cmp	r7, r3
 8008f6e:	ddea      	ble.n	8008f46 <__kernel_rem_pio2+0x49e>
 8008f70:	9a06      	ldr	r2, [sp, #24]
 8008f72:	ab48      	add	r3, sp, #288	; 0x120
 8008f74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008f78:	e9c6 9a00 	strd	r9, sl, [r6]
 8008f7c:	3c01      	subs	r4, #1
 8008f7e:	e6fa      	b.n	8008d76 <__kernel_rem_pio2+0x2ce>
 8008f80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	dc0b      	bgt.n	8008f9e <__kernel_rem_pio2+0x4f6>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	dc39      	bgt.n	8008ffe <__kernel_rem_pio2+0x556>
 8008f8a:	d05d      	beq.n	8009048 <__kernel_rem_pio2+0x5a0>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	f003 0007 	and.w	r0, r3, #7
 8008f92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008f96:	ecbd 8b02 	vpop	{d8}
 8008f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d1f3      	bne.n	8008f8c <__kernel_rem_pio2+0x4e4>
 8008fa4:	9b05      	ldr	r3, [sp, #20]
 8008fa6:	9500      	str	r5, [sp, #0]
 8008fa8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008fac:	eb0d 0403 	add.w	r4, sp, r3
 8008fb0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008fb4:	46a2      	mov	sl, r4
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f1aa 0a08 	sub.w	sl, sl, #8
 8008fbe:	dc69      	bgt.n	8009094 <__kernel_rem_pio2+0x5ec>
 8008fc0:	46aa      	mov	sl, r5
 8008fc2:	f1ba 0f01 	cmp.w	sl, #1
 8008fc6:	f1a4 0408 	sub.w	r4, r4, #8
 8008fca:	f300 8083 	bgt.w	80090d4 <__kernel_rem_pio2+0x62c>
 8008fce:	9c05      	ldr	r4, [sp, #20]
 8008fd0:	ab48      	add	r3, sp, #288	; 0x120
 8008fd2:	441c      	add	r4, r3
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	2d01      	cmp	r5, #1
 8008fda:	f300 809a 	bgt.w	8009112 <__kernel_rem_pio2+0x66a>
 8008fde:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008fe2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008fe6:	f1bb 0f00 	cmp.w	fp, #0
 8008fea:	f040 8098 	bne.w	800911e <__kernel_rem_pio2+0x676>
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	e9c3 7800 	strd	r7, r8, [r3]
 8008ff4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008ff8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008ffc:	e7c6      	b.n	8008f8c <__kernel_rem_pio2+0x4e4>
 8008ffe:	9e05      	ldr	r6, [sp, #20]
 8009000:	ab48      	add	r3, sp, #288	; 0x120
 8009002:	441e      	add	r6, r3
 8009004:	462c      	mov	r4, r5
 8009006:	2000      	movs	r0, #0
 8009008:	2100      	movs	r1, #0
 800900a:	2c00      	cmp	r4, #0
 800900c:	da33      	bge.n	8009076 <__kernel_rem_pio2+0x5ce>
 800900e:	f1bb 0f00 	cmp.w	fp, #0
 8009012:	d036      	beq.n	8009082 <__kernel_rem_pio2+0x5da>
 8009014:	4602      	mov	r2, r0
 8009016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800901a:	9c04      	ldr	r4, [sp, #16]
 800901c:	e9c4 2300 	strd	r2, r3, [r4]
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009028:	f7f7 fa78 	bl	800051c <__aeabi_dsub>
 800902c:	ae4a      	add	r6, sp, #296	; 0x128
 800902e:	2401      	movs	r4, #1
 8009030:	42a5      	cmp	r5, r4
 8009032:	da29      	bge.n	8009088 <__kernel_rem_pio2+0x5e0>
 8009034:	f1bb 0f00 	cmp.w	fp, #0
 8009038:	d002      	beq.n	8009040 <__kernel_rem_pio2+0x598>
 800903a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800903e:	4619      	mov	r1, r3
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009046:	e7a1      	b.n	8008f8c <__kernel_rem_pio2+0x4e4>
 8009048:	9c05      	ldr	r4, [sp, #20]
 800904a:	ab48      	add	r3, sp, #288	; 0x120
 800904c:	441c      	add	r4, r3
 800904e:	2000      	movs	r0, #0
 8009050:	2100      	movs	r1, #0
 8009052:	2d00      	cmp	r5, #0
 8009054:	da09      	bge.n	800906a <__kernel_rem_pio2+0x5c2>
 8009056:	f1bb 0f00 	cmp.w	fp, #0
 800905a:	d002      	beq.n	8009062 <__kernel_rem_pio2+0x5ba>
 800905c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009060:	4619      	mov	r1, r3
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	e9c3 0100 	strd	r0, r1, [r3]
 8009068:	e790      	b.n	8008f8c <__kernel_rem_pio2+0x4e4>
 800906a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800906e:	f7f7 fa57 	bl	8000520 <__adddf3>
 8009072:	3d01      	subs	r5, #1
 8009074:	e7ed      	b.n	8009052 <__kernel_rem_pio2+0x5aa>
 8009076:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800907a:	f7f7 fa51 	bl	8000520 <__adddf3>
 800907e:	3c01      	subs	r4, #1
 8009080:	e7c3      	b.n	800900a <__kernel_rem_pio2+0x562>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	e7c8      	b.n	800901a <__kernel_rem_pio2+0x572>
 8009088:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800908c:	f7f7 fa48 	bl	8000520 <__adddf3>
 8009090:	3401      	adds	r4, #1
 8009092:	e7cd      	b.n	8009030 <__kernel_rem_pio2+0x588>
 8009094:	e9da 8900 	ldrd	r8, r9, [sl]
 8009098:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800909c:	9b00      	ldr	r3, [sp, #0]
 800909e:	3b01      	subs	r3, #1
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4632      	mov	r2, r6
 80090a4:	463b      	mov	r3, r7
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fa39 	bl	8000520 <__adddf3>
 80090ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 fa2f 	bl	800051c <__aeabi_dsub>
 80090be:	4632      	mov	r2, r6
 80090c0:	463b      	mov	r3, r7
 80090c2:	f7f7 fa2d 	bl	8000520 <__adddf3>
 80090c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80090ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090ce:	ed8a 7b00 	vstr	d7, [sl]
 80090d2:	e770      	b.n	8008fb6 <__kernel_rem_pio2+0x50e>
 80090d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80090d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80090dc:	4640      	mov	r0, r8
 80090de:	4632      	mov	r2, r6
 80090e0:	463b      	mov	r3, r7
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 fa1c 	bl	8000520 <__adddf3>
 80090e8:	e9cd 0100 	strd	r0, r1, [sp]
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	f7f7 fa12 	bl	800051c <__aeabi_dsub>
 80090f8:	4632      	mov	r2, r6
 80090fa:	463b      	mov	r3, r7
 80090fc:	f7f7 fa10 	bl	8000520 <__adddf3>
 8009100:	ed9d 7b00 	vldr	d7, [sp]
 8009104:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009108:	ed84 7b00 	vstr	d7, [r4]
 800910c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009110:	e757      	b.n	8008fc2 <__kernel_rem_pio2+0x51a>
 8009112:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009116:	f7f7 fa03 	bl	8000520 <__adddf3>
 800911a:	3d01      	subs	r5, #1
 800911c:	e75c      	b.n	8008fd8 <__kernel_rem_pio2+0x530>
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	9a04      	ldr	r2, [sp, #16]
 8009122:	601f      	str	r7, [r3, #0]
 8009124:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009128:	605c      	str	r4, [r3, #4]
 800912a:	609d      	str	r5, [r3, #8]
 800912c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009130:	60d3      	str	r3, [r2, #12]
 8009132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009136:	6110      	str	r0, [r2, #16]
 8009138:	6153      	str	r3, [r2, #20]
 800913a:	e727      	b.n	8008f8c <__kernel_rem_pio2+0x4e4>
 800913c:	41700000 	.word	0x41700000
 8009140:	3e700000 	.word	0x3e700000
 8009144:	00000000 	.word	0x00000000

08009148 <scalbn>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	ec55 4b10 	vmov	r4, r5, d0
 800914e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009152:	4606      	mov	r6, r0
 8009154:	462b      	mov	r3, r5
 8009156:	b999      	cbnz	r1, 8009180 <scalbn+0x38>
 8009158:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800915c:	4323      	orrs	r3, r4
 800915e:	d03f      	beq.n	80091e0 <scalbn+0x98>
 8009160:	4b35      	ldr	r3, [pc, #212]	; (8009238 <scalbn+0xf0>)
 8009162:	4629      	mov	r1, r5
 8009164:	ee10 0a10 	vmov	r0, s0
 8009168:	2200      	movs	r2, #0
 800916a:	f7f7 f8a9 	bl	80002c0 <__aeabi_dmul>
 800916e:	4b33      	ldr	r3, [pc, #204]	; (800923c <scalbn+0xf4>)
 8009170:	429e      	cmp	r6, r3
 8009172:	4604      	mov	r4, r0
 8009174:	460d      	mov	r5, r1
 8009176:	da10      	bge.n	800919a <scalbn+0x52>
 8009178:	a327      	add	r3, pc, #156	; (adr r3, 8009218 <scalbn+0xd0>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	e01f      	b.n	80091c0 <scalbn+0x78>
 8009180:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009184:	4291      	cmp	r1, r2
 8009186:	d10c      	bne.n	80091a2 <scalbn+0x5a>
 8009188:	ee10 2a10 	vmov	r2, s0
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 f9c6 	bl	8000520 <__adddf3>
 8009194:	4604      	mov	r4, r0
 8009196:	460d      	mov	r5, r1
 8009198:	e022      	b.n	80091e0 <scalbn+0x98>
 800919a:	460b      	mov	r3, r1
 800919c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80091a0:	3936      	subs	r1, #54	; 0x36
 80091a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80091a6:	4296      	cmp	r6, r2
 80091a8:	dd0d      	ble.n	80091c6 <scalbn+0x7e>
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	a11c      	add	r1, pc, #112	; (adr r1, 8009220 <scalbn+0xd8>)
 80091ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091b2:	da02      	bge.n	80091ba <scalbn+0x72>
 80091b4:	a11c      	add	r1, pc, #112	; (adr r1, 8009228 <scalbn+0xe0>)
 80091b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ba:	a319      	add	r3, pc, #100	; (adr r3, 8009220 <scalbn+0xd8>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f7f7 f87e 	bl	80002c0 <__aeabi_dmul>
 80091c4:	e7e6      	b.n	8009194 <scalbn+0x4c>
 80091c6:	1872      	adds	r2, r6, r1
 80091c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80091cc:	428a      	cmp	r2, r1
 80091ce:	dcec      	bgt.n	80091aa <scalbn+0x62>
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	dd08      	ble.n	80091e6 <scalbn+0x9e>
 80091d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091e0:	ec45 4b10 	vmov	d0, r4, r5
 80091e4:	bd70      	pop	{r4, r5, r6, pc}
 80091e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80091ea:	da08      	bge.n	80091fe <scalbn+0xb6>
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	a10a      	add	r1, pc, #40	; (adr r1, 8009218 <scalbn+0xd0>)
 80091f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f4:	dac0      	bge.n	8009178 <scalbn+0x30>
 80091f6:	a10e      	add	r1, pc, #56	; (adr r1, 8009230 <scalbn+0xe8>)
 80091f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fc:	e7bc      	b.n	8009178 <scalbn+0x30>
 80091fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009202:	3236      	adds	r2, #54	; 0x36
 8009204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800920c:	4620      	mov	r0, r4
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <scalbn+0xf8>)
 8009210:	2200      	movs	r2, #0
 8009212:	e7d5      	b.n	80091c0 <scalbn+0x78>
 8009214:	f3af 8000 	nop.w
 8009218:	c2f8f359 	.word	0xc2f8f359
 800921c:	01a56e1f 	.word	0x01a56e1f
 8009220:	8800759c 	.word	0x8800759c
 8009224:	7e37e43c 	.word	0x7e37e43c
 8009228:	8800759c 	.word	0x8800759c
 800922c:	fe37e43c 	.word	0xfe37e43c
 8009230:	c2f8f359 	.word	0xc2f8f359
 8009234:	81a56e1f 	.word	0x81a56e1f
 8009238:	43500000 	.word	0x43500000
 800923c:	ffff3cb0 	.word	0xffff3cb0
 8009240:	3c900000 	.word	0x3c900000
 8009244:	00000000 	.word	0x00000000

08009248 <floor>:
 8009248:	ec51 0b10 	vmov	r0, r1, d0
 800924c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009258:	2e13      	cmp	r6, #19
 800925a:	ee10 5a10 	vmov	r5, s0
 800925e:	ee10 8a10 	vmov	r8, s0
 8009262:	460c      	mov	r4, r1
 8009264:	dc31      	bgt.n	80092ca <floor+0x82>
 8009266:	2e00      	cmp	r6, #0
 8009268:	da14      	bge.n	8009294 <floor+0x4c>
 800926a:	a333      	add	r3, pc, #204	; (adr r3, 8009338 <floor+0xf0>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f956 	bl	8000520 <__adddf3>
 8009274:	2200      	movs	r2, #0
 8009276:	2300      	movs	r3, #0
 8009278:	f7f7 fb86 	bl	8000988 <__aeabi_dcmpgt>
 800927c:	b138      	cbz	r0, 800928e <floor+0x46>
 800927e:	2c00      	cmp	r4, #0
 8009280:	da53      	bge.n	800932a <floor+0xe2>
 8009282:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009286:	4325      	orrs	r5, r4
 8009288:	d052      	beq.n	8009330 <floor+0xe8>
 800928a:	4c2d      	ldr	r4, [pc, #180]	; (8009340 <floor+0xf8>)
 800928c:	2500      	movs	r5, #0
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	e024      	b.n	80092de <floor+0x96>
 8009294:	4f2b      	ldr	r7, [pc, #172]	; (8009344 <floor+0xfc>)
 8009296:	4137      	asrs	r7, r6
 8009298:	ea01 0307 	and.w	r3, r1, r7
 800929c:	4303      	orrs	r3, r0
 800929e:	d01e      	beq.n	80092de <floor+0x96>
 80092a0:	a325      	add	r3, pc, #148	; (adr r3, 8009338 <floor+0xf0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f7 f93b 	bl	8000520 <__adddf3>
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	f7f7 fb6b 	bl	8000988 <__aeabi_dcmpgt>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d0eb      	beq.n	800928e <floor+0x46>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	bfbe      	ittt	lt
 80092ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092be:	4133      	asrlt	r3, r6
 80092c0:	18e4      	addlt	r4, r4, r3
 80092c2:	ea24 0407 	bic.w	r4, r4, r7
 80092c6:	2500      	movs	r5, #0
 80092c8:	e7e1      	b.n	800928e <floor+0x46>
 80092ca:	2e33      	cmp	r6, #51	; 0x33
 80092cc:	dd0b      	ble.n	80092e6 <floor+0x9e>
 80092ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80092d2:	d104      	bne.n	80092de <floor+0x96>
 80092d4:	ee10 2a10 	vmov	r2, s0
 80092d8:	460b      	mov	r3, r1
 80092da:	f7f7 f921 	bl	8000520 <__adddf3>
 80092de:	ec41 0b10 	vmov	d0, r0, r1
 80092e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80092ea:	f04f 37ff 	mov.w	r7, #4294967295
 80092ee:	40df      	lsrs	r7, r3
 80092f0:	4238      	tst	r0, r7
 80092f2:	d0f4      	beq.n	80092de <floor+0x96>
 80092f4:	a310      	add	r3, pc, #64	; (adr r3, 8009338 <floor+0xf0>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f7 f911 	bl	8000520 <__adddf3>
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	f7f7 fb41 	bl	8000988 <__aeabi_dcmpgt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d0c1      	beq.n	800928e <floor+0x46>
 800930a:	2c00      	cmp	r4, #0
 800930c:	da0a      	bge.n	8009324 <floor+0xdc>
 800930e:	2e14      	cmp	r6, #20
 8009310:	d101      	bne.n	8009316 <floor+0xce>
 8009312:	3401      	adds	r4, #1
 8009314:	e006      	b.n	8009324 <floor+0xdc>
 8009316:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800931a:	2301      	movs	r3, #1
 800931c:	40b3      	lsls	r3, r6
 800931e:	441d      	add	r5, r3
 8009320:	45a8      	cmp	r8, r5
 8009322:	d8f6      	bhi.n	8009312 <floor+0xca>
 8009324:	ea25 0507 	bic.w	r5, r5, r7
 8009328:	e7b1      	b.n	800928e <floor+0x46>
 800932a:	2500      	movs	r5, #0
 800932c:	462c      	mov	r4, r5
 800932e:	e7ae      	b.n	800928e <floor+0x46>
 8009330:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009334:	e7ab      	b.n	800928e <floor+0x46>
 8009336:	bf00      	nop
 8009338:	8800759c 	.word	0x8800759c
 800933c:	7e37e43c 	.word	0x7e37e43c
 8009340:	bff00000 	.word	0xbff00000
 8009344:	000fffff 	.word	0x000fffff

08009348 <_init>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr

08009354 <_fini>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr
