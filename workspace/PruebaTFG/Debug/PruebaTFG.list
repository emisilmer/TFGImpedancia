
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003330  08003330  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08003330  08003330  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003330  08003330  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000050  08003388  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003388  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d853  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002010  00000000  00000000  0002d916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0002f928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abe  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251ce  00000000  00000000  000311de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eab8  00000000  00000000  000563ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4309  00000000  00000000  00064e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bb4  00000000  00000000  00159170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0015cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003308 	.word	0x08003308

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	08003308 	.word	0x08003308

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fa90 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f81d 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f8f7 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000836:	f000 f8cb 	bl	80009d0 <MX_DMA_Init>
  MX_DAC1_Init();
 800083a:	f000 f859 	bl	80008f0 <MX_DAC1_Init>
  MX_TIM7_Init();
 800083e:	f000 f891 	bl	8000964 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1,(uint32_t*)lut,lut_size,DAC_ALIGN_12B_R);
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <main+0x38>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	9200      	str	r2, [sp, #0]
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <main+0x3c>)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <main+0x40>)
 8000850:	f000 fc42 	bl	80010d8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim7);
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <main+0x44>)
 8000856:	f002 f97d 	bl	8002b54 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	e7fe      	b.n	800085a <main+0x36>
 800085c:	20000040 	.word	0x20000040
 8000860:	20000000 	.word	0x20000000
 8000864:	2000006c 	.word	0x2000006c
 8000868:	200000e0 	.word	0x200000e0

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	; 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	2238      	movs	r2, #56	; 0x38
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fd18 	bl	80032b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000892:	f001 fb5b 	bl	8001f4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fbf1 	bl	8002094 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008b8:	f000 f8cc 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fef4 	bl	80026c4 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008e2:	f000 f8b7 	bl	8000a54 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2230      	movs	r2, #48	; 0x30
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fcd7 	bl	80032b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_DAC1_Init+0x6c>)
 8000904:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_DAC1_Init+0x70>)
 8000906:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000908:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_DAC1_Init+0x6c>)
 800090a:	f000 fbc2 	bl	8001092 <HAL_DAC_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000914:	f000 f89e 	bl	8000a54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000918:	2302      	movs	r3, #2
 800091a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_DAC1_Init+0x6c>)
 8000944:	f000 fcdc 	bl	8001300 <HAL_DAC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800094e:	f000 f881 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	; 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000006c 	.word	0x2000006c
 8000960:	50000800 	.word	0x50000800

08000964 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_TIM7_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_TIM7_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_TIM7_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_TIM7_Init+0x64>)
 8000994:	f002 f886 	bl	8002aa4 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800099e:	f000 f859 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_TIM7_Init+0x64>)
 80009b0:	f002 fba2 	bl	80030f8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80009ba:	f000 f84b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000e0 	.word	0x200000e0
 80009cc:	40001400 	.word	0x40001400

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_DMA_Init+0x50>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_DMA_Init+0x50>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6493      	str	r3, [r2, #72]	; 0x48
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_DMA_Init+0x50>)
 80009e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_DMA_Init+0x50>)
 80009f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <MX_DMA_Init+0x50>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6493      	str	r3, [r2, #72]	; 0x48
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_DMA_Init+0x50>)
 80009fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200b      	movs	r0, #11
 8000a0c:	f000 fb0d 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a10:	200b      	movs	r0, #11
 8000a12:	f000 fb24 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_GPIO_Init+0x2c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <MX_GPIO_Init+0x2c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x2c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	; 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <HAL_DAC_MspInit+0xcc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d14f      	bne.n	8000b6a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000afa:	2310      	movs	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 f89a 	bl	8001c48 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <HAL_DAC_MspInit+0xd8>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b50:	f000 fe08 	bl	8001764 <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000b5a:	f7ff ff7b 	bl	8000a54 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	50000800 	.word	0x50000800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	20000080 	.word	0x20000080
 8000b80:	40020008 	.word	0x40020008

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d113      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_TIM_Base_MspInit+0x48>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <HAL_TIM_Base_MspInit+0x48>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_Base_MspInit+0x48>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2037      	movs	r0, #55	; 0x37
 8000bb4:	f000 fa39 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000bb8:	2037      	movs	r0, #55	; 0x37
 8000bba:	f000 fa50 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001400 	.word	0x40001400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8ea 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel1_IRQHandler+0x10>)
 8000c2a:	f000 febe 	bl	80019aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000080 	.word	0x20000080

08000c38 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	extern DAC_HandleTypeDef hdac1;
	extern float lut[];
	extern uint32_t lut_size;
	static uint32_t indice = 0;

	uint32_t valorEntero = ((lut[indice] + 1.0) * 2047.5);
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <TIM7_DAC_IRQHandler+0x88>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <TIM7_DAC_IRQHandler+0x8c>)
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fd72 	bl	8000734 <__aeabi_f2d>
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <TIM7_DAC_IRQHandler+0x90>)
 8000c56:	f7ff fc0f 	bl	8000478 <__adddf3>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	a315      	add	r3, pc, #84	; (adr r3, 8000cb8 <TIM7_DAC_IRQHandler+0x80>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	f7ff fad6 	bl	8000218 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4610      	mov	r0, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f7ff fdb6 	bl	80007e4 <__aeabi_d2uiz>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	607b      	str	r3, [r7, #4]
	HAL_DAC_SetValue(&hdac1,DAC1_CHANNEL_1,DAC_ALIGN_12B_R,valorEntero);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <TIM7_DAC_IRQHandler+0x94>)
 8000c84:	f000 faf6 	bl	8001274 <HAL_DAC_SetValue>
	indice++;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <TIM7_DAC_IRQHandler+0x88>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <TIM7_DAC_IRQHandler+0x88>)
 8000c90:	6013      	str	r3, [r2, #0]
	if(indice >= lut_size){
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <TIM7_DAC_IRQHandler+0x88>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <TIM7_DAC_IRQHandler+0x98>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d302      	bcc.n	8000ca4 <TIM7_DAC_IRQHandler+0x6c>
			indice = 0;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <TIM7_DAC_IRQHandler+0x88>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
		}

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <TIM7_DAC_IRQHandler+0x9c>)
 8000ca6:	f001 ffcd 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	409ffe00 	.word	0x409ffe00
 8000cc0:	2000012c 	.word	0x2000012c
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	3ff00000 	.word	0x3ff00000
 8000ccc:	2000006c 	.word	0x2000006c
 8000cd0:	20000040 	.word	0x20000040
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 fac9 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fd79 	bl	8000824 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   r0, =_estack
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000d40:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000d44:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000d48:	20000134 	.word	0x20000134

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>

08000d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f95b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f80e 	bl	8000d80 <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e001      	b.n	8000d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d70:	f7ff fe76 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d74:	79fb      	ldrb	r3, [r7, #7]

}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_InitTick+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d022      	beq.n	8000dda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_InitTick+0x6c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_InitTick+0x68>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f966 	bl	800107a <HAL_SYSTICK_Config>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10f      	bne.n	8000dd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	d809      	bhi.n	8000dce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc2:	f000 f932 	bl	800102a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_InitTick+0x70>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e004      	b.n	8000dde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e001      	b.n	8000dde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000004c 	.word	0x2000004c
 8000dec:	20000044 	.word	0x20000044
 8000df0:	20000048 	.word	0x20000048

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x1c>)
 8000e04:	6013      	str	r3, [r2, #0]
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000130 	.word	0x20000130
 8000e14:	2000004c 	.word	0x2000004c

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000130 	.word	0x20000130

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d004      	beq.n	8000e54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_Delay+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e54:	bf00      	nop
 8000e56:	f7ff ffdf 	bl	8000e18 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8f7      	bhi.n	8000e56 <HAL_Delay+0x26>
  {
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000004c 	.word	0x2000004c

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff40 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa4 	bl	8000fd0 <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e014      	b.n	80010ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fcf7 	bl	8000aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2202      	movs	r2, #2
 80010be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	795b      	ldrb	r3, [r3, #5]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_DAC_Start_DMA+0x1e>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e0ae      	b.n	8001254 <HAL_DAC_Start_DMA+0x17c>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2202      	movs	r2, #2
 8001100:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d12f      	bne.n	8001168 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a53      	ldr	r2, [pc, #332]	; (800125c <HAL_DAC_Start_DMA+0x184>)
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_DAC_Start_DMA+0x188>)
 8001116:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_DAC_Start_DMA+0x18c>)
 800111e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800112e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	2b08      	cmp	r3, #8
 8001134:	d013      	beq.n	800115e <HAL_DAC_Start_DMA+0x86>
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	2b08      	cmp	r3, #8
 800113a:	d845      	bhi.n	80011c8 <HAL_DAC_Start_DMA+0xf0>
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_DAC_Start_DMA+0x72>
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d005      	beq.n	8001154 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001148:	e03e      	b.n	80011c8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3308      	adds	r3, #8
 8001150:	613b      	str	r3, [r7, #16]
        break;
 8001152:	e03c      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	330c      	adds	r3, #12
 800115a:	613b      	str	r3, [r7, #16]
        break;
 800115c:	e037      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3310      	adds	r3, #16
 8001164:	613b      	str	r3, [r7, #16]
        break;
 8001166:	e032      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a3e      	ldr	r2, [pc, #248]	; (8001268 <HAL_DAC_Start_DMA+0x190>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_DAC_Start_DMA+0x194>)
 8001176:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a3c      	ldr	r2, [pc, #240]	; (8001270 <HAL_DAC_Start_DMA+0x198>)
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b08      	cmp	r3, #8
 8001194:	d013      	beq.n	80011be <HAL_DAC_Start_DMA+0xe6>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d817      	bhi.n	80011cc <HAL_DAC_Start_DMA+0xf4>
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_DAC_Start_DMA+0xd2>
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d005      	beq.n	80011b4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80011a8:	e010      	b.n	80011cc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3314      	adds	r3, #20
 80011b0:	613b      	str	r3, [r7, #16]
        break;
 80011b2:	e00c      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3318      	adds	r3, #24
 80011ba:	613b      	str	r3, [r7, #16]
        break;
 80011bc:	e007      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	331c      	adds	r3, #28
 80011c4:	613b      	str	r3, [r7, #16]
        break;
 80011c6:	e002      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80011cc:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6898      	ldr	r0, [r3, #8]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	f000 fb61 	bl	80018b4 <HAL_DMA_Start_IT>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e010      	b.n	800121a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001206:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68d8      	ldr	r0, [r3, #12]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	f000 fb4f 	bl	80018b4 <HAL_DMA_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10f      	bne.n	8001246 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2201      	movs	r2, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fdf6 	bl	8000e30 <HAL_Delay>
 8001244:	e005      	b.n	8001252 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f043 0204 	orr.w	r2, r3, #4
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08001651 	.word	0x08001651
 8001260:	08001673 	.word	0x08001673
 8001264:	0800168f 	.word	0x0800168f
 8001268:	080016f9 	.word	0x080016f9
 800126c:	0800171b 	.word	0x0800171b
 8001270:	08001737 	.word	0x08001737

08001274 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e004      	b.n	80012ae <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	3314      	adds	r3, #20
 80012ac:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	461a      	mov	r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_DAC_ConfigChannel+0x18>
 8001314:	2302      	movs	r3, #2
 8001316:	e192      	b.n	800163e <HAL_DAC_ConfigChannel+0x33e>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2201      	movs	r2, #1
 800131c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2202      	movs	r2, #2
 8001322:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d174      	bne.n	8001416 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800132c:	f7ff fd74 	bl	8000e18 <HAL_GetTick>
 8001330:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d134      	bne.n	80013a2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001338:	e011      	b.n	800135e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800133a:	f7ff fd6d 	bl	8000e18 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d90a      	bls.n	800135e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	f043 0208 	orr.w	r2, r3, #8
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2203      	movs	r2, #3
 8001358:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e16f      	b.n	800163e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e6      	bne.n	800133a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fd5f 	bl	8000e30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	e01e      	b.n	80013bc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800137e:	f7ff fd4b 	bl	8000e18 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d90a      	bls.n	80013a2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f043 0208 	orr.w	r2, r3, #8
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2203      	movs	r2, #3
 800139c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e14d      	b.n	800163e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dbe8      	blt.n	800137e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fd3f 	bl	8000e30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	ea02 0103 	and.w	r1, r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	21ff      	movs	r1, #255	; 0xff
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	ea02 0103 	and.w	r1, r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d11d      	bne.n	800145a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	4013      	ands	r3, r2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	4313      	orrs	r3, r2
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2207      	movs	r2, #7
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4013      	ands	r3, r2
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	e00f      	b.n	80014a4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d102      	bne.n	8001492 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	e008      	b.n	80014a4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	e001      	b.n	80014a4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	6a3a      	ldr	r2, [r7, #32]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	4013      	ands	r3, r2
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_DAC_ConfigChannel+0x1d8>
 80014d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d6:	e000      	b.n	80014da <HAL_DAC_ConfigChannel+0x1da>
 80014d8:	2300      	movs	r3, #0
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	4013      	ands	r3, r2
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_DAC_ConfigChannel+0x204>
 80014fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001502:	e000      	b.n	8001506 <HAL_DAC_ConfigChannel+0x206>
 8001504:	2300      	movs	r3, #0
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d114      	bne.n	8001546 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800151c:	f001 fa70 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8001520:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_DAC_ConfigChannel+0x348>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d904      	bls.n	8001534 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	e00f      	b.n	8001554 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4a45      	ldr	r2, [pc, #276]	; (800164c <HAL_DAC_ConfigChannel+0x34c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d90a      	bls.n	8001552 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	e006      	b.n	8001554 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	4313      	orrs	r3, r2
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	e000      	b.n	8001554 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001552:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	4313      	orrs	r3, r2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	4013      	ands	r3, r2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015be:	4313      	orrs	r3, r2
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	22c0      	movs	r2, #192	; 0xc0
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43da      	mvns	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	ea02 0103 	and.w	r1, r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	09896800 	.word	0x09896800
 800164c:	04c4b400 	.word	0x04c4b400

08001650 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fe30 	bl	80012c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	711a      	strb	r2, [r3, #4]
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fe29 	bl	80012d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fe1f 	bl	80012ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	711a      	strb	r2, [r3, #4]
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff ffd8 	bl	80016bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	711a      	strb	r2, [r3, #4]
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff ffd1 	bl	80016d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f043 0204 	orr.w	r2, r3, #4
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff ffc7 	bl	80016e4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	711a      	strb	r2, [r3, #4]
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e08d      	b.n	8001892 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_DMA_Init+0x138>)
 800177e:	429a      	cmp	r2, r3
 8001780:	d80f      	bhi.n	80017a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <HAL_DMA_Init+0x13c>)
 800178a:	4413      	add	r3, r2
 800178c:	4a45      	ldr	r2, [pc, #276]	; (80018a4 <HAL_DMA_Init+0x140>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	009a      	lsls	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a42      	ldr	r2, [pc, #264]	; (80018a8 <HAL_DMA_Init+0x144>)
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
 80017a0:	e00e      	b.n	80017c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_DMA_Init+0x148>)
 80017aa:	4413      	add	r3, r2
 80017ac:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <HAL_DMA_Init+0x140>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	009a      	lsls	r2, r3, #2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <HAL_DMA_Init+0x14c>)
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f9b6 	bl	8001b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001820:	d102      	bne.n	8001828 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800183c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d010      	beq.n	8001868 <HAL_DMA_Init+0x104>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d80c      	bhi.n	8001868 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f9d6 	bl	8001c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e008      	b.n	800187a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020407 	.word	0x40020407
 80018a0:	bffdfff8 	.word	0xbffdfff8
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	40020000 	.word	0x40020000
 80018ac:	bffdfbf8 	.word	0xbffdfbf8
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_DMA_Start_IT+0x20>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e066      	b.n	80019a2 <HAL_DMA_Start_IT+0xee>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d155      	bne.n	8001994 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f8fb 	bl	8001b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 020e 	orr.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00f      	b.n	800194c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 020a 	orr.w	r2, r2, #10
 800194a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001968:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001980:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e005      	b.n	80019a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2204      	movs	r2, #4
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d026      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x7a>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0204 	bic.w	r2, r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d071      	beq.n	8001afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a22:	e06c      	b.n	8001afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d02e      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d029      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10b      	bne.n	8001a68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020a 	bic.w	r2, r2, #10
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	2102      	movs	r1, #2
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d038      	beq.n	8001afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a94:	e033      	b.n	8001afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d02a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d025      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 020e 	bic.w	r2, r2, #14
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
}
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f003 021f 	and.w	r2, r3, #31
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d108      	bne.n	8001b68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b66:	e007      	b.n	8001b78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d802      	bhi.n	8001b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e001      	b.n	8001ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ba0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3b08      	subs	r3, #8
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40020407 	.word	0x40020407
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020820 	.word	0x40020820
 8001bf8:	cccccccd 	.word	0xcccccccd
 8001bfc:	40020880 	.word	0x40020880

08001c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	1000823f 	.word	0x1000823f
 8001c44:	40020940 	.word	0x40020940

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c56:	e15a      	b.n	8001f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 814c 	beq.w	8001f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d017      	beq.n	8001d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d123      	bne.n	8001d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	6939      	ldr	r1, [r7, #16]
 8001d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0203 	and.w	r2, r3, #3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a6 	beq.w	8001f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd4:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dfe:	d01f      	beq.n	8001e40 <HAL_GPIO_Init+0x1f8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d019      	beq.n	8001e3c <HAL_GPIO_Init+0x1f4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_GPIO_Init+0x1f0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_GPIO_Init+0x2f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <HAL_GPIO_Init+0x2f8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_GPIO_Init+0x2fc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e28:	2305      	movs	r3, #5
 8001e2a:	e00a      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	e008      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e30:	2304      	movs	r3, #4
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e34:	2303      	movs	r3, #3
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e40:	2300      	movs	r3, #0
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e52:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e84:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eae:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f02:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f ae9d 	bne.w	8001c58 <HAL_GPIO_Init+0x10>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	48001000 	.word	0x48001000
 8001f44:	48001400 	.word	0x48001400
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d141      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d131      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6e:	4a46      	ldr	r2, [pc, #280]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f80:	4a41      	ldr	r2, [pc, #260]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2232      	movs	r2, #50	; 0x32
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9e:	e002      	b.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d158      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e057      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fdc:	e04d      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffa:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	; 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d112      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e011      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002068:	e007      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002078:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40007000 	.word	0x40007000
 800208c:	20000044 	.word	0x20000044
 8002090:	431bde83 	.word	0x431bde83

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e306      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d075      	beq.n	800219e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b97      	ldr	r3, [pc, #604]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3e>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_OscConfig+0x44>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d05b      	beq.n	800219c <HAL_RCC_OscConfig+0x108>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d157      	bne.n	800219c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e2e1      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x74>
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a84      	ldr	r2, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xb0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7e      	ldr	r2, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7b      	ldr	r2, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xb0>
 800212c:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a77      	ldr	r2, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b75      	ldr	r3, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a74      	ldr	r2, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fe64 	bl	8000e18 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7fe fe60 	bl	8000e18 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e2a6      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xc0>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fe50 	bl	8000e18 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe fe4c 	bl	8000e18 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e292      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	4b60      	ldr	r3, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0xe8>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021aa:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_OscConfig+0x136>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_OscConfig+0x13c>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11f      	bne.n	8002210 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x154>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e265      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4946      	ldr	r1, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021fc:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCC_OscConfig+0x280>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fdbd 	bl	8000d80 <HAL_InitTick>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d043      	beq.n	8002294 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e251      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fdf8 	bl	8000e18 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222c:	f7fe fdf4 	bl	8000e18 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e23a      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	492d      	ldr	r1, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
 800225e:	e01a      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fdd4 	bl	8000e18 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7fe fdd0 	bl	8000e18 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e216      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e0>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d041      	beq.n	8002326 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe fdad 	bl	8000e18 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c2:	f7fe fda9 	bl	8000e18 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1ef      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ef      	beq.n	80022c2 <HAL_RCC_OscConfig+0x22e>
 80022e2:	e020      	b.n	8002326 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fd90 	bl	8000e18 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fa:	e00d      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe fd8c 	bl	8000e18 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d906      	bls.n	8002318 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1d2      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	4b8c      	ldr	r3, [pc, #560]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ea      	bne.n	80022fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80a6 	beq.w	8002480 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002338:	4b84      	ldr	r3, [pc, #528]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x2b4>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x2b6>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b7f      	ldr	r3, [pc, #508]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a7e      	ldr	r2, [pc, #504]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
 800235a:	4b7c      	ldr	r3, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <HAL_RCC_OscConfig+0x4bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x4bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x4bc>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7fe fd49 	bl	8000e18 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe fd45 	bl	8000e18 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e18b      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x4bc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_RCC_OscConfig+0x32e>
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c0:	e024      	b.n	800240c <HAL_RCC_OscConfig+0x378>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d110      	bne.n	80023ec <HAL_RCC_OscConfig+0x358>
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	4a5e      	ldr	r2, [pc, #376]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	4a5a      	ldr	r2, [pc, #360]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ea:	e00f      	b.n	800240c <HAL_RCC_OscConfig+0x378>
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d016      	beq.n	8002442 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fd00 	bl	8000e18 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fcfc 	bl	8000e18 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e140      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ed      	beq.n	800241c <HAL_RCC_OscConfig+0x388>
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fce9 	bl	8000e18 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fce5 	bl	8000e18 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e129      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ed      	bne.n	800244a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a34      	ldr	r2, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01c      	beq.n	80024ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249a:	4a2c      	ldr	r2, [pc, #176]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fcb8 	bl	8000e18 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ac:	f7fe fcb4 	bl	8000e18 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0fa      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <HAL_RCC_OscConfig+0x418>
 80024cc:	e01b      	b.n	8002506 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ce:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80024d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fc9b 	bl	8000e18 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e6:	f7fe fc97 	bl	8000e18 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0dd      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80d1 	beq.w	80026b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b0c      	cmp	r3, #12
 800251a:	f000 808b 	beq.w	8002634 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d15e      	bne.n	80025e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fc71 	bl	8000e18 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002538:	e00c      	b.n	8002554 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fc6d 	bl	8000e18 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d905      	bls.n	8002554 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0b3      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ec      	bne.n	800253a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b56      	ldr	r3, [pc, #344]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x62c>)
 8002566:	4013      	ands	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6a11      	ldr	r1, [r2, #32]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002570:	3a01      	subs	r2, #1
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800257a:	0212      	lsls	r2, r2, #8
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0552      	lsls	r2, r2, #21
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800258e:	0852      	lsrs	r2, r2, #1
 8002590:	3a01      	subs	r2, #1
 8002592:	0652      	lsls	r2, r2, #25
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800259a:	06d2      	lsls	r2, r2, #27
 800259c:	430a      	orrs	r2, r1
 800259e:	4947      	ldr	r1, [pc, #284]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a44      	ldr	r2, [pc, #272]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	4b42      	ldr	r3, [pc, #264]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a41      	ldr	r2, [pc, #260]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc2c 	bl	8000e18 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fc28 	bl	8000e18 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e06e      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x530>
 80025e2:	e066      	b.n	80026b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 8002602:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fc04 	bl	8000e18 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fc00 	bl	8000e18 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e046      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x580>
 8002632:	e03e      	b.n	80026b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e039      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_OscConfig+0x628>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d12c      	bne.n	80026ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d123      	bne.n	80026ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11b      	bne.n	80026ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d113      	bne.n	80026ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d109      	bne.n	80026ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	019f800c 	.word	0x019f800c

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e11e      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b91      	ldr	r3, [pc, #580]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d910      	bls.n	800270c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b8e      	ldr	r3, [pc, #568]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 020f 	bic.w	r2, r3, #15
 80026f2:	498c      	ldr	r1, [pc, #560]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e106      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d073      	beq.n	8002800 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d129      	bne.n	8002774 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002720:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0f4      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002730:	f000 f972 	bl	8002a18 <RCC_GetSysClockFreqFromPLLSource>
 8002734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCC_ClockConfig+0x268>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d93f      	bls.n	80027be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002752:	2b00      	cmp	r3, #0
 8002754:	d033      	beq.n	80027be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d12f      	bne.n	80027be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002766:	4a70      	ldr	r2, [pc, #448]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e024      	b.n	80027be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d107      	bne.n	800278c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0c6      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0be      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800279c:	f000 f8ce 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4a61      	ldr	r2, [pc, #388]	; (800292c <HAL_RCC_ClockConfig+0x268>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d909      	bls.n	80027be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80027b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4957      	ldr	r1, [pc, #348]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fb22 	bl	8000e18 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fb1e 	bl	8000e18 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e095      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a42      	ldr	r2, [pc, #264]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800281e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002822:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4936      	ldr	r1, [pc, #216]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
 8002852:	e008      	b.n	8002866 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d105      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4a32      	ldr	r2, [pc, #200]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 8002860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002864:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d21d      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 020f 	bic.w	r2, r3, #15
 800287c:	4929      	ldr	r1, [pc, #164]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002884:	f7fe fac8 	bl	8000e18 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fac4 	bl	8000e18 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e03b      	b.n	800291a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1ed      	bne.n	800288c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4917      	ldr	r1, [pc, #92]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490f      	ldr	r1, [pc, #60]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ee:	f000 f825 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCC_ClockConfig+0x264>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490c      	ldr	r1, [pc, #48]	; (8002930 <HAL_RCC_ClockConfig+0x26c>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x270>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fa34 	bl	8000d80 <HAL_InitTick>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
 800292c:	04c4b400 	.word	0x04c4b400
 8002930:	08003320 	.word	0x08003320
 8002934:	20000044 	.word	0x20000044
 8002938:	20000048 	.word	0x20000048

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d102      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	e047      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d102      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e03e      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d136      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	0a12      	lsrs	r2, r2, #8
 800299e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
      break;
 80029a8:	e00c      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	0a12      	lsrs	r2, r2, #8
 80029b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
      break;
 80029c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0e5b      	lsrs	r3, r3, #25
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	e001      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029e4:	693b      	ldr	r3, [r7, #16]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000044 	.word	0x20000044

08002a18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3301      	adds	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d10c      	bne.n	8002a56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a3c:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a46:	68d2      	ldr	r2, [r2, #12]
 8002a48:	0a12      	lsrs	r2, r2, #8
 8002a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
    break;
 8002a54:	e00c      	b.n	8002a70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	0a12      	lsrs	r2, r2, #8
 8002a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
    break;
 8002a6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0e5b      	lsrs	r3, r3, #25
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	00f42400 	.word	0x00f42400

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e049      	b.n	8002b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f85a 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fa60 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e054      	b.n	8002c16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d01d      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_Base_Start_IT+0xe4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x80>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_TIM_Base_Start_IT+0xe8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d115      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_TIM_Base_Start_IT+0xec>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d015      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0xbe>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d011      	beq.n	8002c12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e008      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e000      	b.n	8002c14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40000c00 	.word	0x40000c00
 8002c34:	40013400 	.word	0x40013400
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40015000 	.word	0x40015000
 8002c40:	00010007 	.word	0x00010007

08002c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0202 	mvn.w	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f96f 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f961 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f972 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0204 	mvn.w	r2, #4
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f945 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f937 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f948 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0208 	mvn.w	r2, #8
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f91b 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f90d 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f91e 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2208      	movs	r2, #8
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8f1 	bl	8002f6a <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8e3 	bl	8002f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8f4 	bl	8002f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0201 	mvn.w	r2, #1
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8bd 	bl	8002f42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa22 	bl	8003238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d10e      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa15 	bl	800324c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d10e      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d107      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8a2 	bl	8002f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d10e      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f9d5 	bl	8003224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e88:	d10f      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9db 	bl	8003260 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb8:	d10f      	bne.n	8002eda <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f9cd 	bl	8003274 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee8:	d10f      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9bf 	bl	8003288 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f18:	d10f      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f28:	d107      	bne.n	8002f3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f9b1 	bl	800329c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a46      	ldr	r2, [pc, #280]	; (80030d4 <TIM_Base_SetConfig+0x12c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d017      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d013      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a43      	ldr	r2, [pc, #268]	; (80030d8 <TIM_Base_SetConfig+0x130>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a42      	ldr	r2, [pc, #264]	; (80030dc <TIM_Base_SetConfig+0x134>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a41      	ldr	r2, [pc, #260]	; (80030e0 <TIM_Base_SetConfig+0x138>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a40      	ldr	r2, [pc, #256]	; (80030e4 <TIM_Base_SetConfig+0x13c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x48>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <TIM_Base_SetConfig+0x140>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a33      	ldr	r2, [pc, #204]	; (80030d4 <TIM_Base_SetConfig+0x12c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d023      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d01f      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <TIM_Base_SetConfig+0x130>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01b      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <TIM_Base_SetConfig+0x134>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d017      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2e      	ldr	r2, [pc, #184]	; (80030e0 <TIM_Base_SetConfig+0x138>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <TIM_Base_SetConfig+0x13c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00f      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <TIM_Base_SetConfig+0x144>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00b      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <TIM_Base_SetConfig+0x148>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d007      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <TIM_Base_SetConfig+0x14c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_Base_SetConfig+0xaa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <TIM_Base_SetConfig+0x140>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d108      	bne.n	8003064 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <TIM_Base_SetConfig+0x12c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <TIM_Base_SetConfig+0x110>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <TIM_Base_SetConfig+0x13c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00f      	beq.n	80030b8 <TIM_Base_SetConfig+0x110>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <TIM_Base_SetConfig+0x144>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_Base_SetConfig+0x110>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <TIM_Base_SetConfig+0x148>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_Base_SetConfig+0x110>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <TIM_Base_SetConfig+0x14c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x110>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <TIM_Base_SetConfig+0x140>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d103      	bne.n	80030c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	615a      	str	r2, [r3, #20]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40013400 	.word	0x40013400
 80030e8:	40015000 	.word	0x40015000
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800

080030f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e074      	b.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a34      	ldr	r2, [pc, #208]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a33      	ldr	r2, [pc, #204]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a31      	ldr	r2, [pc, #196]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d01d      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10c      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40013400 	.word	0x40013400
 8003210:	40015000 	.word	0x40015000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40014000 	.word	0x40014000

08003224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <memset>:
 80032b0:	4402      	add	r2, r0
 80032b2:	4603      	mov	r3, r0
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d100      	bne.n	80032ba <memset+0xa>
 80032b8:	4770      	bx	lr
 80032ba:	f803 1b01 	strb.w	r1, [r3], #1
 80032be:	e7f9      	b.n	80032b4 <memset+0x4>

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2600      	movs	r6, #0
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 f818 	bl	8003308 <_init>
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2600      	movs	r6, #0
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003330 	.word	0x08003330
 80032fc:	08003330 	.word	0x08003330
 8003300:	08003330 	.word	0x08003330
 8003304:	08003334 	.word	0x08003334

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
