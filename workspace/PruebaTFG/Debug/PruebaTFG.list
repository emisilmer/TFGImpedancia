
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008190  08008190  00009190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  080083a8  080083a8  000093a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b0  080083b0  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080083b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  20000018  080083d0  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  080083d0  0000ae94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ab2  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b4  00000000  00000000  00023afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00026bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119b  00000000  00000000  00028248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291f9  00000000  00000000  000293e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c4c  00000000  00000000  000525dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011673c  00000000  00000000  0006c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006590  00000000  00000000  001829a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00188f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008178 	.word	0x08008178

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008178 	.word	0x08008178

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000994:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000998:	f000 b96a 	b.w	8000c70 <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9d08      	ldr	r5, [sp, #32]
 80009ba:	460c      	mov	r4, r1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d14e      	bne.n	8000a5e <__udivmoddi4+0xaa>
 80009c0:	4694      	mov	ip, r2
 80009c2:	458c      	cmp	ip, r1
 80009c4:	4686      	mov	lr, r0
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	d962      	bls.n	8000a92 <__udivmoddi4+0xde>
 80009cc:	b14a      	cbz	r2, 80009e2 <__udivmoddi4+0x2e>
 80009ce:	f1c2 0320 	rsb	r3, r2, #32
 80009d2:	4091      	lsls	r1, r2
 80009d4:	fa20 f303 	lsr.w	r3, r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	4319      	orrs	r1, r3
 80009de:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e6:	fa1f f68c 	uxth.w	r6, ip
 80009ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f2:	fb07 1114 	mls	r1, r7, r4, r1
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb04 f106 	mul.w	r1, r4, r6
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d90a      	bls.n	8000a18 <__udivmoddi4+0x64>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a0a:	f080 8112 	bcs.w	8000c32 <__udivmoddi4+0x27e>
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	f240 810f 	bls.w	8000c32 <__udivmoddi4+0x27e>
 8000a14:	3c02      	subs	r4, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a59      	subs	r1, r3, r1
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a22:	fb07 1110 	mls	r1, r7, r0, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f606 	mul.w	r6, r0, r6
 8000a2e:	429e      	cmp	r6, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x94>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a3a:	f080 80fc 	bcs.w	8000c36 <__udivmoddi4+0x282>
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	f240 80f9 	bls.w	8000c36 <__udivmoddi4+0x282>
 8000a44:	4463      	add	r3, ip
 8000a46:	3802      	subs	r0, #2
 8000a48:	1b9b      	subs	r3, r3, r6
 8000a4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a4e:	2100      	movs	r1, #0
 8000a50:	b11d      	cbz	r5, 8000a5a <__udivmoddi4+0xa6>
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	e9c5 3200 	strd	r3, r2, [r5]
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d905      	bls.n	8000a6e <__udivmoddi4+0xba>
 8000a62:	b10d      	cbz	r5, 8000a68 <__udivmoddi4+0xb4>
 8000a64:	e9c5 0100 	strd	r0, r1, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	e7f5      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000a6e:	fab3 f183 	clz	r1, r3
 8000a72:	2900      	cmp	r1, #0
 8000a74:	d146      	bne.n	8000b04 <__udivmoddi4+0x150>
 8000a76:	42a3      	cmp	r3, r4
 8000a78:	d302      	bcc.n	8000a80 <__udivmoddi4+0xcc>
 8000a7a:	4290      	cmp	r0, r2
 8000a7c:	f0c0 80f0 	bcc.w	8000c60 <__udivmoddi4+0x2ac>
 8000a80:	1a86      	subs	r6, r0, r2
 8000a82:	eb64 0303 	sbc.w	r3, r4, r3
 8000a86:	2001      	movs	r0, #1
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d0e6      	beq.n	8000a5a <__udivmoddi4+0xa6>
 8000a8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a90:	e7e3      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	f040 8090 	bne.w	8000bb8 <__udivmoddi4+0x204>
 8000a98:	eba1 040c 	sub.w	r4, r1, ip
 8000a9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa0:	fa1f f78c 	uxth.w	r7, ip
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aae:	fb08 4416 	mls	r4, r8, r6, r4
 8000ab2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ab6:	fb07 f006 	mul.w	r0, r7, r6
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x11c>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x11a>
 8000ac8:	4298      	cmp	r0, r3
 8000aca:	f200 80cd 	bhi.w	8000c68 <__udivmoddi4+0x2b4>
 8000ace:	4626      	mov	r6, r4
 8000ad0:	1a1c      	subs	r4, r3, r0
 8000ad2:	fa1f f38e 	uxth.w	r3, lr
 8000ad6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ada:	fb08 4410 	mls	r4, r8, r0, r4
 8000ade:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae2:	fb00 f707 	mul.w	r7, r0, r7
 8000ae6:	429f      	cmp	r7, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x148>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x146>
 8000af4:	429f      	cmp	r7, r3
 8000af6:	f200 80b0 	bhi.w	8000c5a <__udivmoddi4+0x2a6>
 8000afa:	4620      	mov	r0, r4
 8000afc:	1bdb      	subs	r3, r3, r7
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	e7a5      	b.n	8000a50 <__udivmoddi4+0x9c>
 8000b04:	f1c1 0620 	rsb	r6, r1, #32
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b14:	fa04 f301 	lsl.w	r3, r4, r1
 8000b18:	ea43 030c 	orr.w	r3, r3, ip
 8000b1c:	40f4      	lsrs	r4, r6
 8000b1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b22:	0c38      	lsrs	r0, r7, #16
 8000b24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b28:	fbb4 fef0 	udiv	lr, r4, r0
 8000b2c:	fa1f fc87 	uxth.w	ip, r7
 8000b30:	fb00 441e 	mls	r4, r0, lr, r4
 8000b34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b38:	fb0e f90c 	mul.w	r9, lr, ip
 8000b3c:	45a1      	cmp	r9, r4
 8000b3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b42:	d90a      	bls.n	8000b5a <__udivmoddi4+0x1a6>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b4a:	f080 8084 	bcs.w	8000c56 <__udivmoddi4+0x2a2>
 8000b4e:	45a1      	cmp	r9, r4
 8000b50:	f240 8081 	bls.w	8000c56 <__udivmoddi4+0x2a2>
 8000b54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b58:	443c      	add	r4, r7
 8000b5a:	eba4 0409 	sub.w	r4, r4, r9
 8000b5e:	fa1f f983 	uxth.w	r9, r3
 8000b62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b66:	fb00 4413 	mls	r4, r0, r3, r4
 8000b6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b72:	45a4      	cmp	ip, r4
 8000b74:	d907      	bls.n	8000b86 <__udivmoddi4+0x1d2>
 8000b76:	193c      	adds	r4, r7, r4
 8000b78:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b7c:	d267      	bcs.n	8000c4e <__udivmoddi4+0x29a>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0x29a>
 8000b82:	3b02      	subs	r3, #2
 8000b84:	443c      	add	r4, r7
 8000b86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b8e:	eba4 040c 	sub.w	r4, r4, ip
 8000b92:	429c      	cmp	r4, r3
 8000b94:	46ce      	mov	lr, r9
 8000b96:	469c      	mov	ip, r3
 8000b98:	d351      	bcc.n	8000c3e <__udivmoddi4+0x28a>
 8000b9a:	d04e      	beq.n	8000c3a <__udivmoddi4+0x286>
 8000b9c:	b155      	cbz	r5, 8000bb4 <__udivmoddi4+0x200>
 8000b9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ba2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ba6:	fa04 f606 	lsl.w	r6, r4, r6
 8000baa:	40cb      	lsrs	r3, r1
 8000bac:	431e      	orrs	r6, r3
 8000bae:	40cc      	lsrs	r4, r1
 8000bb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e750      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000bb8:	f1c2 0320 	rsb	r3, r2, #32
 8000bbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	430c      	orrs	r4, r1
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd4:	fa1f f78c 	uxth.w	r7, ip
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3110 	mls	r1, r8, r0, r3
 8000be0:	0c23      	lsrs	r3, r4, #16
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f107 	mul.w	r1, r0, r7
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x24c>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000bf6:	d22c      	bcs.n	8000c52 <__udivmoddi4+0x29e>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d92a      	bls.n	8000c52 <__udivmoddi4+0x29e>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c08:	fb08 3311 	mls	r3, r8, r1, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb01 f307 	mul.w	r3, r1, r7
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x276>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c20:	d213      	bcs.n	8000c4a <__udivmoddi4+0x296>
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	d911      	bls.n	8000c4a <__udivmoddi4+0x296>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4464      	add	r4, ip
 8000c2a:	1ae4      	subs	r4, r4, r3
 8000c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c30:	e739      	b.n	8000aa6 <__udivmoddi4+0xf2>
 8000c32:	4604      	mov	r4, r0
 8000c34:	e6f0      	b.n	8000a18 <__udivmoddi4+0x64>
 8000c36:	4608      	mov	r0, r1
 8000c38:	e706      	b.n	8000a48 <__udivmoddi4+0x94>
 8000c3a:	45c8      	cmp	r8, r9
 8000c3c:	d2ae      	bcs.n	8000b9c <__udivmoddi4+0x1e8>
 8000c3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c46:	3801      	subs	r0, #1
 8000c48:	e7a8      	b.n	8000b9c <__udivmoddi4+0x1e8>
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	e7ed      	b.n	8000c2a <__udivmoddi4+0x276>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	e799      	b.n	8000b86 <__udivmoddi4+0x1d2>
 8000c52:	4630      	mov	r0, r6
 8000c54:	e7d4      	b.n	8000c00 <__udivmoddi4+0x24c>
 8000c56:	46d6      	mov	lr, sl
 8000c58:	e77f      	b.n	8000b5a <__udivmoddi4+0x1a6>
 8000c5a:	4463      	add	r3, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	e74d      	b.n	8000afc <__udivmoddi4+0x148>
 8000c60:	4606      	mov	r6, r0
 8000c62:	4623      	mov	r3, r4
 8000c64:	4608      	mov	r0, r1
 8000c66:	e70f      	b.n	8000a88 <__udivmoddi4+0xd4>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	e730      	b.n	8000ad0 <__udivmoddi4+0x11c>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7a:	f001 f852 	bl	8001d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7e:	f000 f89d 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000c82:	f000 fb39 	bl	80012f8 <MX_DMA_Init>
  MX_GPIO_Init();
 8000c86:	f000 fb71 	bl	800136c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000c8a:	f000 fae7 	bl	800125c <MX_TIM3_Init>
  MX_DAC3_Init();
 8000c8e:	f000 f9c7 	bl	8001020 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 8000c92:	f000 fabd 	bl	8001210 <MX_OPAMP6_Init>
  MX_ADC1_Init();
 8000c96:	f000 f8dd 	bl	8000e54 <MX_ADC1_Init>
  MX_OPAMP3_Init();
 8000c9a:	f000 fa45 	bl	8001128 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000c9e:	f000 fa69 	bl	8001174 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000ca2:	f000 fa8f 	bl	80011c4 <MX_OPAMP5_Init>
  MX_ADC2_Init();
 8000ca6:	f000 f951 	bl	8000f4c <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8000caa:	f000 f9f3 	bl	8001094 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_DeInit(&htim2);
  HAL_TIM_Base_DeInit(&htim3);
 8000cae:	4837      	ldr	r0, [pc, #220]	@ (8000d8c <main+0x118>)
 8000cb0:	f004 fe4b 	bl	800594a <HAL_TIM_Base_DeInit>

  ajustaTimers();
 8000cb4:	f000 fbfa 	bl	80014ac <ajustaTimers>
  calculaLut();
 8000cb8:	f000 fba2 	bl	8001400 <calculaLut>

  //Timers
  //if (HAL_TIM_Base_Init(&htim2) != HAL_OK){Error_Handler();}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK){Error_Handler();}
 8000cbc:	4833      	ldr	r0, [pc, #204]	@ (8000d8c <main+0x118>)
 8000cbe:	f004 fded 	bl	800589c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <main+0x58>
 8000cc8:	f000 fccc 	bl	8001664 <Error_Handler>

  //HAL_TIM_Base_Start(&htim2);
  HAL_TIM_Base_Start(&htim3);
 8000ccc:	482f      	ldr	r0, [pc, #188]	@ (8000d8c <main+0x118>)
 8000cce:	f004 fe99 	bl	8005a04 <HAL_TIM_Base_Start>

  //OPAMS
  if(HAL_OK != HAL_OPAMP_Start(&hopamp6)) { Error_Handler();}
 8000cd2:	482f      	ldr	r0, [pc, #188]	@ (8000d90 <main+0x11c>)
 8000cd4:	f003 fd7a 	bl	80047cc <HAL_OPAMP_Start>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <main+0x6e>
 8000cde:	f000 fcc1 	bl	8001664 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp4)) { Error_Handler();}
 8000ce2:	482c      	ldr	r0, [pc, #176]	@ (8000d94 <main+0x120>)
 8000ce4:	f003 fd72 	bl	80047cc <HAL_OPAMP_Start>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <main+0x7e>
 8000cee:	f000 fcb9 	bl	8001664 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp3)) { Error_Handler();}
 8000cf2:	4829      	ldr	r0, [pc, #164]	@ (8000d98 <main+0x124>)
 8000cf4:	f003 fd6a 	bl	80047cc <HAL_OPAMP_Start>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <main+0x8e>
 8000cfe:	f000 fcb1 	bl	8001664 <Error_Handler>
  if(HAL_OK != HAL_OPAMP_Start(&hopamp5)) { Error_Handler();}
 8000d02:	4826      	ldr	r0, [pc, #152]	@ (8000d9c <main+0x128>)
 8000d04:	f003 fd62 	bl	80047cc <HAL_OPAMP_Start>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <main+0x9e>
 8000d0e:	f000 fca9 	bl	8001664 <Error_Handler>


  //DAC
  if(HAL_DACEx_DualSetValue(&hdac3, DAC_ALIGN_12B_R, 0, 0) != HAL_OK) { Error_Handler();}
 8000d12:	2300      	movs	r3, #0
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	4821      	ldr	r0, [pc, #132]	@ (8000da0 <main+0x12c>)
 8000d1a:	f002 ffe5 	bl	8003ce8 <HAL_DACEx_DualSetValue>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <main+0xb4>
 8000d24:	f000 fc9e 	bl	8001664 <Error_Handler>
  if(HAL_DACEx_DualStart_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)lut,lut_size,DAC_ALIGN_12B_R)!= HAL_OK){ Error_Handler();}
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <main+0x130>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <main+0x134>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <main+0x12c>)
 8000d36:	f002 ff21 	bl	8003b7c <HAL_DACEx_DualStart_DMA>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <main+0xd0>
 8000d40:	f000 fc90 	bl	8001664 <Error_Handler>

  HAL_Delay(10);		// Wait 10ms so that the signal is stable.
 8000d44:	200a      	movs	r0, #10
 8000d46:	f001 f85d 	bl	8001e04 <HAL_Delay>

  //ADC
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc1_buffer,TAM_BUFFER) != HAL_OK){Error_Handler();}
 8000d4a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d4e:	4917      	ldr	r1, [pc, #92]	@ (8000dac <main+0x138>)
 8000d50:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <main+0x13c>)
 8000d52:	f001 fc5d 	bl	8002610 <HAL_ADC_Start_DMA>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <main+0xec>
 8000d5c:	f000 fc82 	bl	8001664 <Error_Handler>
  if (HAL_ADC_Start_DMA(&hadc2,(uint32_t *)adc2_buffer,TAM_BUFFER) != HAL_OK){Error_Handler();}
 8000d60:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d64:	4913      	ldr	r1, [pc, #76]	@ (8000db4 <main+0x140>)
 8000d66:	4814      	ldr	r0, [pc, #80]	@ (8000db8 <main+0x144>)
 8000d68:	f001 fc52 	bl	8002610 <HAL_ADC_Start_DMA>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <main+0x102>
 8000d72:	f000 fc77 	bl	8001664 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d76:	2120      	movs	r1, #32
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7c:	f003 fc3c 	bl	80045f8 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d84:	f001 f83e 	bl	8001e04 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d88:	bf00      	nop
 8000d8a:	e7f4      	b.n	8000d76 <main+0x102>
 8000d8c:	200003c0 	.word	0x200003c0
 8000d90:	20000384 	.word	0x20000384
 8000d94:	2000030c 	.word	0x2000030c
 8000d98:	200002d0 	.word	0x200002d0
 8000d9c:	20000348 	.word	0x20000348
 8000da0:	200001cc 	.word	0x200001cc
 8000da4:	20000008 	.word	0x20000008
 8000da8:	2000040c 	.word	0x2000040c
 8000dac:	2000048c 	.word	0x2000048c
 8000db0:	20000034 	.word	0x20000034
 8000db4:	2000098c 	.word	0x2000098c
 8000db8:	200000a0 	.word	0x200000a0

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	@ 0x50
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	2238      	movs	r2, #56	@ 0x38
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 f976 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f003 fd26 	bl	8004830 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dee:	2340      	movs	r3, #64	@ 0x40
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dfe:	2355      	movs	r3, #85	@ 0x55
 8000e00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fdc0 	bl	8004998 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e1e:	f000 fc21 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2303      	movs	r3, #3
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 f8c3 	bl	8004fc8 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e48:	f000 fc0c 	bl	8001664 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	@ 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2220      	movs	r2, #32
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 f925 	bl	80070bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ebc:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000ee2:	f001 f9d3 	bl	800228c <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000eec:	f000 fbba 	bl	8001664 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000efc:	f002 f9d6 	bl	80032ac <HAL_ADCEx_MultiModeConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f06:	f000 fbad 	bl	8001664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_ADC1_Init+0xf0>)
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	2306      	movs	r3, #6
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_ADC1_Init+0xf4>)
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <MX_ADC1_Init+0xec>)
 8000f28:	f001 fc64 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f32:	f000 fb97 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	@ 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000034 	.word	0x20000034
 8000f44:	04300002 	.word	0x04300002
 8000f48:	407f0000 	.word	0x407f0000

08000f4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2220      	movs	r2, #32
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 f8af 	bl	80070bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f60:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <MX_ADC2_Init+0xc8>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f66:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fa6:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fca:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000fcc:	f001 f95e 	bl	800228c <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f000 fb45 	bl	8001664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_ADC2_Init+0xcc>)
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fde:	2306      	movs	r3, #6
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_ADC2_Init+0xd0>)
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fea:	2304      	movs	r3, #4
 8000fec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <MX_ADC2_Init+0xc4>)
 8000ff8:	f001 fbfc 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001002:	f000 fb2f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000a0 	.word	0x200000a0
 8001014:	50000100 	.word	0x50000100
 8001018:	0c900008 	.word	0x0c900008
 800101c:	407f0000 	.word	0x407f0000

08001020 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2230      	movs	r2, #48	@ 0x30
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 f845 	bl	80070bc <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_DAC3_Init+0x6c>)
 8001034:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <MX_DAC3_Init+0x70>)
 8001036:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_DAC3_Init+0x6c>)
 800103a:	f002 fb80 	bl	800373e <HAL_DAC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001044:	f000 fb0e 	bl	8001664 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001048:	2302      	movs	r3, #2
 800104a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001058:	2322      	movs	r3, #34	@ 0x22
 800105a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_DAC3_Init+0x6c>)
 8001074:	f002 fba4 	bl	80037c0 <HAL_DAC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800107e:	f000 faf1 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	@ 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001cc 	.word	0x200001cc
 8001090:	50001000 	.word	0x50001000

08001094 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 800109a:	4a22      	ldr	r2, [pc, #136]	@ (8001124 <MX_LPUART1_UART_Init+0x90>)
 800109c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010d8:	f005 f9ec 	bl	80064b4 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 fabf 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e6:	2100      	movs	r1, #0
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010ea:	f005 ff1d 	bl	8006f28 <HAL_UARTEx_SetTxFifoThreshold>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010f4:	f000 fab6 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 80010fc:	f005 ff52 	bl	8006fa4 <HAL_UARTEx_SetRxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001106:	f000 faad 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_LPUART1_UART_Init+0x8c>)
 800110c:	f005 fed3 	bl	8006eb6 <HAL_UARTEx_DisableFifoMode>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001116:	f000 faa5 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000240 	.word	0x20000240
 8001124:	40008000 	.word	0x40008000

08001128 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_OPAMP3_Init+0x44>)
 800112e:	4a10      	ldr	r2, [pc, #64]	@ (8001170 <MX_OPAMP3_Init+0x48>)
 8001130:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_OPAMP3_Init+0x44>)
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_OPAMP3_Init+0x44>)
 800113a:	2260      	movs	r2, #96	@ 0x60
 800113c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_OPAMP3_Init+0x44>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_OPAMP3_Init+0x44>)
 8001146:	2200      	movs	r2, #0
 8001148:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_OPAMP3_Init+0x44>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_OPAMP3_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_OPAMP3_Init+0x44>)
 8001158:	f003 fa68 	bl	800462c <HAL_OPAMP_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001162:	f000 fa7f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200002d0 	.word	0x200002d0
 8001170:	40010308 	.word	0x40010308

08001174 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 800117a:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <MX_OPAMP4_Init+0x4c>)
 800117c:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 8001180:	2280      	movs	r2, #128	@ 0x80
 8001182:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 8001198:	2200      	movs	r2, #0
 800119a:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_OPAMP4_Init+0x48>)
 80011aa:	f003 fa3f 	bl	800462c <HAL_OPAMP_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 80011b4:	f000 fa56 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000030c 	.word	0x2000030c
 80011c0:	4001030c 	.word	0x4001030c

080011c4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <MX_OPAMP5_Init+0x48>)
 80011cc:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011d6:	2260      	movs	r2, #96	@ 0x60
 80011d8:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011dc:	2208      	movs	r2, #8
 80011de:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_OPAMP5_Init+0x44>)
 80011f4:	f003 fa1a 	bl	800462c <HAL_OPAMP_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 80011fe:	f000 fa31 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000348 	.word	0x20000348
 800120c:	40010310 	.word	0x40010310

08001210 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 8001216:	4a10      	ldr	r2, [pc, #64]	@ (8001258 <MX_OPAMP6_Init+0x48>)
 8001218:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 8001222:	2260      	movs	r2, #96	@ 0x60
 8001224:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 8001228:	220c      	movs	r2, #12
 800122a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 800122e:	2200      	movs	r2, #0
 8001230:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_OPAMP6_Init+0x44>)
 8001240:	f003 f9f4 	bl	800462c <HAL_OPAMP_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 800124a:	f000 fa0b 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000384 	.word	0x20000384
 8001258:	40010314 	.word	0x40010314

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_TIM3_Init+0x94>)
 800127c:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <MX_TIM3_Init+0x98>)
 800127e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_TIM3_Init+0x94>)
 8001282:	2201      	movs	r2, #1
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_TIM3_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_TIM3_Init+0x94>)
 800128e:	2234      	movs	r2, #52	@ 0x34
 8001290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_TIM3_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_TIM3_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800129e:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <MX_TIM3_Init+0x94>)
 80012a0:	f004 fafc 	bl	800589c <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 f9db 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_TIM3_Init+0x94>)
 80012bc:	f004 fd92 	bl	8005de4 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f9cd 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ca:	2320      	movs	r3, #32
 80012cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <MX_TIM3_Init+0x94>)
 80012d8:	f005 f810 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012e2:	f000 f9bf 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003c0 	.word	0x200003c0
 80012f4:	40000400 	.word	0x40000400

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_DMA_Init+0x70>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <MX_DMA_Init+0x70>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6493      	str	r3, [r2, #72]	@ 0x48
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_DMA_Init+0x70>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_DMA_Init+0x70>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <MX_DMA_Init+0x70>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6493      	str	r3, [r2, #72]	@ 0x48
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_DMA_Init+0x70>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200b      	movs	r0, #11
 8001334:	f002 f9c1 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001338:	200b      	movs	r0, #11
 800133a:	f002 f9d8 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	200c      	movs	r0, #12
 8001344:	f002 f9b9 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001348:	200c      	movs	r0, #12
 800134a:	f002 f9d0 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	200d      	movs	r0, #13
 8001354:	f002 f9b1 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001358:	200d      	movs	r0, #13
 800135a:	f002 f9c8 	bl	80036ee <HAL_NVIC_EnableIRQ>

}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_GPIO_Init+0x90>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <MX_GPIO_Init+0x90>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_GPIO_Init+0x90>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_GPIO_Init+0x90>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <MX_GPIO_Init+0x90>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_GPIO_Init+0x90>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_GPIO_Init+0x90>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <MX_GPIO_Init+0x90>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_GPIO_Init+0x90>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f003 f8f9 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013d6:	2320      	movs	r3, #32
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f002 ff68 	bl	80042c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000

08001400 <calculaLut>:
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}

void calculaLut(){
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	float step = 2*M_PI/TAM_LUT;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <calculaLut+0xa0>)
 8001408:	60bb      	str	r3, [r7, #8]
	uint32_t i = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 800140e:	e03e      	b.n	800148e <calculaLut+0x8e>
		uint32_t v = (uint32_t)((sin(i * step)*amp/sin(2*M_PI/4))+amp); //sin(TAM_LUT/4*step) = 0xFFF
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141a:	edd7 7a02 	vldr	s15, [r7, #8]
 800141e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001422:	ee17 0a90 	vmov	r0, s15
 8001426:	f7ff f985 	bl	8000734 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b10 	vmov	d0, r2, r3
 8001432:	f005 fe71 	bl	8007118 <sin>
 8001436:	ec55 4b10 	vmov	r4, r5, d0
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <calculaLut+0xa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f956 	bl	80006f0 <__aeabi_ui2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe fee4 	bl	8000218 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4614      	mov	r4, r2
 8001456:	461d      	mov	r5, r3
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <calculaLut+0xa4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f947 	bl	80006f0 <__aeabi_ui2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7ff f805 	bl	8000478 <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fa65 	bl	8000944 <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0
 800147c:	607b      	str	r3, [r7, #4]
		lut[i] = v;
 800147e:	490a      	ldr	r1, [pc, #40]	@ (80014a8 <calculaLut+0xa8>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	while(i < TAM_LUT){
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b1f      	cmp	r3, #31
 8001492:	d9bd      	bls.n	8001410 <calculaLut+0x10>
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	3e490fdb 	.word	0x3e490fdb
 80014a4:	20000000 	.word	0x20000000
 80014a8:	2000040c 	.word	0x2000040c

080014ac <ajustaTimers>:

void ajustaTimers(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	//10hz,50hz,100hz,200hz,500hz,700hz,1khz,10khz,50khz,100khz,200khz,500khz
	//f_deseada = f_timer/((ARR+1)x(PSC+1))
	//uint32_t f_timer = HAL_RCC_GetSysClockFreq();

	//tim3 ARR 16 bits y tim2 ARR 32bits
	switch(frequency){
 80014b0:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <ajustaTimers+0x1a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a67      	ldr	r2, [pc, #412]	@ (8001654 <ajustaTimers+0x1a8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	f000 80b7 	beq.w	800162a <ajustaTimers+0x17e>
 80014bc:	4a65      	ldr	r2, [pc, #404]	@ (8001654 <ajustaTimers+0x1a8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f200 80ba 	bhi.w	8001638 <ajustaTimers+0x18c>
 80014c4:	4a64      	ldr	r2, [pc, #400]	@ (8001658 <ajustaTimers+0x1ac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	f000 80a8 	beq.w	800161c <ajustaTimers+0x170>
 80014cc:	4a62      	ldr	r2, [pc, #392]	@ (8001658 <ajustaTimers+0x1ac>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f200 80b2 	bhi.w	8001638 <ajustaTimers+0x18c>
 80014d4:	4a61      	ldr	r2, [pc, #388]	@ (800165c <ajustaTimers+0x1b0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f000 8099 	beq.w	800160e <ajustaTimers+0x162>
 80014dc:	4a5f      	ldr	r2, [pc, #380]	@ (800165c <ajustaTimers+0x1b0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	f200 80aa 	bhi.w	8001638 <ajustaTimers+0x18c>
 80014e4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014e8:	4293      	cmp	r3, r2
 80014ea:	f000 8089 	beq.w	8001600 <ajustaTimers+0x154>
 80014ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f200 80a0 	bhi.w	8001638 <ajustaTimers+0x18c>
 80014f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d078      	beq.n	80015f2 <ajustaTimers+0x146>
 8001500:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001504:	4293      	cmp	r3, r2
 8001506:	f200 8097 	bhi.w	8001638 <ajustaTimers+0x18c>
 800150a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800150e:	d068      	beq.n	80015e2 <ajustaTimers+0x136>
 8001510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001514:	f200 8090 	bhi.w	8001638 <ajustaTimers+0x18c>
 8001518:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800151c:	d059      	beq.n	80015d2 <ajustaTimers+0x126>
 800151e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001522:	f200 8089 	bhi.w	8001638 <ajustaTimers+0x18c>
 8001526:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800152a:	d04a      	beq.n	80015c2 <ajustaTimers+0x116>
 800152c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001530:	f200 8082 	bhi.w	8001638 <ajustaTimers+0x18c>
 8001534:	2bc8      	cmp	r3, #200	@ 0xc8
 8001536:	d03c      	beq.n	80015b2 <ajustaTimers+0x106>
 8001538:	2bc8      	cmp	r3, #200	@ 0xc8
 800153a:	d87d      	bhi.n	8001638 <ajustaTimers+0x18c>
 800153c:	2b64      	cmp	r3, #100	@ 0x64
 800153e:	d030      	beq.n	80015a2 <ajustaTimers+0xf6>
 8001540:	2b64      	cmp	r3, #100	@ 0x64
 8001542:	d879      	bhi.n	8001638 <ajustaTimers+0x18c>
 8001544:	2b32      	cmp	r3, #50	@ 0x32
 8001546:	d024      	beq.n	8001592 <ajustaTimers+0xe6>
 8001548:	2b32      	cmp	r3, #50	@ 0x32
 800154a:	d875      	bhi.n	8001638 <ajustaTimers+0x18c>
 800154c:	2b0b      	cmp	r3, #11
 800154e:	d006      	beq.n	800155e <ajustaTimers+0xb2>
 8001550:	2b0b      	cmp	r3, #11
 8001552:	d871      	bhi.n	8001638 <ajustaTimers+0x18c>
 8001554:	2b01      	cmp	r3, #1
 8001556:	d00b      	beq.n	8001570 <ajustaTimers+0xc4>
 8001558:	2b0a      	cmp	r3, #10
 800155a:	d012      	beq.n	8001582 <ajustaTimers+0xd6>
 800155c:	e06c      	b.n	8001638 <ajustaTimers+0x18c>
		case 11://0.1 100mHz
			//htim2.Init.Prescaler = 2999;
			htim3.Init.Prescaler = 2999;
 800155e:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <ajustaTimers+0x1b4>)
 8001560:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001564:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 8001566:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <ajustaTimers+0x1b4>)
 8001568:	f244 524c 	movw	r2, #17740	@ 0x454c
 800156c:	60da      	str	r2, [r3, #12]
			break;
 800156e:	e06a      	b.n	8001646 <ajustaTimers+0x19a>
		case 1://1
			//htim2.Init.Prescaler = 299;
			htim3.Init.Prescaler = 299;
 8001570:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <ajustaTimers+0x1b4>)
 8001572:	f240 122b 	movw	r2, #299	@ 0x12b
 8001576:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <ajustaTimers+0x1b4>)
 800157a:	f244 524c 	movw	r2, #17740	@ 0x454c
 800157e:	60da      	str	r2, [r3, #12]
			break;
 8001580:	e061      	b.n	8001646 <ajustaTimers+0x19a>
		case 10://10
			//htim2.Init.Prescaler = 29;
			htim3.Init.Prescaler = 29;
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <ajustaTimers+0x1b4>)
 8001584:	221d      	movs	r2, #29
 8001586:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 8001588:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <ajustaTimers+0x1b4>)
 800158a:	f244 524c 	movw	r2, #17740	@ 0x454c
 800158e:	60da      	str	r2, [r3, #12]
			break;
 8001590:	e059      	b.n	8001646 <ajustaTimers+0x19a>
		case 50://50
			//htim2.Init.Prescaler = 5;
			htim3.Init.Prescaler = 5;
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <ajustaTimers+0x1b4>)
 8001594:	2205      	movs	r2, #5
 8001596:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 8001598:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <ajustaTimers+0x1b4>)
 800159a:	f244 524c 	movw	r2, #17740	@ 0x454c
 800159e:	60da      	str	r2, [r3, #12]
			break;
 80015a0:	e051      	b.n	8001646 <ajustaTimers+0x19a>
		case 100://100
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001660 <ajustaTimers+0x1b4>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 17740;
			htim3.Init.Period = 17740;
 80015a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <ajustaTimers+0x1b4>)
 80015aa:	f244 524c 	movw	r2, #17740	@ 0x454c
 80015ae:	60da      	str	r2, [r3, #12]
			break;
 80015b0:	e049      	b.n	8001646 <ajustaTimers+0x19a>
		case 200://200
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <ajustaTimers+0x1b4>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 8870;
			htim3.Init.Period = 8870;
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <ajustaTimers+0x1b4>)
 80015ba:	f242 22a6 	movw	r2, #8870	@ 0x22a6
 80015be:	60da      	str	r2, [r3, #12]
			break;
 80015c0:	e041      	b.n	8001646 <ajustaTimers+0x19a>
		case 500: //500
			//htim2.Init.Prescaler = 4;
			htim3.Init.Prescaler = 4;
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <ajustaTimers+0x1b4>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 2129;
			htim3.Init.Period = 2129;
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <ajustaTimers+0x1b4>)
 80015ca:	f640 0251 	movw	r2, #2129	@ 0x851
 80015ce:	60da      	str	r2, [r3, #12]
			break;
 80015d0:	e039      	b.n	8001646 <ajustaTimers+0x19a>
		case 700://
			//htim2.Init.Prescaler = 1;
			htim3.Init.Prescaler = 3;
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <ajustaTimers+0x1b4>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 121428;
			htim3.Init.Period = 60819;
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <ajustaTimers+0x1b4>)
 80015da:	f64e 5293 	movw	r2, #60819	@ 0xed93
 80015de:	60da      	str	r2, [r3, #12]
			break;
 80015e0:	e031      	b.n	8001646 <ajustaTimers+0x19a>
		case 1000://1000
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <ajustaTimers+0x1b4>)
 80015e4:	2202      	movs	r2, #2
 80015e6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 1774;
			htim3.Init.Period = 1774;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <ajustaTimers+0x1b4>)
 80015ea:	f240 62ee 	movw	r2, #1774	@ 0x6ee
 80015ee:	60da      	str	r2, [r3, #12]
			break;
 80015f0:	e029      	b.n	8001646 <ajustaTimers+0x19a>
		case 10000://10000
			//htim2.Init.Prescaler = 2;
			htim3.Init.Prescaler = 2;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <ajustaTimers+0x1b4>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 177;
			htim3.Init.Period = 177;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <ajustaTimers+0x1b4>)
 80015fa:	22b1      	movs	r2, #177	@ 0xb1
 80015fc:	60da      	str	r2, [r3, #12]
			break;
 80015fe:	e022      	b.n	8001646 <ajustaTimers+0x19a>
		case 50000://50000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <ajustaTimers+0x1b4>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 105;
			htim3.Init.Period = 105;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <ajustaTimers+0x1b4>)
 8001608:	2269      	movs	r2, #105	@ 0x69
 800160a:	60da      	str	r2, [r3, #12]
			break;
 800160c:	e01b      	b.n	8001646 <ajustaTimers+0x19a>
		case 100000://100000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <ajustaTimers+0x1b4>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 52;
			htim3.Init.Period = 52;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <ajustaTimers+0x1b4>)
 8001616:	2234      	movs	r2, #52	@ 0x34
 8001618:	60da      	str	r2, [r3, #12]
			break;
 800161a:	e014      	b.n	8001646 <ajustaTimers+0x19a>
		case 200000://200000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 800161c:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <ajustaTimers+0x1b4>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 25;
			htim3.Init.Period = 25;
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <ajustaTimers+0x1b4>)
 8001624:	2219      	movs	r2, #25
 8001626:	60da      	str	r2, [r3, #12]
			break;
 8001628:	e00d      	b.n	8001646 <ajustaTimers+0x19a>
		case 500000://500000
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <ajustaTimers+0x1b4>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 4;
			htim3.Init.Period = 4;
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <ajustaTimers+0x1b4>)
 8001632:	2204      	movs	r2, #4
 8001634:	60da      	str	r2, [r3, #12]
			break;
 8001636:	e006      	b.n	8001646 <ajustaTimers+0x19a>
		default:
			//htim2.Init.Prescaler = 0;
			htim3.Init.Prescaler = 0;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <ajustaTimers+0x1b4>)
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]

			//htim2.Init.Period = 4;
			htim3.Init.Period = 4;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <ajustaTimers+0x1b4>)
 8001640:	2204      	movs	r2, #4
 8001642:	60da      	str	r2, [r3, #12]
			break;
 8001644:	bf00      	nop

	}
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000004 	.word	0x20000004
 8001654:	0007a120 	.word	0x0007a120
 8001658:	00030d40 	.word	0x00030d40
 800165c:	000186a0 	.word	0x000186a0
 8001660:	200003c0 	.word	0x200003c0

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f002 ffa8 	bl	80045c8 <HAL_GPIO_WritePin>
 8001678:	e7f8      	b.n	800166c <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	@ 0x60
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016b2:	f003 f961 	bl	8004978 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0a0      	sub	sp, #128	@ 0x80
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	2254      	movs	r2, #84	@ 0x54
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fce9 	bl	80070bc <memset>
  if(hadc->Instance==ADC1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f2:	d16a      	bne.n	80017ca <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fe7b 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001710:	f7ff ffa8 	bl	8001664 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001714:	4b66      	ldr	r3, [pc, #408]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a65      	ldr	r2, [pc, #404]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 800171c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800171e:	4b64      	ldr	r3, [pc, #400]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10b      	bne.n	800173e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001726:	4b63      	ldr	r3, [pc, #396]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a62      	ldr	r2, [pc, #392]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 800172c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b60      	ldr	r3, [pc, #384]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a5c      	ldr	r2, [pc, #368]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b5a      	ldr	r3, [pc, #360]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001756:	2303      	movs	r3, #3
 8001758:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f002 fdaa 	bl	80042c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001770:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 8001772:	4a52      	ldr	r2, [pc, #328]	@ (80018bc <HAL_ADC_MspInit+0x1f8>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001776:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 8001778:	2205      	movs	r2, #5
 800177a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178e:	4b4a      	ldr	r3, [pc, #296]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 8001790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001794:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001796:	4b48      	ldr	r3, [pc, #288]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 8001798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800179c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800179e:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017a4:	4b44      	ldr	r3, [pc, #272]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 80017a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ac:	4842      	ldr	r0, [pc, #264]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 80017ae:	f002 fb17 	bl	8003de0 <HAL_DMA_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80017b8:	f7ff ff54 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3e      	ldr	r2, [pc, #248]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 80017c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80017c2:	4a3d      	ldr	r2, [pc, #244]	@ (80018b8 <HAL_ADC_MspInit+0x1f4>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017c8:	e06e      	b.n	80018a8 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a3c      	ldr	r2, [pc, #240]	@ (80018c0 <HAL_ADC_MspInit+0x1fc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d169      	bne.n	80018a8 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fe0b 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80017f0:	f7ff ff38 	bl	8001664 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 80017fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017fe:	4b2c      	ldr	r3, [pc, #176]	@ (80018b0 <HAL_ADC_MspInit+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10b      	bne.n	800181e <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a2a      	ldr	r2, [pc, #168]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 800180c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_ADC_MspInit+0x1f0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001836:	23c0      	movs	r3, #192	@ 0xc0
 8001838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183a:	2303      	movs	r3, #3
 800183c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184c:	f002 fd3a 	bl	80042c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001852:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_ADC_MspInit+0x204>)
 8001854:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001858:	2224      	movs	r2, #36	@ 0x24
 800185a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 800186a:	2280      	movs	r2, #128	@ 0x80
 800186c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001874:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001878:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800187c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001880:	2220      	movs	r2, #32
 8001882:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 8001886:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 800188e:	f002 faa7 	bl	8003de0 <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8001898:	f7ff fee4 	bl	8001664 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80018a2:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_ADC_MspInit+0x200>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80018a8:	bf00      	nop
 80018aa:	3780      	adds	r7, #128	@ 0x80
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000e8c 	.word	0x20000e8c
 80018b4:	40021000 	.word	0x40021000
 80018b8:	2000010c 	.word	0x2000010c
 80018bc:	4002001c 	.word	0x4002001c
 80018c0:	50000100 	.word	0x50000100
 80018c4:	2000016c 	.word	0x2000016c
 80018c8:	40020030 	.word	0x40020030

080018cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001958 <HAL_DAC_MspInit+0x8c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d137      	bne.n	800194e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_DAC_MspInit+0x90>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a1e      	ldr	r2, [pc, #120]	@ (800195c <HAL_DAC_MspInit+0x90>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <HAL_DAC_MspInit+0x90>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 80018f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <HAL_DAC_MspInit+0x98>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 80018fe:	2266      	movs	r2, #102	@ 0x66
 8001900:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001904:	2210      	movs	r2, #16
 8001906:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800191a:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 800191e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001922:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001926:	2220      	movs	r2, #32
 8001928:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 800192c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001930:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8001932:	480b      	ldr	r0, [pc, #44]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001934:	f002 fa54 	bl	8003de0 <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 800193e:	f7ff fe91 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a06      	ldr	r2, [pc, #24]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <HAL_DAC_MspInit+0x94>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	50001000 	.word	0x50001000
 800195c:	40021000 	.word	0x40021000
 8001960:	200001e0 	.word	0x200001e0
 8001964:	40020008 	.word	0x40020008

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09e      	sub	sp, #120	@ 0x78
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2254      	movs	r2, #84	@ 0x54
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f005 fb97 	bl	80070bc <memset>
  if(huart->Instance==LPUART1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_UART_MspInit+0xa8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d136      	bne.n	8001a06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001998:	2320      	movs	r3, #32
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 fd2b 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff fe58 	bl	8001664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b8:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_UART_MspInit+0xac>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e4:	230c      	movs	r3, #12
 80019e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80019f4:	230c      	movs	r3, #12
 80019f6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a02:	f002 fc5f 	bl	80042c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3778      	adds	r7, #120	@ 0x78
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40008000 	.word	0x40008000
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	@ (8001b60 <HAL_OPAMP_MspInit+0x148>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d118      	bne.n	8001a6c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	4a49      	ldr	r2, [pc, #292]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a46:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP3 GPIO Configuration
    PB0     ------> OPAMP3_VINP
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4840      	ldr	r0, [pc, #256]	@ (8001b68 <HAL_OPAMP_MspInit+0x150>)
 8001a66:	f002 fc2d 	bl	80042c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001a6a:	e074      	b.n	8001b56 <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP4)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3e      	ldr	r2, [pc, #248]	@ (8001b6c <HAL_OPAMP_MspInit+0x154>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d119      	bne.n	8001aaa <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 8001a8e:	f44f 5350 	mov.w	r3, #13312	@ 0x3400
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4831      	ldr	r0, [pc, #196]	@ (8001b68 <HAL_OPAMP_MspInit+0x150>)
 8001aa4:	f002 fc0e 	bl	80042c4 <HAL_GPIO_Init>
}
 8001aa8:	e055      	b.n	8001b56 <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP5)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <HAL_OPAMP_MspInit+0x158>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d132      	bne.n	8001b1a <HAL_OPAMP_MspInit+0x102>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a24      	ldr	r2, [pc, #144]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	481f      	ldr	r0, [pc, #124]	@ (8001b74 <HAL_OPAMP_MspInit+0x15c>)
 8001af8:	f002 fbe4 	bl	80042c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b14:	f002 fbd6 	bl	80042c4 <HAL_GPIO_Init>
}
 8001b18:	e01d      	b.n	8001b56 <HAL_OPAMP_MspInit+0x13e>
  else if(hopamp->Instance==OPAMP6)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a16      	ldr	r2, [pc, #88]	@ (8001b78 <HAL_OPAMP_MspInit+0x160>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d118      	bne.n	8001b56 <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b28:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_OPAMP_MspInit+0x14c>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <HAL_OPAMP_MspInit+0x150>)
 8001b52:	f002 fbb7 	bl	80042c4 <HAL_GPIO_Init>
}
 8001b56:	bf00      	nop
 8001b58:	3730      	adds	r7, #48	@ 0x30
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010308 	.word	0x40010308
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	4001030c 	.word	0x4001030c
 8001b70:	40010310 	.word	0x40010310
 8001b74:	48000800 	.word	0x48000800
 8001b78:	40010314 	.word	0x40010314

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x44>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	201d      	movs	r0, #29
 8001bac:	f001 fd85 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb0:	201d      	movs	r0, #29
 8001bb2:	f001 fd9c 	bl	80036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d108      	bne.n	8001bec <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_TIM_Base_MspDeInit+0x30>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_TIM_Base_MspDeInit+0x30>)
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	6593      	str	r3, [r2, #88]	@ 0x58

    /* TIM3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8001be6:	201d      	movs	r0, #29
 8001be8:	f001 fd8f 	bl	800370a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40021000 	.word	0x40021000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <NMI_Handler+0x4>

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <MemManage_Handler+0x4>

08001c14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c52:	f000 f8b9 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <DMA1_Channel1_IRQHandler+0x10>)
 8001c62:	f002 f9e0 	bl	8004026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200001e0 	.word	0x200001e0

08001c70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <DMA1_Channel2_IRQHandler+0x10>)
 8001c76:	f002 f9d6 	bl	8004026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000010c 	.word	0x2000010c

08001c84 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <DMA1_Channel3_IRQHandler+0x10>)
 8001c8a:	f002 f9cc 	bl	8004026 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000016c 	.word	0x2000016c

08001c98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM3_IRQHandler+0x10>)
 8001c9e:	f003 ff21 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200003c0 	.word	0x200003c0

08001cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480d      	ldr	r0, [pc, #52]	@ (8001d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490e      	ldr	r1, [pc, #56]	@ (8001d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d14 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0b      	ldr	r4, [pc, #44]	@ (8001d1c <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cfa:	f7ff ffd7 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f005 f9e5 	bl	80070cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d02:	f7fe ffb7 	bl	8000c74 <main>

08001d06 <LoopForever>:

LoopForever:
    b LoopForever
 8001d06:	e7fe      	b.n	8001d06 <LoopForever>
  ldr   r0, =_estack
 8001d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001d14:	080083b8 	.word	0x080083b8
  ldr r2, =_sbss
 8001d18:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001d1c:	20000e94 	.word	0x20000e94

08001d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC1_2_IRQHandler>

08001d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f001 fcb9 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f80e 	bl	8001d54 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e001      	b.n	8001d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d44:	f7ff fc9a 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d48:	79fb      	ldrb	r3, [r7, #7]

}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_InitTick+0x68>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d022      	beq.n	8001dae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <HAL_InitTick+0x6c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <HAL_InitTick+0x68>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fcd2 	bl	8003726 <HAL_SYSTICK_Config>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	d809      	bhi.n	8001da2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d96:	f001 fc90 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_InitTick+0x70>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e004      	b.n	8001db2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000014 	.word	0x20000014
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	20000010 	.word	0x20000010

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_IncTick+0x20>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a03      	ldr	r2, [pc, #12]	@ (8001de4 <HAL_IncTick+0x1c>)
 8001dd8:	6013      	str	r3, [r2, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20000e90 	.word	0x20000e90
 8001de8:	20000014 	.word	0x20000014

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000e90 	.word	0x20000e90

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e1c:	d004      	beq.n	8001e28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_Delay+0x40>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e28:	bf00      	nop
 8001e2a:	f7ff ffdf 	bl	8001dec <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d8f7      	bhi.n	8001e2a <HAL_Delay+0x26>
  {
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000014 	.word	0x20000014

08001e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3360      	adds	r3, #96	@ 0x60
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <LL_ADC_SetOffset+0x44>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	03fff000 	.word	0x03fff000

08001ef8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3360      	adds	r3, #96	@ 0x60
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3360      	adds	r3, #96	@ 0x60
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3360      	adds	r3, #96	@ 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3360      	adds	r3, #96	@ 0x60
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3330      	adds	r3, #48	@ 0x30
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	4413      	add	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	211f      	movs	r1, #31
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 011f 	and.w	r1, r3, #31
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3314      	adds	r3, #20
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	0e5b      	lsrs	r3, r3, #25
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0d1b      	lsrs	r3, r3, #20
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2107      	movs	r1, #7
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0d1b      	lsrs	r3, r3, #20
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	431a      	orrs	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10a      	bne.n	80020ea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020e8:	e00a      	b.n	8002100 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	407f0000 	.word	0x407f0000

08002110 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 031f 	and.w	r3, r3, #31
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800213c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002164:	d101      	bne.n	800216a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800218c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002226:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222a:	f043 0204 	orr.w	r2, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d101      	bne.n	8002256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b08      	cmp	r3, #8
 8002276:	d101      	bne.n	800227c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1af      	b.n	8002606 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff fa05 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff3f 	bl	8002150 <LL_ADC_IsDeepPowerDownEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff25 	bl	800212c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff5a 	bl	80021a0 <LL_ADC_IsInternalRegulatorEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff3e 	bl	8002178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fc:	4b9f      	ldr	r3, [pc, #636]	@ (800257c <HAL_ADC_Init+0x2f0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	4a9f      	ldr	r2, [pc, #636]	@ (8002580 <HAL_ADC_Init+0x2f4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002310:	e002      	b.n	8002318 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3b01      	subs	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f9      	bne.n	8002312 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff3c 	bl	80021a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff75 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002354:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8148 	bne.w	80025f4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 8144 	bne.w	80025f4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002374:	f043 0202 	orr.w	r2, r3, #2
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff35 	bl	80021f0 <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d141      	bne.n	8002410 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_Init+0x114>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7a      	ldr	r2, [pc, #488]	@ (8002584 <HAL_ADC_Init+0x2f8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d10f      	bne.n	80023c0 <HAL_ADC_Init+0x134>
 80023a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023a4:	f7ff ff24 	bl	80021f0 <LL_ADC_IsEnabled>
 80023a8:	4604      	mov	r4, r0
 80023aa:	4876      	ldr	r0, [pc, #472]	@ (8002584 <HAL_ADC_Init+0x2f8>)
 80023ac:	f7ff ff20 	bl	80021f0 <LL_ADC_IsEnabled>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4323      	orrs	r3, r4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e012      	b.n	80023e6 <HAL_ADC_Init+0x15a>
 80023c0:	4871      	ldr	r0, [pc, #452]	@ (8002588 <HAL_ADC_Init+0x2fc>)
 80023c2:	f7ff ff15 	bl	80021f0 <LL_ADC_IsEnabled>
 80023c6:	4604      	mov	r4, r0
 80023c8:	4870      	ldr	r0, [pc, #448]	@ (800258c <HAL_ADC_Init+0x300>)
 80023ca:	f7ff ff11 	bl	80021f0 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	431c      	orrs	r4, r3
 80023d2:	486f      	ldr	r0, [pc, #444]	@ (8002590 <HAL_ADC_Init+0x304>)
 80023d4:	f7ff ff0c 	bl	80021f0 <LL_ADC_IsEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	4323      	orrs	r3, r4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f2:	d004      	beq.n	80023fe <HAL_ADC_Init+0x172>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a62      	ldr	r2, [pc, #392]	@ (8002584 <HAL_ADC_Init+0x2f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x176>
 80023fe:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_ADC_Init+0x308>)
 8002400:	e000      	b.n	8002404 <HAL_ADC_Init+0x178>
 8002402:	4a65      	ldr	r2, [pc, #404]	@ (8002598 <HAL_ADC_Init+0x30c>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7ff fd1c 	bl	8001e48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7f5b      	ldrb	r3, [r3, #29]
 8002414:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800241a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002420:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002426:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800242e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800243a:	2b01      	cmp	r3, #1
 800243c:	d106      	bne.n	800244c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	3b01      	subs	r3, #1
 8002444:	045b      	lsls	r3, r3, #17
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_ADC_Init+0x310>)
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	430b      	orrs	r3, r1
 800247a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fed1 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 800249c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fede 	bl	8002264 <LL_ADC_INJ_IsConversionOngoing>
 80024a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d17f      	bne.n	80025b0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d17c      	bne.n	80025b0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d2:	f023 0302 	bic.w	r3, r3, #2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	430b      	orrs	r3, r1
 80024de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d017      	beq.n	8002518 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002500:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6911      	ldr	r1, [r2, #16]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002516:	e013      	b.n	8002540 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800253c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12a      	bne.n	80025a0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002560:	4311      	orrs	r1, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800256c:	430a      	orrs	r2, r1
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	e019      	b.n	80025b0 <HAL_ADC_Init+0x324>
 800257c:	2000000c 	.word	0x2000000c
 8002580:	053e2d63 	.word	0x053e2d63
 8002584:	50000100 	.word	0x50000100
 8002588:	50000400 	.word	0x50000400
 800258c:	50000500 	.word	0x50000500
 8002590:	50000600 	.word	0x50000600
 8002594:	50000300 	.word	0x50000300
 8002598:	50000700 	.word	0x50000700
 800259c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10c      	bne.n	80025d2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f023 010f 	bic.w	r1, r3, #15
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d0:	e007      	b.n	80025e2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 020f 	bic.w	r2, r2, #15
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025f2:	e007      	b.n	8002604 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	f043 0210 	orr.w	r2, r3, #16
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002604:	7ffb      	ldrb	r3, [r7, #31]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	bf00      	nop

08002610 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start_DMA+0x20>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5a      	ldr	r2, [pc, #360]	@ (8002794 <HAL_ADC_Start_DMA+0x184>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_ADC_Start_DMA+0x24>
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_ADC_Start_DMA+0x188>)
 8002632:	e000      	b.n	8002636 <HAL_ADC_Start_DMA+0x26>
 8002634:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_ADC_Start_DMA+0x18c>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd6a 	bl	8002110 <LL_ADC_GetMultimode>
 800263c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fdfb 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 809b 	bne.w	8002786 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start_DMA+0x4e>
 800265a:	2302      	movs	r3, #2
 800265c:	e096      	b.n	800278c <HAL_ADC_Start_DMA+0x17c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4d      	ldr	r2, [pc, #308]	@ (80027a0 <HAL_ADC_Start_DMA+0x190>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d008      	beq.n	8002682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d002      	beq.n	8002682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b09      	cmp	r3, #9
 8002680:	d17a      	bne.n	8002778 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fcf6 	bl	8003074 <ADC_Enable>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d16d      	bne.n	800276e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002794 <HAL_ADC_Start_DMA+0x184>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_ADC_Start_DMA+0xb4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3b      	ldr	r2, [pc, #236]	@ (80027a4 <HAL_ADC_Start_DMA+0x194>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Start_DMA+0xb0>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e003      	b.n	80026c8 <HAL_ADC_Start_DMA+0xb8>
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_ADC_Start_DMA+0x198>)
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Start_DMA+0xb8>
 80026c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d002      	beq.n	80026d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	f023 0206 	bic.w	r2, r3, #6
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80026fa:	e002      	b.n	8002702 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	4a29      	ldr	r2, [pc, #164]	@ (80027ac <HAL_ADC_Start_DMA+0x19c>)
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	4a28      	ldr	r2, [pc, #160]	@ (80027b0 <HAL_ADC_Start_DMA+0x1a0>)
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	4a27      	ldr	r2, [pc, #156]	@ (80027b4 <HAL_ADC_Start_DMA+0x1a4>)
 8002718:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	221c      	movs	r2, #28
 8002720:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3340      	adds	r3, #64	@ 0x40
 8002754:	4619      	mov	r1, r3
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f001 fbe9 	bl	8003f30 <HAL_DMA_Start_IT>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fd55 	bl	8002216 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800276c:	e00d      	b.n	800278a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002776:	e008      	b.n	800278a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002784:	e001      	b.n	800278a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	50000100 	.word	0x50000100
 8002798:	50000300 	.word	0x50000300
 800279c:	50000700 	.word	0x50000700
 80027a0:	50000600 	.word	0x50000600
 80027a4:	50000500 	.word	0x50000500
 80027a8:	50000400 	.word	0x50000400
 80027ac:	08003139 	.word	0x08003139
 80027b0:	08003211 	.word	0x08003211
 80027b4:	0800322d 	.word	0x0800322d

080027b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0b6      	sub	sp, #216	@ 0xd8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x24>
 8002812:	2302      	movs	r3, #2
 8002814:	f000 bc13 	b.w	800303e <HAL_ADC_ConfigChannel+0x84a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd0a 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 83f3 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f7ff fbe7 	bl	8002012 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fcf8 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 800284e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fd04 	bl	8002264 <LL_ADC_INJ_IsConversionOngoing>
 800285c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 81d9 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800286a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 81d4 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800287c:	d10f      	bne.n	800289e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	f7ff fbee 	bl	800206a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fb95 	bl	8001fc6 <LL_ADC_SetSamplingTimeCommonConfig>
 800289c:	e00e      	b.n	80028bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f7ff fbdd 	bl	800206a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb85 	bl	8001fc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	08db      	lsrs	r3, r3, #3
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d022      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028ee:	f7ff fadf 	bl	8001eb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	461a      	mov	r2, r3
 8002900:	f7ff fb2b 	bl	8001f5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6919      	ldr	r1, [r3, #16]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7f1b      	ldrb	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_ADC_ConfigChannel+0x126>
 8002914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002918:	e000      	b.n	800291c <HAL_ADC_ConfigChannel+0x128>
 800291a:	2300      	movs	r3, #0
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff fb37 	bl	8001f90 <LL_ADC_SetOffsetSaturation>
 8002922:	e17b      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fae4 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x15c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fad9 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	e01e      	b.n	800298e <HAL_ADC_ConfigChannel+0x19a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff face 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800296e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x1b2>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	e018      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1e4>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e004      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fa9d 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fa81 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x222>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa76 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	e01e      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x260>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fa6b 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e004      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x278>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	e018      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x2aa>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e004      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fa3a 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa1e 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x2e8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa13 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	e01e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x326>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fa08 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x33e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	e016      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x36c>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e004      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9d9 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2103      	movs	r1, #3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f9bd 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x3aa>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f9b2 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x3da>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f9a7 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x3f2>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0e9b      	lsrs	r3, r3, #26
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	e011      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x416>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2103      	movs	r1, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f984 	bl	8001f24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fae5 	bl	80021f0 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 813d 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7ff fa40 	bl	80020c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4aa2      	ldr	r2, [pc, #648]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f040 812e 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x480>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	bf94      	ite	ls
 8002c6c:	2301      	movls	r3, #1
 8002c6e:	2300      	movhi	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e019      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x4b4>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2b09      	cmp	r3, #9
 8002ca0:	bf94      	ite	ls
 8002ca2:	2301      	movls	r3, #1
 8002ca4:	2300      	movhi	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d079      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x4d4>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	069b      	lsls	r3, r3, #26
 8002cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc6:	e015      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x500>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x520>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	e017      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x550>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x576>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	051b      	lsls	r3, r3, #20
 8002d68:	e018      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e003      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	e07e      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x5c8>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	069b      	lsls	r3, r3, #26
 8002db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dba:	e015      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x5f4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x614>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	e017      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x644>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	61fb      	str	r3, [r7, #28]
  return result;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x670>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b1e      	subs	r3, #30
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	e01b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x6a8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	613b      	str	r3, [r7, #16]
  return result;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1e      	subs	r3, #30
 8002e96:	051b      	lsls	r3, r3, #20
 8002e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff f8e1 	bl	800206a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80be 	beq.w	8003032 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x6d6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6ec>
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <HAL_ADC_ConfigChannel+0x6e8>)
 8002ecc:	e009      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x6ee>
 8002ece:	bf00      	nop
 8002ed0:	407f0000 	.word	0x407f0000
 8002ed4:	80080000 	.word	0x80080000
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ffd6 	bl	8001e94 <LL_ADC_GetCommonPathInternalCh>
 8002ee8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	@ (800304c <HAL_ADC_ConfigChannel+0x858>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x70c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	@ (8003050 <HAL_ADC_ConfigChannel+0x85c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d13a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d134      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f14:	d005      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x72e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8003054 <HAL_ADC_ConfigChannel+0x860>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f040 8085 	bne.w	800302c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f2a:	d004      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x742>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a49      	ldr	r2, [pc, #292]	@ (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x746>
 8002f36:	4a49      	ldr	r2, [pc, #292]	@ (800305c <HAL_ADC_ConfigChannel+0x868>)
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x748>
 8002f3a:	4a43      	ldr	r2, [pc, #268]	@ (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe ff91 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4c:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <HAL_ADC_ConfigChannel+0x86c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	4a44      	ldr	r2, [pc, #272]	@ (8003064 <HAL_ADC_ConfigChannel+0x870>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f66:	e002      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f9      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f74:	e05a      	b.n	800302c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003068 <HAL_ADC_ConfigChannel+0x874>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d125      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7d8>
 8002f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11f      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a31      	ldr	r2, [pc, #196]	@ (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d104      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7ac>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a34      	ldr	r2, [pc, #208]	@ (800306c <HAL_ADC_ConfigChannel+0x878>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d047      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x7c0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2a      	ldr	r2, [pc, #168]	@ (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7c4>
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <HAL_ADC_ConfigChannel+0x868>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x7c6>
 8002fb8:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fe ff52 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fca:	e031      	b.n	8003030 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a27      	ldr	r2, [pc, #156]	@ (8003070 <HAL_ADC_ConfigChannel+0x87c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12d      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d127      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x80c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x810>
 8003000:	4a16      	ldr	r2, [pc, #88]	@ (800305c <HAL_ADC_ConfigChannel+0x868>)
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x812>
 8003004:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8003006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800300a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f7fe ff2c 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
 8003016:	e00c      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800302a:	e002      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800303a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800303e:	4618      	mov	r0, r3
 8003040:	37d8      	adds	r7, #216	@ 0xd8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	50000700 	.word	0x50000700
 800304c:	c3210000 	.word	0xc3210000
 8003050:	90c00010 	.word	0x90c00010
 8003054:	50000600 	.word	0x50000600
 8003058:	50000100 	.word	0x50000100
 800305c:	50000300 	.word	0x50000300
 8003060:	2000000c 	.word	0x2000000c
 8003064:	053e2d63 	.word	0x053e2d63
 8003068:	c7520000 	.word	0xc7520000
 800306c:	50000500 	.word	0x50000500
 8003070:	cb840000 	.word	0xcb840000

08003074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f8b5 	bl	80021f0 <LL_ADC_IsEnabled>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d14d      	bne.n	8003128 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <ADC_Enable+0xc0>)
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e039      	b.n	800312a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f884 	bl	80021c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030c0:	f7fe fe94 	bl	8001dec <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c6:	e028      	b.n	800311a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f88f 	bl	80021f0 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f873 	bl	80021c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e2:	f7fe fe83 	bl	8001dec <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d914      	bls.n	800311a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d00d      	beq.n	800311a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	f043 0210 	orr.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d1cf      	bne.n	80030c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	8000003f 	.word	0x8000003f

08003138 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14b      	bne.n	80031ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d021      	beq.n	80031b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe ff3b 	bl	8001fec <LL_ADC_REG_IsTriggerSourceSWStart>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d032      	beq.n	80031e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d12b      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11f      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031ae:	e018      	b.n	80031e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d111      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff fae8 	bl	80027b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031e8:	e00e      	b.n	8003208 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff faf2 	bl	80027e0 <HAL_ADC_ErrorCallback>
}
 80031fc:	e004      	b.n	8003208 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fad4 	bl	80027cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fac4 	bl	80027e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <LL_ADC_IsEnabled>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsEnabled+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsEnabled+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b0a1      	sub	sp, #132	@ 0x84
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0e7      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032d2:	2300      	movs	r3, #0
 80032d4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032d6:	2300      	movs	r3, #0
 80032d8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e2:	d102      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032e4:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	e009      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6e      	ldr	r2, [pc, #440]	@ (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d102      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032f4:	4b6d      	ldr	r3, [pc, #436]	@ (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	e001      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0be      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ffb1 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003324:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ffab 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 80a0 	bne.w	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 809c 	bne.w	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003348:	d004      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a55      	ldr	r2, [pc, #340]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003354:	4b56      	ldr	r3, [pc, #344]	@ (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003356:	e000      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003358:	4b56      	ldr	r3, [pc, #344]	@ (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800335a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d04b      	beq.n	80033fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003364:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003376:	035b      	lsls	r3, r3, #13
 8003378:	430b      	orrs	r3, r1
 800337a:	431a      	orrs	r2, r3
 800337c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800337e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003388:	d004      	beq.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a45      	ldr	r2, [pc, #276]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10f      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003398:	f7ff ff62 	bl	8003260 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	4841      	ldr	r0, [pc, #260]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033a0:	f7ff ff5e 	bl	8003260 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033b4:	483c      	ldr	r0, [pc, #240]	@ (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033b6:	f7ff ff53 	bl	8003260 <LL_ADC_IsEnabled>
 80033ba:	4604      	mov	r4, r0
 80033bc:	483b      	ldr	r0, [pc, #236]	@ (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033be:	f7ff ff4f 	bl	8003260 <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	431c      	orrs	r4, r3
 80033c6:	483c      	ldr	r0, [pc, #240]	@ (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033c8:	f7ff ff4a 	bl	8003260 <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4323      	orrs	r3, r4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d056      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033fa:	e047      	b.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003406:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003410:	d004      	beq.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a23      	ldr	r2, [pc, #140]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10f      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800341c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003420:	f7ff ff1e 	bl	8003260 <LL_ADC_IsEnabled>
 8003424:	4604      	mov	r4, r0
 8003426:	481f      	ldr	r0, [pc, #124]	@ (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003428:	f7ff ff1a 	bl	8003260 <LL_ADC_IsEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	4323      	orrs	r3, r4
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e012      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800343c:	481a      	ldr	r0, [pc, #104]	@ (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800343e:	f7ff ff0f 	bl	8003260 <LL_ADC_IsEnabled>
 8003442:	4604      	mov	r4, r0
 8003444:	4819      	ldr	r0, [pc, #100]	@ (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003446:	f7ff ff0b 	bl	8003260 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	431c      	orrs	r4, r3
 800344e:	481a      	ldr	r0, [pc, #104]	@ (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003450:	f7ff ff06 	bl	8003260 <LL_ADC_IsEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	4323      	orrs	r3, r4
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800346e:	f023 030f 	bic.w	r3, r3, #15
 8003472:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003474:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003476:	e009      	b.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800348a:	e000      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003496:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800349a:	4618      	mov	r0, r3
 800349c:	3784      	adds	r7, #132	@ 0x84
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	50000100 	.word	0x50000100
 80034a8:	50000400 	.word	0x50000400
 80034ac:	50000500 	.word	0x50000500
 80034b0:	50000300 	.word	0x50000300
 80034b4:	50000700 	.word	0x50000700
 80034b8:	50000600 	.word	0x50000600

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	@ (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db12      	blt.n	8003594 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	490a      	ldr	r1, [pc, #40]	@ (80035a0 <__NVIC_DisableIRQ+0x44>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	3320      	adds	r3, #32
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003588:	f3bf 8f4f 	dsb	sy
}
 800358c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800358e:	f3bf 8f6f 	isb	sy
}
 8003592:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff05 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036c8:	f7ff ff1c 	bl	8003504 <__NVIC_GetPriorityGrouping>
 80036cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	6978      	ldr	r0, [r7, #20]
 80036d4:	f7ff ff90 	bl	80035f8 <NVIC_EncodePriority>
 80036d8:	4602      	mov	r2, r0
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff5f 	bl	80035a4 <__NVIC_SetPriority>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff0f 	bl	8003520 <__NVIC_EnableIRQ>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff1f 	bl	800355c <__NVIC_DisableIRQ>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff96 	bl	8003660 <SysTick_Config>
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e014      	b.n	800377a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	791b      	ldrb	r3, [r3, #4]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fe f8b3 	bl	80018cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	795b      	ldrb	r3, [r3, #5]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_DAC_ConfigChannel+0x18>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e192      	b.n	8003afe <HAL_DAC_ConfigChannel+0x33e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2202      	movs	r2, #2
 80037e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d174      	bne.n	80038d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037ec:	f7fe fafe 	bl	8001dec <HAL_GetTick>
 80037f0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d134      	bne.n	8003862 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037f8:	e011      	b.n	800381e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037fa:	f7fe faf7 	bl	8001dec <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d90a      	bls.n	800381e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f043 0208 	orr.w	r2, r3, #8
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2203      	movs	r2, #3
 8003818:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e16f      	b.n	8003afe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e6      	bne.n	80037fa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800382c:	2001      	movs	r0, #1
 800382e:	f7fe fae9 	bl	8001e04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
 800383c:	e01e      	b.n	800387c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800383e:	f7fe fad5 	bl	8001dec <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d90a      	bls.n	8003862 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f043 0208 	orr.w	r2, r3, #8
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2203      	movs	r2, #3
 800385c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e14d      	b.n	8003afe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	2b00      	cmp	r3, #0
 800386a:	dbe8      	blt.n	800383e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800386c:	2001      	movs	r0, #1
 800386e:	f7fe fac9 	bl	8001e04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	ea02 0103 	and.w	r1, r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	21ff      	movs	r1, #255	@ 0xff
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	ea02 0103 	and.w	r1, r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11d      	bne.n	800391a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	221f      	movs	r2, #31
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	4013      	ands	r3, r2
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	4313      	orrs	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2207      	movs	r2, #7
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	4013      	ands	r3, r2
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d102      	bne.n	8003944 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	e00f      	b.n	8003964 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d102      	bne.n	8003952 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800394c:	2301      	movs	r3, #1
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	e008      	b.n	8003964 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800395a:	2301      	movs	r3, #1
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	e001      	b.n	8003964 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	6a3a      	ldr	r2, [r7, #32]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	4013      	ands	r3, r2
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_DAC_ConfigChannel+0x1d8>
 8003992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003996:	e000      	b.n	800399a <HAL_DAC_ConfigChannel+0x1da>
 8003998:	2300      	movs	r3, #0
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	4013      	ands	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	795b      	ldrb	r3, [r3, #5]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_DAC_ConfigChannel+0x204>
 80039be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039c2:	e000      	b.n	80039c6 <HAL_DAC_ConfigChannel+0x206>
 80039c4:	2300      	movs	r3, #0
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d114      	bne.n	8003a06 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80039dc:	f001 fc92 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 80039e0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4a48      	ldr	r2, [pc, #288]	@ (8003b08 <HAL_DAC_ConfigChannel+0x348>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d904      	bls.n	80039f4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f2:	e00f      	b.n	8003a14 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4a45      	ldr	r2, [pc, #276]	@ (8003b0c <HAL_DAC_ConfigChannel+0x34c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d90a      	bls.n	8003a12 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a04:	e006      	b.n	8003a14 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	e000      	b.n	8003a14 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003a12:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a22:	4313      	orrs	r3, r2
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	4013      	ands	r3, r2
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	22c0      	movs	r2, #192	@ 0xc0
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	ea02 0103 	and.w	r1, r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3728      	adds	r7, #40	@ 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	09896800 	.word	0x09896800
 8003b0c:	04c4b400 	.word	0x04c4b400

08003b10 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff fe2f 	bl	8003782 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	711a      	strb	r2, [r3, #4]
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fe28 	bl	8003796 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fe1e 	bl	80037aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	711a      	strb	r2, [r3, #4]
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0UL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  /* Ensure Channel 2 exists for this particular DAC instance */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	795b      	ldrb	r3, [r3, #5]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_DACEx_DualStart_DMA+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e095      	b.n	8003cc6 <HAL_DACEx_DualStart_DMA+0x14a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d114      	bne.n	8003bd6 <HAL_DACEx_DualStart_DMA+0x5a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a47      	ldr	r2, [pc, #284]	@ (8003cd0 <HAL_DACEx_DualStart_DMA+0x154>)
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a46      	ldr	r2, [pc, #280]	@ (8003cd4 <HAL_DACEx_DualStart_DMA+0x158>)
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a45      	ldr	r2, [pc, #276]	@ (8003cd8 <HAL_DACEx_DualStart_DMA+0x15c>)
 8003bc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e013      	b.n	8003bfe <HAL_DACEx_DualStart_DMA+0x82>
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4a40      	ldr	r2, [pc, #256]	@ (8003cdc <HAL_DACEx_DualStart_DMA+0x160>)
 8003bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce0 <HAL_DACEx_DualStart_DMA+0x164>)
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce4 <HAL_DACEx_DualStart_DMA+0x168>)
 8003bec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  switch (Alignment)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d013      	beq.n	8003c2c <HAL_DACEx_DualStart_DMA+0xb0>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d815      	bhi.n	8003c36 <HAL_DACEx_DualStart_DMA+0xba>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_DACEx_DualStart_DMA+0x9c>
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d005      	beq.n	8003c22 <HAL_DACEx_DualStart_DMA+0xa6>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
      break;
    default:
      break;
 8003c16:	e00e      	b.n	8003c36 <HAL_DACEx_DualStart_DMA+0xba>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	613b      	str	r3, [r7, #16]
      break;
 8003c20:	e00a      	b.n	8003c38 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3324      	adds	r3, #36	@ 0x24
 8003c28:	613b      	str	r3, [r7, #16]
      break;
 8003c2a:	e005      	b.n	8003c38 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3328      	adds	r3, #40	@ 0x28
 8003c32:	613b      	str	r3, [r7, #16]
      break;
 8003c34:	e000      	b.n	8003c38 <HAL_DACEx_DualStart_DMA+0xbc>
      break;
 8003c36:	bf00      	nop
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d111      	bne.n	8003c62 <HAL_DACEx_DualStart_DMA+0xe6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6898      	ldr	r0, [r3, #8]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	f000 f96a 	bl	8003f30 <HAL_DMA_Start_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]
 8003c60:	e010      	b.n	8003c84 <HAL_DACEx_DualStart_DMA+0x108>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003c70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68d8      	ldr	r0, [r3, #12]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	f000 f958 	bl	8003f30 <HAL_DMA_Start_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <HAL_DACEx_DualStart_DMA+0x13c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003cae:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7fe f8a7 	bl	8001e04 <HAL_Delay>
 8003cb6:	e005      	b.n	8003cc4 <HAL_DACEx_DualStart_DMA+0x148>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003b11 	.word	0x08003b11
 8003cd4:	08003b33 	.word	0x08003b33
 8003cd8:	08003b4f 	.word	0x08003b4f
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003d95 	.word	0x08003d95
 8003ce4:	08003db1 	.word	0x08003db1

08003ce8 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d105      	bne.n	8003d08 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e004      	b.n	8003d12 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3320      	adds	r3, #32
 8003d20:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ffd8 	bl	8003d36 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	711a      	strb	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff ffd1 	bl	8003d4a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff ffc7 	bl	8003d5e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	711a      	strb	r2, [r3, #4]
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e08d      	b.n	8003f0e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <HAL_DMA_Init+0x138>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d80f      	bhi.n	8003e1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b45      	ldr	r3, [pc, #276]	@ (8003f1c <HAL_DMA_Init+0x13c>)
 8003e06:	4413      	add	r3, r2
 8003e08:	4a45      	ldr	r2, [pc, #276]	@ (8003f20 <HAL_DMA_Init+0x140>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a42      	ldr	r2, [pc, #264]	@ (8003f24 <HAL_DMA_Init+0x144>)
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e1c:	e00e      	b.n	8003e3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <HAL_DMA_Init+0x148>)
 8003e26:	4413      	add	r3, r2
 8003e28:	4a3d      	ldr	r2, [pc, #244]	@ (8003f20 <HAL_DMA_Init+0x140>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	009a      	lsls	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	@ (8003f2c <HAL_DMA_Init+0x14c>)
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9b6 	bl	8004200 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9c:	d102      	bne.n	8003ea4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eb8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_DMA_Init+0x104>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d80c      	bhi.n	8003ee4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9d6 	bl	800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e008      	b.n	8003ef6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020407 	.word	0x40020407
 8003f1c:	bffdfff8 	.word	0xbffdfff8
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	40020000 	.word	0x40020000
 8003f28:	bffdfbf8 	.word	0xbffdfbf8
 8003f2c:	40020400 	.word	0x40020400

08003f30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_Start_IT+0x20>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e066      	b.n	800401e <HAL_DMA_Start_IT+0xee>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d155      	bne.n	8004010 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f8fb 	bl	8004184 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 020e 	orr.w	r2, r2, #14
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00f      	b.n	8003fc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 020a 	orr.w	r2, r2, #10
 8003fc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e005      	b.n	800401c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004018:	2302      	movs	r3, #2
 800401a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2204      	movs	r2, #4
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d026      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x7a>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d021      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0204 	bic.w	r2, r2, #4
 8004078:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f003 021f 	and.w	r2, r3, #31
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2104      	movs	r1, #4
 8004088:	fa01 f202 	lsl.w	r2, r1, r2
 800408c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	2b00      	cmp	r3, #0
 8004094:	d071      	beq.n	800417a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800409e:	e06c      	b.n	800417a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2202      	movs	r2, #2
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02e      	beq.n	8004112 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d029      	beq.n	8004112 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020a 	bic.w	r2, r2, #10
 80040da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	2102      	movs	r1, #2
 80040f2:	fa01 f202 	lsl.w	r2, r1, r2
 80040f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d038      	beq.n	800417a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004110:	e033      	b.n	800417a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2208      	movs	r2, #8
 800411c:	409a      	lsls	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02a      	beq.n	800417c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d025      	beq.n	800417c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020e 	bic.w	r2, r2, #14
 800413e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800417a:	bf00      	nop
 800417c:	bf00      	nop
}
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800419a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f003 021f 	and.w	r2, r3, #31
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f202 	lsl.w	r2, r1, r2
 80041c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d108      	bne.n	80041e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041e2:	e007      	b.n	80041f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004210:	429a      	cmp	r2, r3
 8004212:	d802      	bhi.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004214:	4b15      	ldr	r3, [pc, #84]	@ (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e001      	b.n	800421e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800421c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3b08      	subs	r3, #8
 800422a:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0b      	ldr	r2, [pc, #44]	@ (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800424a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40020407 	.word	0x40020407
 800426c:	40020800 	.word	0x40020800
 8004270:	40020820 	.word	0x40020820
 8004274:	cccccccd 	.word	0xcccccccd
 8004278:	40020880 	.word	0x40020880

0800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800429e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	1000823f 	.word	0x1000823f
 80042c0:	40020940 	.word	0x40020940

080042c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042d2:	e15a      	b.n	800458a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2101      	movs	r1, #1
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 814c 	beq.w	8004584 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d005      	beq.n	8004304 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004300:	2b02      	cmp	r3, #2
 8004302:	d130      	bne.n	8004366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800433a:	2201      	movs	r2, #1
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0201 	and.w	r2, r3, #1
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b03      	cmp	r3, #3
 8004370:	d017      	beq.n	80043a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d123      	bne.n	80043f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	08da      	lsrs	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3208      	adds	r2, #8
 80043b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	2203      	movs	r2, #3
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0203 	and.w	r2, r3, #3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a6 	beq.w	8004584 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004438:	4b5b      	ldr	r3, [pc, #364]	@ (80045a8 <HAL_GPIO_Init+0x2e4>)
 800443a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443c:	4a5a      	ldr	r2, [pc, #360]	@ (80045a8 <HAL_GPIO_Init+0x2e4>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6613      	str	r3, [r2, #96]	@ 0x60
 8004444:	4b58      	ldr	r3, [pc, #352]	@ (80045a8 <HAL_GPIO_Init+0x2e4>)
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004450:	4a56      	ldr	r2, [pc, #344]	@ (80045ac <HAL_GPIO_Init+0x2e8>)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	3302      	adds	r3, #2
 8004458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	220f      	movs	r2, #15
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800447a:	d01f      	beq.n	80044bc <HAL_GPIO_Init+0x1f8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a4c      	ldr	r2, [pc, #304]	@ (80045b0 <HAL_GPIO_Init+0x2ec>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d019      	beq.n	80044b8 <HAL_GPIO_Init+0x1f4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a4b      	ldr	r2, [pc, #300]	@ (80045b4 <HAL_GPIO_Init+0x2f0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <HAL_GPIO_Init+0x1f0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a4a      	ldr	r2, [pc, #296]	@ (80045b8 <HAL_GPIO_Init+0x2f4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00d      	beq.n	80044b0 <HAL_GPIO_Init+0x1ec>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a49      	ldr	r2, [pc, #292]	@ (80045bc <HAL_GPIO_Init+0x2f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <HAL_GPIO_Init+0x1e8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a48      	ldr	r2, [pc, #288]	@ (80045c0 <HAL_GPIO_Init+0x2fc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_GPIO_Init+0x1e4>
 80044a4:	2305      	movs	r3, #5
 80044a6:	e00a      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044a8:	2306      	movs	r3, #6
 80044aa:	e008      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044ac:	2304      	movs	r3, #4
 80044ae:	e006      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044b0:	2303      	movs	r3, #3
 80044b2:	e004      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e002      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_GPIO_Init+0x1fa>
 80044bc:	2300      	movs	r3, #0
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	f002 0203 	and.w	r2, r2, #3
 80044c4:	0092      	lsls	r2, r2, #2
 80044c6:	4093      	lsls	r3, r2
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ce:	4937      	ldr	r1, [pc, #220]	@ (80045ac <HAL_GPIO_Init+0x2e8>)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	3302      	adds	r3, #2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044dc:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004500:	4a30      	ldr	r2, [pc, #192]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004506:	4b2f      	ldr	r3, [pc, #188]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	43db      	mvns	r3, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800452a:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004554:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800455a:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800457e:	4a11      	ldr	r2, [pc, #68]	@ (80045c4 <HAL_GPIO_Init+0x300>)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f ae9d 	bne.w	80042d4 <HAL_GPIO_Init+0x10>
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40010000 	.word	0x40010000
 80045b0:	48000400 	.word	0x48000400
 80045b4:	48000800 	.word	0x48000800
 80045b8:	48000c00 	.word	0x48000c00
 80045bc:	48001000 	.word	0x48001000
 80045c0:	48001400 	.word	0x48001400
 80045c4:	40010400 	.word	0x40010400

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e4:	e002      	b.n	80045ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	041a      	lsls	r2, r3, #16
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	43d9      	mvns	r1, r3
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	400b      	ands	r3, r1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0bb      	b.n	80047ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b05      	cmp	r3, #5
 800464c:	d101      	bne.n	8004652 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0b3      	b.n	80047ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d101      	bne.n	8004662 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0ab      	b.n	80047ba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	4b58      	ldr	r3, [pc, #352]	@ (80047c4 <HAL_OPAMP_Init+0x198>)
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	4a57      	ldr	r2, [pc, #348]	@ (80047c4 <HAL_OPAMP_Init+0x198>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6613      	str	r3, [r2, #96]	@ 0x60
 800466e:	4b55      	ldr	r3, [pc, #340]	@ (80047c4 <HAL_OPAMP_Init+0x198>)
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd f9c2 	bl	8001a18 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d003      	beq.n	80046a4 <HAL_OPAMP_Init+0x78>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d133      	bne.n	800470c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 0110 	bic.w	r1, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_OPAMP_Init+0x19c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6851      	ldr	r1, [r2, #4]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6892      	ldr	r2, [r2, #8]
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6912      	ldr	r2, [r2, #16]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	7d09      	ldrb	r1, [r1, #20]
 80046d8:	2901      	cmp	r1, #1
 80046da:	d102      	bne.n	80046e2 <HAL_OPAMP_Init+0xb6>
 80046dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046e0:	e000      	b.n	80046e4 <HAL_OPAMP_Init+0xb8>
 80046e2:	2100      	movs	r1, #0
 80046e4:	4311      	orrs	r1, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046f6:	04d2      	lsls	r2, r2, #19
 80046f8:	4311      	orrs	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046fe:	0612      	lsls	r2, r2, #24
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	430b      	orrs	r3, r1
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e035      	b.n	8004778 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 0110 	bic.w	r1, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <HAL_OPAMP_Init+0x19c>)
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6851      	ldr	r1, [r2, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6912      	ldr	r2, [r2, #16]
 8004740:	430a      	orrs	r2, r1
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	7d09      	ldrb	r1, [r1, #20]
 8004746:	2901      	cmp	r1, #1
 8004748:	d102      	bne.n	8004750 <HAL_OPAMP_Init+0x124>
 800474a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800474e:	e000      	b.n	8004752 <HAL_OPAMP_Init+0x126>
 8004750:	2100      	movs	r1, #0
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004758:	4311      	orrs	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004764:	04d2      	lsls	r2, r2, #19
 8004766:	4311      	orrs	r1, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800476c:	0612      	lsls	r2, r2, #24
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db10      	blt.n	80047a4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	e0003e11 	.word	0xe0003e11

080047cc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e01d      	b.n	8004820 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d102      	bne.n	80047f6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e014      	b.n	8004820 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10c      	bne.n	800481c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800481a:	e001      	b.n	8004820 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d141      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800483e:	4b4b      	ldr	r3, [pc, #300]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d131      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800484c:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004852:	4a46      	ldr	r2, [pc, #280]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485c:	4b43      	ldr	r3, [pc, #268]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004864:	4a41      	ldr	r2, [pc, #260]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486c:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2232      	movs	r2, #50	@ 0x32
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	4a3f      	ldr	r2, [pc, #252]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004882:	e002      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3b01      	subs	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488a:	4b38      	ldr	r3, [pc, #224]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d102      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800489e:	4b33      	ldr	r3, [pc, #204]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d158      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e057      	b.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b0:	4b2e      	ldr	r3, [pc, #184]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b6:	4a2d      	ldr	r2, [pc, #180]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048c0:	e04d      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c8:	d141      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ca:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d131      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d8:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048de:	4a23      	ldr	r2, [pc, #140]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e8:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048f0:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2232      	movs	r2, #50	@ 0x32
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0c9b      	lsrs	r3, r3, #18
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490e:	e002      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004916:	4b15      	ldr	r3, [pc, #84]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004922:	d102      	bne.n	800492a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f2      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492a:	4b10      	ldr	r3, [pc, #64]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004936:	d112      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e011      	b.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004942:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800494c:	e007      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800494e:	4b07      	ldr	r3, [pc, #28]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004956:	4a05      	ldr	r2, [pc, #20]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40007000 	.word	0x40007000
 8004970:	2000000c 	.word	0x2000000c
 8004974:	431bde83 	.word	0x431bde83

08004978 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004986:	6093      	str	r3, [r2, #8]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40007000 	.word	0x40007000

08004998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e306      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d075      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b6:	4b97      	ldr	r3, [pc, #604]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c0:	4b94      	ldr	r3, [pc, #592]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_OscConfig+0x3e>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d002      	beq.n	80049dc <HAL_RCC_OscConfig+0x44>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05b      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x108>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d157      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e2e1      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x74>
 80049fe:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a84      	ldr	r2, [pc, #528]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e01d      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x98>
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7b      	ldr	r2, [pc, #492]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCC_OscConfig+0xb0>
 8004a30:	4b78      	ldr	r3, [pc, #480]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a77      	ldr	r2, [pc, #476]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b75      	ldr	r3, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a74      	ldr	r2, [pc, #464]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd f9cc 	bl	8001dec <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fd f9c8 	bl	8001dec <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e2a6      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0xc0>
 8004a76:	e014      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd f9b8 	bl	8001dec <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fd f9b4 	bl	8001dec <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e292      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a92:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0xe8>
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d075      	beq.n	8004b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aae:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab8:	4b56      	ldr	r3, [pc, #344]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d102      	bne.n	8004ace <HAL_RCC_OscConfig+0x136>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x13c>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d11f      	bne.n	8004b14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_OscConfig+0x154>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e265      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b49      	ldr	r3, [pc, #292]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	4946      	ldr	r1, [pc, #280]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b00:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <HAL_RCC_OscConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd f925 	bl	8001d54 <HAL_InitTick>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d043      	beq.n	8004b98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e251      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a3c      	ldr	r2, [pc, #240]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd f960 	bl	8001dec <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fd f95c 	bl	8001dec <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e23a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b42:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	492d      	ldr	r1, [pc, #180]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 8004b62:	e01a      	b.n	8004b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd f93c 	bl	8001dec <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fd f938 	bl	8001dec <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e216      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8a:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1e0>
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d041      	beq.n	8004c2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bae:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb4:	4a17      	ldr	r2, [pc, #92]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fd f915 	bl	8001dec <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc6:	f7fd f911 	bl	8001dec <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1ef      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ef      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x22e>
 8004be6:	e020      	b.n	8004c2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <HAL_RCC_OscConfig+0x27c>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd f8f8 	bl	8001dec <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bfe:	e00d      	b.n	8004c1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd f8f4 	bl	8001dec <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d906      	bls.n	8004c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1d2      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ea      	bne.n	8004c00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80a6 	beq.w	8004d84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c3c:	4b84      	ldr	r3, [pc, #528]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_OscConfig+0x2b4>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x2b6>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b7f      	ldr	r3, [pc, #508]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	4a7e      	ldr	r2, [pc, #504]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6e:	4b79      	ldr	r3, [pc, #484]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7a:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a75      	ldr	r2, [pc, #468]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fd f8b1 	bl	8001dec <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7fd f8ad 	bl	8001dec <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e18b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e54 <HAL_RCC_OscConfig+0x4bc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d108      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x32e>
 8004cb4:	4b66      	ldr	r3, [pc, #408]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a65      	ldr	r2, [pc, #404]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc4:	e024      	b.n	8004d10 <HAL_RCC_OscConfig+0x378>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d110      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x358>
 8004cce:	4b60      	ldr	r3, [pc, #384]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cde:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cee:	e00f      	b.n	8004d10 <HAL_RCC_OscConfig+0x378>
 8004cf0:	4b57      	ldr	r3, [pc, #348]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a56      	ldr	r2, [pc, #344]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	4a52      	ldr	r2, [pc, #328]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f868 	bl	8001dec <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fd f864 	bl	8001dec <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e140      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d36:	4b46      	ldr	r3, [pc, #280]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ed      	beq.n	8004d20 <HAL_RCC_OscConfig+0x388>
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fd f851 	bl	8001dec <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fd f84d 	bl	8001dec <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e129      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d64:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ed      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d105      	bne.n	8004d84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d78:	4b35      	ldr	r3, [pc, #212]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7c:	4a34      	ldr	r2, [pc, #208]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d03c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01c      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d98:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd f820 	bl	8001dec <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db0:	f7fd f81c 	bl	8001dec <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0fa      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dc2:	4b23      	ldr	r3, [pc, #140]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <HAL_RCC_OscConfig+0x418>
 8004dd0:	e01b      	b.n	8004e0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de2:	f7fd f803 	bl	8001dec <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dea:	f7fc ffff 	bl	8001dec <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0dd      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dfc:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ef      	bne.n	8004dea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80d1 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e14:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	f000 808b 	beq.w	8004f38 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d15e      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a08      	ldr	r2, [pc, #32]	@ (8004e50 <HAL_RCC_OscConfig+0x4b8>)
 8004e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc ffd9 	bl	8001dec <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fc ffd5 	bl	8001dec <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d905      	bls.n	8004e58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0b3      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ec      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b56      	ldr	r3, [pc, #344]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	4b56      	ldr	r3, [pc, #344]	@ (8004fc4 <HAL_RCC_OscConfig+0x62c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6a11      	ldr	r1, [r2, #32]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e7e:	0212      	lsls	r2, r2, #8
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e86:	0852      	lsrs	r2, r2, #1
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0552      	lsls	r2, r2, #21
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0652      	lsls	r2, r2, #25
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e9e:	06d2      	lsls	r2, r2, #27
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4947      	ldr	r1, [pc, #284]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea8:	4b45      	ldr	r3, [pc, #276]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a44      	ldr	r2, [pc, #272]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eb4:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a41      	ldr	r2, [pc, #260]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc ff94 	bl	8001dec <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fc ff90 	bl	8001dec <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e06e      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x530>
 8004ee6:	e066      	b.n	8004fb6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b35      	ldr	r3, [pc, #212]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a34      	ldr	r2, [pc, #208]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ef4:	4b32      	ldr	r3, [pc, #200]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f00:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004f06:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc ff6c 	bl	8001dec <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fc ff68 	bl	8001dec <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e046      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2a:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x580>
 8004f36:	e03e      	b.n	8004fb6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e039      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f44:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc0 <HAL_RCC_OscConfig+0x628>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0203 	and.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d12c      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	3b01      	subs	r3, #1
 8004f64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d123      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11b      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d113      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	019f800c 	.word	0x019f800c

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e11e      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b91      	ldr	r3, [pc, #580]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d910      	bls.n	8005010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 020f 	bic.w	r2, r3, #15
 8004ff6:	498c      	ldr	r1, [pc, #560]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b8a      	ldr	r3, [pc, #552]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e106      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d073      	beq.n	8005104 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d129      	bne.n	8005078 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005024:	4b81      	ldr	r3, [pc, #516]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0f4      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005034:	f000 f99e 	bl	8005374 <RCC_GetSysClockFreqFromPLLSource>
 8005038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4a7c      	ldr	r2, [pc, #496]	@ (8005230 <HAL_RCC_ClockConfig+0x268>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d93f      	bls.n	80050c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005042:	4b7a      	ldr	r3, [pc, #488]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d033      	beq.n	80050c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800505e:	2b00      	cmp	r3, #0
 8005060:	d12f      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005062:	4b72      	ldr	r3, [pc, #456]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800506a:	4a70      	ldr	r2, [pc, #448]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 800506c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e024      	b.n	80050c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d107      	bne.n	8005090 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005080:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0c6      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005090:	4b66      	ldr	r3, [pc, #408]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0be      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050a0:	f000 f8ce 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4a61      	ldr	r2, [pc, #388]	@ (8005230 <HAL_RCC_ClockConfig+0x268>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d909      	bls.n	80050c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ae:	4b5f      	ldr	r3, [pc, #380]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b6:	4a5d      	ldr	r2, [pc, #372]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80050b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050c2:	4b5a      	ldr	r3, [pc, #360]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4957      	ldr	r1, [pc, #348]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d4:	f7fc fe8a 	bl	8001dec <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050dc:	f7fc fe86 	bl	8001dec <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e095      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	4b4e      	ldr	r3, [pc, #312]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 020c 	and.w	r2, r3, #12
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	429a      	cmp	r2, r3
 8005102:	d1eb      	bne.n	80050dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d023      	beq.n	8005158 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800511c:	4b43      	ldr	r3, [pc, #268]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a42      	ldr	r2, [pc, #264]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005126:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005134:	4b3d      	ldr	r3, [pc, #244]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800513c:	4a3b      	ldr	r2, [pc, #236]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 800513e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005144:	4b39      	ldr	r3, [pc, #228]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4936      	ldr	r1, [pc, #216]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
 8005156:	e008      	b.n	800516a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b80      	cmp	r3, #128	@ 0x80
 800515c:	d105      	bne.n	800516a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800515e:	4b33      	ldr	r3, [pc, #204]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4a32      	ldr	r2, [pc, #200]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 8005164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005168:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516a:	4b2f      	ldr	r3, [pc, #188]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d21d      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005178:	4b2b      	ldr	r3, [pc, #172]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f023 020f 	bic.w	r2, r3, #15
 8005180:	4929      	ldr	r1, [pc, #164]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005188:	f7fc fe30 	bl	8001dec <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005190:	f7fc fe2c 	bl	8001dec <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e03b      	b.n	800521e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b20      	ldr	r3, [pc, #128]	@ (8005228 <HAL_RCC_ClockConfig+0x260>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1ed      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4917      	ldr	r1, [pc, #92]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051de:	4b13      	ldr	r3, [pc, #76]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	490f      	ldr	r1, [pc, #60]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051f2:	f000 f825 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b0c      	ldr	r3, [pc, #48]	@ (800522c <HAL_RCC_ClockConfig+0x264>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	490c      	ldr	r1, [pc, #48]	@ (8005234 <HAL_RCC_ClockConfig+0x26c>)
 8005204:	5ccb      	ldrb	r3, [r1, r3]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	fa22 f303 	lsr.w	r3, r2, r3
 800520e:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <HAL_RCC_ClockConfig+0x270>)
 8005210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x274>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc fd9c 	bl	8001d54 <HAL_InitTick>
 800521c:	4603      	mov	r3, r0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40022000 	.word	0x40022000
 800522c:	40021000 	.word	0x40021000
 8005230:	04c4b400 	.word	0x04c4b400
 8005234:	08008190 	.word	0x08008190
 8005238:	2000000c 	.word	0x2000000c
 800523c:	20000010 	.word	0x20000010

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005246:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d102      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005252:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e047      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d102      	bne.n	800526a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005264:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e03e      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800526a:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d136      	bne.n	80052e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005276:	4b20      	ldr	r3, [pc, #128]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d10c      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005294:	4a1a      	ldr	r2, [pc, #104]	@ (8005300 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529e:	68d2      	ldr	r2, [r2, #12]
 80052a0:	0a12      	lsrs	r2, r2, #8
 80052a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
      break;
 80052ac:	e00c      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ae:	4a13      	ldr	r2, [pc, #76]	@ (80052fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	4a10      	ldr	r2, [pc, #64]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b8:	68d2      	ldr	r2, [r2, #12]
 80052ba:	0a12      	lsrs	r2, r2, #8
 80052bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
      break;
 80052c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	0e5b      	lsrs	r3, r3, #25
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	3301      	adds	r3, #1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e001      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052e8:	693b      	ldr	r3, [r7, #16]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	00f42400 	.word	0x00f42400
 8005300:	007a1200 	.word	0x007a1200

08005304 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005308:	4b03      	ldr	r3, [pc, #12]	@ (8005318 <HAL_RCC_GetHCLKFreq+0x14>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	2000000c 	.word	0x2000000c

0800531c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005320:	f7ff fff0 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4904      	ldr	r1, [pc, #16]	@ (8005344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40021000 	.word	0x40021000
 8005344:	080081a0 	.word	0x080081a0

08005348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800534c:	f7ff ffda 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0adb      	lsrs	r3, r3, #11
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	@ (8005370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	080081a0 	.word	0x080081a0

08005374 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537a:	4b1e      	ldr	r3, [pc, #120]	@ (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005384:	4b1b      	ldr	r3, [pc, #108]	@ (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10c      	bne.n	80053b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005398:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	4a14      	ldr	r2, [pc, #80]	@ (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a2:	68d2      	ldr	r2, [r2, #12]
 80053a4:	0a12      	lsrs	r2, r2, #8
 80053a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
    break;
 80053b0:	e00c      	b.n	80053cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053b2:	4a12      	ldr	r2, [pc, #72]	@ (80053fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053bc:	68d2      	ldr	r2, [r2, #12]
 80053be:	0a12      	lsrs	r2, r2, #8
 80053c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
    break;
 80053ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	0e5b      	lsrs	r3, r3, #25
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	3301      	adds	r3, #1
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053e6:	687b      	ldr	r3, [r7, #4]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40021000 	.word	0x40021000
 80053f8:	007a1200 	.word	0x007a1200
 80053fc:	00f42400 	.word	0x00f42400

08005400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005408:	2300      	movs	r3, #0
 800540a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800540c:	2300      	movs	r3, #0
 800540e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8098 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541e:	2300      	movs	r3, #0
 8005420:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005422:	4b43      	ldr	r3, [pc, #268]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542e:	4b40      	ldr	r3, [pc, #256]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005432:	4a3f      	ldr	r2, [pc, #252]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005438:	6593      	str	r3, [r2, #88]	@ 0x58
 800543a:	4b3d      	ldr	r3, [pc, #244]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005446:	2301      	movs	r3, #1
 8005448:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800544a:	4b3a      	ldr	r3, [pc, #232]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a39      	ldr	r2, [pc, #228]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005456:	f7fc fcc9 	bl	8001dec <HAL_GetTick>
 800545a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800545c:	e009      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545e:	f7fc fcc5 	bl	8001dec <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d902      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	74fb      	strb	r3, [r7, #19]
        break;
 8005470:	e005      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005472:	4b30      	ldr	r3, [pc, #192]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ef      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d159      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005484:	4b2a      	ldr	r3, [pc, #168]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800548e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01e      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	429a      	cmp	r2, r3
 800549e:	d019      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054a0:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ac:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054cc:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fc fc85 	bl	8001dec <HAL_GetTick>
 80054e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e4:	e00b      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc fc81 	bl	8001dec <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d902      	bls.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	74fb      	strb	r3, [r7, #19]
            break;
 80054fc:	e006      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ec      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005512:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	4903      	ldr	r1, [pc, #12]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005528:	e008      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	74bb      	strb	r3, [r7, #18]
 800552e:	e005      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800553c:	7c7b      	ldrb	r3, [r7, #17]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4ba7      	ldr	r3, [pc, #668]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	4aa6      	ldr	r2, [pc, #664]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800554c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555a:	4ba1      	ldr	r3, [pc, #644]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005560:	f023 0203 	bic.w	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	499d      	ldr	r1, [pc, #628]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800557c:	4b98      	ldr	r3, [pc, #608]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005582:	f023 020c 	bic.w	r2, r3, #12
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4995      	ldr	r1, [pc, #596]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800559e:	4b90      	ldr	r3, [pc, #576]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	498c      	ldr	r1, [pc, #560]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055c0:	4b87      	ldr	r3, [pc, #540]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4984      	ldr	r1, [pc, #528]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055e2:	4b7f      	ldr	r3, [pc, #508]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	497b      	ldr	r1, [pc, #492]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005604:	4b76      	ldr	r3, [pc, #472]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4973      	ldr	r1, [pc, #460]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005626:	4b6e      	ldr	r3, [pc, #440]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	496a      	ldr	r1, [pc, #424]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005648:	4b65      	ldr	r3, [pc, #404]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4962      	ldr	r1, [pc, #392]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800566a:	4b5d      	ldr	r3, [pc, #372]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	4959      	ldr	r1, [pc, #356]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800568c:	4b54      	ldr	r3, [pc, #336]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005692:	f023 0203 	bic.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569a:	4951      	ldr	r1, [pc, #324]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ae:	4b4c      	ldr	r3, [pc, #304]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	4948      	ldr	r1, [pc, #288]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d0:	4b43      	ldr	r3, [pc, #268]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	4940      	ldr	r1, [pc, #256]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ee:	d105      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f0:	4b3b      	ldr	r3, [pc, #236]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a3a      	ldr	r2, [pc, #232]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005708:	4b35      	ldr	r3, [pc, #212]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005716:	4932      	ldr	r1, [pc, #200]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005726:	d105      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005728:	4b2d      	ldr	r3, [pc, #180]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a2c      	ldr	r2, [pc, #176]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005732:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005740:	4b27      	ldr	r3, [pc, #156]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005746:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	4924      	ldr	r1, [pc, #144]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005760:	4b1f      	ldr	r3, [pc, #124]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005778:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	4916      	ldr	r1, [pc, #88]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005796:	d105      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a10      	ldr	r2, [pc, #64]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d019      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057be:	4908      	ldr	r1, [pc, #32]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ce:	d109      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057da:	60d3      	str	r3, [r2, #12]
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057f0:	4b29      	ldr	r3, [pc, #164]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	4926      	ldr	r1, [pc, #152]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005810:	4b21      	ldr	r3, [pc, #132]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a20      	ldr	r2, [pc, #128]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800581a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005828:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005836:	4918      	ldr	r1, [pc, #96]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d105      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005848:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a12      	ldr	r2, [pc, #72]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800584e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005852:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005860:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005866:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586e:	490a      	ldr	r1, [pc, #40]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a04      	ldr	r2, [pc, #16]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800588a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800588c:	7cbb      	ldrb	r3, [r7, #18]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000

0800589c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e049      	b.n	8005942 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc f95a 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f000 fbca 	bl	8006074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005964:	4013      	ands	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <HAL_TIM_Base_DeInit+0x40>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <HAL_TIM_Base_DeInit+0x40>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc f91c 	bl	8001bc8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d001      	beq.n	8005a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e04c      	b.n	8005ab6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <HAL_TIM_Base_Start+0xc0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a36:	d01d      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ac8 <HAL_TIM_Base_Start+0xc4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a21      	ldr	r2, [pc, #132]	@ (8005acc <HAL_TIM_Base_Start+0xc8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad0 <HAL_TIM_Base_Start+0xcc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad4 <HAL_TIM_Base_Start+0xd0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad8 <HAL_TIM_Base_Start+0xd4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_TIM_Base_Start+0x70>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005adc <HAL_TIM_Base_Start+0xd8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d115      	bne.n	8005aa0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	4b19      	ldr	r3, [pc, #100]	@ (8005ae0 <HAL_TIM_Base_Start+0xdc>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d015      	beq.n	8005ab2 <HAL_TIM_Base_Start+0xae>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d011      	beq.n	8005ab2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e000      	b.n	8005ab4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40013400 	.word	0x40013400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40015000 	.word	0x40015000
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0202 	mvn.w	r2, #2
 8005b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa86 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa78 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa89 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa5c 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa4e 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa5f 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0208 	mvn.w	r2, #8
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa32 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa24 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa35 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa08 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f9fa 	bl	8006024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa0b 	bl	800604c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10e      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0201 	mvn.w	r2, #1
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9d4 	bl	8006010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c72:	2b80      	cmp	r3, #128	@ 0x80
 8005c74:	d10e      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b80      	cmp	r3, #128	@ 0x80
 8005c82:	d107      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fbd4 	bl	800643c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cae:	2b80      	cmp	r3, #128	@ 0x80
 8005cb0:	d107      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fbc7 	bl	8006450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d10e      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f9b9 	bl	8006060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d10e      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d107      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0220 	mvn.w	r2, #32
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb87 	bl	8006428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d28:	d10f      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb8d 	bl	8006464 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d58:	d10f      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d68:	d107      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fb7f 	bl	8006478 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d88:	d10f      	bne.n	8005daa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fb71 	bl	800648c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005db8:	d10f      	bne.n	8005dda <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dc8:	d107      	bne.n	8005dda <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fb63 	bl	80064a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_ConfigClockSource+0x1c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0f6      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x20a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005e1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6f      	ldr	r2, [pc, #444]	@ (8005ff8 <HAL_TIM_ConfigClockSource+0x214>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f000 80c1 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e40:	4a6d      	ldr	r2, [pc, #436]	@ (8005ff8 <HAL_TIM_ConfigClockSource+0x214>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f200 80c6 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e48:	4a6c      	ldr	r2, [pc, #432]	@ (8005ffc <HAL_TIM_ConfigClockSource+0x218>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f000 80b9 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e50:	4a6a      	ldr	r2, [pc, #424]	@ (8005ffc <HAL_TIM_ConfigClockSource+0x218>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	f200 80be 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e58:	4a69      	ldr	r2, [pc, #420]	@ (8006000 <HAL_TIM_ConfigClockSource+0x21c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	f000 80b1 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e60:	4a67      	ldr	r2, [pc, #412]	@ (8006000 <HAL_TIM_ConfigClockSource+0x21c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f200 80b6 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e68:	4a66      	ldr	r2, [pc, #408]	@ (8006004 <HAL_TIM_ConfigClockSource+0x220>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	f000 80a9 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e70:	4a64      	ldr	r2, [pc, #400]	@ (8006004 <HAL_TIM_ConfigClockSource+0x220>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	f200 80ae 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e78:	4a63      	ldr	r2, [pc, #396]	@ (8006008 <HAL_TIM_ConfigClockSource+0x224>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	f000 80a1 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e80:	4a61      	ldr	r2, [pc, #388]	@ (8006008 <HAL_TIM_ConfigClockSource+0x224>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f200 80a6 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e88:	4a60      	ldr	r2, [pc, #384]	@ (800600c <HAL_TIM_ConfigClockSource+0x228>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	f000 8099 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005e90:	4a5e      	ldr	r2, [pc, #376]	@ (800600c <HAL_TIM_ConfigClockSource+0x228>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f200 809e 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e9c:	f000 8091 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ea0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ea4:	f200 8096 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eac:	f000 8089 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005eb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eb4:	f200 808e 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x158>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x1f6>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed4:	2b70      	cmp	r3, #112	@ 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x12a>
 8005ed8:	2b70      	cmp	r3, #112	@ 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005edc:	2b60      	cmp	r3, #96	@ 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x19e>
 8005ee0:	2b60      	cmp	r3, #96	@ 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	2b50      	cmp	r3, #80	@ 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x17e>
 8005ee8:	2b50      	cmp	r3, #80	@ 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005eec:	2b40      	cmp	r3, #64	@ 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x1be>
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	2b30      	cmp	r3, #48	@ 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ef8:	2b30      	cmp	r3, #48	@ 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f000 f9cd 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f000 f9b6 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f928 	bl	80061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	@ 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f981 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 f947 	bl	8006222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	@ 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f971 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 f908 	bl	80061c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	@ 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f961 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 f958 	bl	8006282 <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	00100070 	.word	0x00100070
 8005ffc:	00100060 	.word	0x00100060
 8006000:	00100050 	.word	0x00100050
 8006004:	00100040 	.word	0x00100040
 8006008:	00100030 	.word	0x00100030
 800600c:	00100020 	.word	0x00100020

08006010 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a46      	ldr	r2, [pc, #280]	@ (80061a0 <TIM_Base_SetConfig+0x12c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d017      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006092:	d013      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a43      	ldr	r2, [pc, #268]	@ (80061a4 <TIM_Base_SetConfig+0x130>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a42      	ldr	r2, [pc, #264]	@ (80061a8 <TIM_Base_SetConfig+0x134>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a41      	ldr	r2, [pc, #260]	@ (80061ac <TIM_Base_SetConfig+0x138>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a40      	ldr	r2, [pc, #256]	@ (80061b0 <TIM_Base_SetConfig+0x13c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x48>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3f      	ldr	r2, [pc, #252]	@ (80061b4 <TIM_Base_SetConfig+0x140>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d108      	bne.n	80060ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a33      	ldr	r2, [pc, #204]	@ (80061a0 <TIM_Base_SetConfig+0x12c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d023      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060dc:	d01f      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a30      	ldr	r2, [pc, #192]	@ (80061a4 <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01b      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2f      	ldr	r2, [pc, #188]	@ (80061a8 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d017      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2e      	ldr	r2, [pc, #184]	@ (80061ac <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2d      	ldr	r2, [pc, #180]	@ (80061b0 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00f      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <TIM_Base_SetConfig+0x144>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00b      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2c      	ldr	r2, [pc, #176]	@ (80061bc <TIM_Base_SetConfig+0x148>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2b      	ldr	r2, [pc, #172]	@ (80061c0 <TIM_Base_SetConfig+0x14c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_Base_SetConfig+0xaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a26      	ldr	r2, [pc, #152]	@ (80061b4 <TIM_Base_SetConfig+0x140>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d108      	bne.n	8006130 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a12      	ldr	r2, [pc, #72]	@ (80061a0 <TIM_Base_SetConfig+0x12c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <TIM_Base_SetConfig+0x110>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <TIM_Base_SetConfig+0x13c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00f      	beq.n	8006184 <TIM_Base_SetConfig+0x110>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a14      	ldr	r2, [pc, #80]	@ (80061b8 <TIM_Base_SetConfig+0x144>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_Base_SetConfig+0x110>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <TIM_Base_SetConfig+0x148>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_Base_SetConfig+0x110>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a12      	ldr	r2, [pc, #72]	@ (80061c0 <TIM_Base_SetConfig+0x14c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0x110>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a0d      	ldr	r2, [pc, #52]	@ (80061b4 <TIM_Base_SetConfig+0x140>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	615a      	str	r2, [r3, #20]
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40015000 	.word	0x40015000
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 030a 	bic.w	r3, r3, #10
 8006200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f023 0210 	bic.w	r2, r3, #16
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	031b      	lsls	r3, r3, #12
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800625e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f043 0307 	orr.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006310:	2302      	movs	r3, #2
 8006312:	e074      	b.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a34      	ldr	r2, [pc, #208]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a33      	ldr	r2, [pc, #204]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a31      	ldr	r2, [pc, #196]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d108      	bne.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800636a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a21      	ldr	r2, [pc, #132]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006394:	d01d      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a15      	ldr	r2, [pc, #84]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a18      	ldr	r2, [pc, #96]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a11      	ldr	r2, [pc, #68]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10c      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40013400 	.word	0x40013400
 8006414:	40015000 	.word	0x40015000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40014000 	.word	0x40014000

08006428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e042      	b.n	800654c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fb fa45 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2224      	movs	r2, #36	@ 0x24
 80064e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f82c 	bl	8006554 <UART_SetConfig>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e022      	b.n	800654c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb1c 	bl	8006b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fba3 	bl	8006c90 <UART_CheckIdleState>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006558:	b08c      	sub	sp, #48	@ 0x30
 800655a:	af00      	add	r7, sp, #0
 800655c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	431a      	orrs	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	431a      	orrs	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	4313      	orrs	r3, r2
 800657a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4baa      	ldr	r3, [pc, #680]	@ (800682c <UART_SetConfig+0x2d8>)
 8006584:	4013      	ands	r3, r2
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800658c:	430b      	orrs	r3, r1
 800658e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a9f      	ldr	r2, [pc, #636]	@ (8006830 <UART_SetConfig+0x2dc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065bc:	4313      	orrs	r3, r2
 80065be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	f023 010f 	bic.w	r1, r3, #15
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a90      	ldr	r2, [pc, #576]	@ (8006834 <UART_SetConfig+0x2e0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d125      	bne.n	8006644 <UART_SetConfig+0xf0>
 80065f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006838 <UART_SetConfig+0x2e4>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	2b03      	cmp	r3, #3
 8006604:	d81a      	bhi.n	800663c <UART_SetConfig+0xe8>
 8006606:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <UART_SetConfig+0xb8>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	0800661d 	.word	0x0800661d
 8006610:	0800662d 	.word	0x0800662d
 8006614:	08006625 	.word	0x08006625
 8006618:	08006635 	.word	0x08006635
 800661c:	2301      	movs	r3, #1
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006622:	e116      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006624:	2302      	movs	r3, #2
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800662a:	e112      	b.n	8006852 <UART_SetConfig+0x2fe>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006632:	e10e      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663a:	e10a      	b.n	8006852 <UART_SetConfig+0x2fe>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e106      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7c      	ldr	r2, [pc, #496]	@ (800683c <UART_SetConfig+0x2e8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d138      	bne.n	80066c0 <UART_SetConfig+0x16c>
 800664e:	4b7a      	ldr	r3, [pc, #488]	@ (8006838 <UART_SetConfig+0x2e4>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d82d      	bhi.n	80066b8 <UART_SetConfig+0x164>
 800665c:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <UART_SetConfig+0x110>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006699 	.word	0x08006699
 8006668:	080066b9 	.word	0x080066b9
 800666c:	080066b9 	.word	0x080066b9
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066b9 	.word	0x080066b9
 800667c:	080066b9 	.word	0x080066b9
 8006680:	080066b9 	.word	0x080066b9
 8006684:	080066a1 	.word	0x080066a1
 8006688:	080066b9 	.word	0x080066b9
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066b1 	.word	0x080066b1
 8006698:	2300      	movs	r3, #0
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669e:	e0d8      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a6:	e0d4      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ae:	e0d0      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b6:	e0cc      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066be:	e0c8      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006840 <UART_SetConfig+0x2ec>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d125      	bne.n	8006716 <UART_SetConfig+0x1c2>
 80066ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006838 <UART_SetConfig+0x2e4>)
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066d4:	2b30      	cmp	r3, #48	@ 0x30
 80066d6:	d016      	beq.n	8006706 <UART_SetConfig+0x1b2>
 80066d8:	2b30      	cmp	r3, #48	@ 0x30
 80066da:	d818      	bhi.n	800670e <UART_SetConfig+0x1ba>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d00a      	beq.n	80066f6 <UART_SetConfig+0x1a2>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d814      	bhi.n	800670e <UART_SetConfig+0x1ba>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <UART_SetConfig+0x19a>
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d008      	beq.n	80066fe <UART_SetConfig+0x1aa>
 80066ec:	e00f      	b.n	800670e <UART_SetConfig+0x1ba>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f4:	e0ad      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066f6:	2302      	movs	r3, #2
 80066f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fc:	e0a9      	b.n	8006852 <UART_SetConfig+0x2fe>
 80066fe:	2304      	movs	r3, #4
 8006700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006704:	e0a5      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006706:	2308      	movs	r3, #8
 8006708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670c:	e0a1      	b.n	8006852 <UART_SetConfig+0x2fe>
 800670e:	2310      	movs	r3, #16
 8006710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006714:	e09d      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a4a      	ldr	r2, [pc, #296]	@ (8006844 <UART_SetConfig+0x2f0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d125      	bne.n	800676c <UART_SetConfig+0x218>
 8006720:	4b45      	ldr	r3, [pc, #276]	@ (8006838 <UART_SetConfig+0x2e4>)
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800672a:	2bc0      	cmp	r3, #192	@ 0xc0
 800672c:	d016      	beq.n	800675c <UART_SetConfig+0x208>
 800672e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006730:	d818      	bhi.n	8006764 <UART_SetConfig+0x210>
 8006732:	2b80      	cmp	r3, #128	@ 0x80
 8006734:	d00a      	beq.n	800674c <UART_SetConfig+0x1f8>
 8006736:	2b80      	cmp	r3, #128	@ 0x80
 8006738:	d814      	bhi.n	8006764 <UART_SetConfig+0x210>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <UART_SetConfig+0x1f0>
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	d008      	beq.n	8006754 <UART_SetConfig+0x200>
 8006742:	e00f      	b.n	8006764 <UART_SetConfig+0x210>
 8006744:	2300      	movs	r3, #0
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674a:	e082      	b.n	8006852 <UART_SetConfig+0x2fe>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006752:	e07e      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675a:	e07a      	b.n	8006852 <UART_SetConfig+0x2fe>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006762:	e076      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676a:	e072      	b.n	8006852 <UART_SetConfig+0x2fe>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a35      	ldr	r2, [pc, #212]	@ (8006848 <UART_SetConfig+0x2f4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d12a      	bne.n	80067cc <UART_SetConfig+0x278>
 8006776:	4b30      	ldr	r3, [pc, #192]	@ (8006838 <UART_SetConfig+0x2e4>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006784:	d01a      	beq.n	80067bc <UART_SetConfig+0x268>
 8006786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678a:	d81b      	bhi.n	80067c4 <UART_SetConfig+0x270>
 800678c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006790:	d00c      	beq.n	80067ac <UART_SetConfig+0x258>
 8006792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006796:	d815      	bhi.n	80067c4 <UART_SetConfig+0x270>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <UART_SetConfig+0x250>
 800679c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a0:	d008      	beq.n	80067b4 <UART_SetConfig+0x260>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x270>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067aa:	e052      	b.n	8006852 <UART_SetConfig+0x2fe>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b2:	e04e      	b.n	8006852 <UART_SetConfig+0x2fe>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ba:	e04a      	b.n	8006852 <UART_SetConfig+0x2fe>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e046      	b.n	8006852 <UART_SetConfig+0x2fe>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e042      	b.n	8006852 <UART_SetConfig+0x2fe>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <UART_SetConfig+0x2dc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d13a      	bne.n	800684c <UART_SetConfig+0x2f8>
 80067d6:	4b18      	ldr	r3, [pc, #96]	@ (8006838 <UART_SetConfig+0x2e4>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067e4:	d01a      	beq.n	800681c <UART_SetConfig+0x2c8>
 80067e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ea:	d81b      	bhi.n	8006824 <UART_SetConfig+0x2d0>
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f0:	d00c      	beq.n	800680c <UART_SetConfig+0x2b8>
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f6:	d815      	bhi.n	8006824 <UART_SetConfig+0x2d0>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <UART_SetConfig+0x2b0>
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006800:	d008      	beq.n	8006814 <UART_SetConfig+0x2c0>
 8006802:	e00f      	b.n	8006824 <UART_SetConfig+0x2d0>
 8006804:	2300      	movs	r3, #0
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680a:	e022      	b.n	8006852 <UART_SetConfig+0x2fe>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006812:	e01e      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681a:	e01a      	b.n	8006852 <UART_SetConfig+0x2fe>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006822:	e016      	b.n	8006852 <UART_SetConfig+0x2fe>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e012      	b.n	8006852 <UART_SetConfig+0x2fe>
 800682c:	cfff69f3 	.word	0xcfff69f3
 8006830:	40008000 	.word	0x40008000
 8006834:	40013800 	.word	0x40013800
 8006838:	40021000 	.word	0x40021000
 800683c:	40004400 	.word	0x40004400
 8006840:	40004800 	.word	0x40004800
 8006844:	40004c00 	.word	0x40004c00
 8006848:	40005000 	.word	0x40005000
 800684c:	2310      	movs	r3, #16
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4aae      	ldr	r2, [pc, #696]	@ (8006b10 <UART_SetConfig+0x5bc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	f040 8097 	bne.w	800698c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800685e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006862:	2b08      	cmp	r3, #8
 8006864:	d823      	bhi.n	80068ae <UART_SetConfig+0x35a>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <UART_SetConfig+0x318>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006891 	.word	0x08006891
 8006870:	080068af 	.word	0x080068af
 8006874:	08006899 	.word	0x08006899
 8006878:	080068af 	.word	0x080068af
 800687c:	0800689f 	.word	0x0800689f
 8006880:	080068af 	.word	0x080068af
 8006884:	080068af 	.word	0x080068af
 8006888:	080068af 	.word	0x080068af
 800688c:	080068a7 	.word	0x080068a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fe fd44 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 8006894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006896:	e010      	b.n	80068ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006898:	4b9e      	ldr	r3, [pc, #632]	@ (8006b14 <UART_SetConfig+0x5c0>)
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800689c:	e00d      	b.n	80068ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689e:	f7fe fccf 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80068a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068a4:	e009      	b.n	80068ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068ac:	e005      	b.n	80068ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8130 	beq.w	8006b22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	4a94      	ldr	r2, [pc, #592]	@ (8006b18 <UART_SetConfig+0x5c4>)
 80068c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d305      	bcc.n	80068f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d903      	bls.n	80068fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068f8:	e113      	b.n	8006b22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	2200      	movs	r2, #0
 80068fe:	60bb      	str	r3, [r7, #8]
 8006900:	60fa      	str	r2, [r7, #12]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	4a84      	ldr	r2, [pc, #528]	@ (8006b18 <UART_SetConfig+0x5c4>)
 8006908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800690c:	b29b      	uxth	r3, r3
 800690e:	2200      	movs	r2, #0
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800691c:	f7fa f832 	bl	8000984 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4610      	mov	r0, r2
 8006926:	4619      	mov	r1, r3
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	020b      	lsls	r3, r1, #8
 8006932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006936:	0202      	lsls	r2, r0, #8
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	6849      	ldr	r1, [r1, #4]
 800693c:	0849      	lsrs	r1, r1, #1
 800693e:	2000      	movs	r0, #0
 8006940:	460c      	mov	r4, r1
 8006942:	4605      	mov	r5, r0
 8006944:	eb12 0804 	adds.w	r8, r2, r4
 8006948:	eb43 0905 	adc.w	r9, r3, r5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	469a      	mov	sl, r3
 8006954:	4693      	mov	fp, r2
 8006956:	4652      	mov	r2, sl
 8006958:	465b      	mov	r3, fp
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7fa f811 	bl	8000984 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4613      	mov	r3, r2
 8006968:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006970:	d308      	bcc.n	8006984 <UART_SetConfig+0x430>
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006978:	d204      	bcs.n	8006984 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a3a      	ldr	r2, [r7, #32]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	e0ce      	b.n	8006b22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800698a:	e0ca      	b.n	8006b22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006994:	d166      	bne.n	8006a64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006996:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800699a:	2b08      	cmp	r3, #8
 800699c:	d827      	bhi.n	80069ee <UART_SetConfig+0x49a>
 800699e:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <UART_SetConfig+0x450>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	080069d1 	.word	0x080069d1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	080069ef 	.word	0x080069ef
 80069b4:	080069df 	.word	0x080069df
 80069b8:	080069ef 	.word	0x080069ef
 80069bc:	080069ef 	.word	0x080069ef
 80069c0:	080069ef 	.word	0x080069ef
 80069c4:	080069e7 	.word	0x080069e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c8:	f7fe fca8 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ce:	e014      	b.n	80069fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d0:	f7fe fcba 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80069d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069d6:	e010      	b.n	80069fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006b14 <UART_SetConfig+0x5c0>)
 80069da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069dc:	e00d      	b.n	80069fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069de:	f7fe fc2f 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80069e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069e4:	e009      	b.n	80069fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069ec:	e005      	b.n	80069fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8090 	beq.w	8006b22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	4a44      	ldr	r2, [pc, #272]	@ (8006b18 <UART_SetConfig+0x5c4>)
 8006a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a14:	005a      	lsls	r2, r3, #1
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	441a      	add	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d916      	bls.n	8006a5c <UART_SetConfig+0x508>
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a34:	d212      	bcs.n	8006a5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f023 030f 	bic.w	r3, r3, #15
 8006a3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	8bfb      	ldrh	r3, [r7, #30]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	8bfa      	ldrh	r2, [r7, #30]
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	e062      	b.n	8006b22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a62:	e05e      	b.n	8006b22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d828      	bhi.n	8006abe <UART_SetConfig+0x56a>
 8006a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <UART_SetConfig+0x520>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa9 	.word	0x08006aa9
 8006a80:	08006abf 	.word	0x08006abf
 8006a84:	08006aaf 	.word	0x08006aaf
 8006a88:	08006abf 	.word	0x08006abf
 8006a8c:	08006abf 	.word	0x08006abf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006ab7 	.word	0x08006ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a98:	f7fe fc40 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 8006a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a9e:	e014      	b.n	8006aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa0:	f7fe fc52 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8006aa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aa6:	e010      	b.n	8006aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <UART_SetConfig+0x5c0>)
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006aac:	e00d      	b.n	8006aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fe fbc7 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 8006ab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d028      	beq.n	8006b22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad4:	4a10      	ldr	r2, [pc, #64]	@ (8006b18 <UART_SetConfig+0x5c4>)
 8006ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ada:	461a      	mov	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	441a      	add	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d910      	bls.n	8006b1c <UART_SetConfig+0x5c8>
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b00:	d20c      	bcs.n	8006b1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	e009      	b.n	8006b22 <UART_SetConfig+0x5ce>
 8006b0e:	bf00      	nop
 8006b10:	40008000 	.word	0x40008000
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	080081a8 	.word	0x080081a8
      }
      else
      {
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006b3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3730      	adds	r7, #48	@ 0x30
 8006b46:	46bd      	mov	sp, r7
 8006b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01a      	beq.n	8006c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c4a:	d10a      	bne.n	8006c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca0:	f7fb f8a4 	bl	8001dec <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d10e      	bne.n	8006cd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f82f 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e025      	b.n	8006d1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d10e      	bne.n	8006cfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f819 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e00f      	b.n	8006d1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b09c      	sub	sp, #112	@ 0x70
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d36:	e0a9      	b.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d3e:	f000 80a5 	beq.w	8006e8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fb f853 	bl	8001dec <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d140      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d78:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006daa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006dac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e069      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d051      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df6:	d149      	bne.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	613b      	str	r3, [r7, #16]
   return(result);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e54:	623a      	str	r2, [r7, #32]
 8006e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e010      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4013      	ands	r3, r2
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	f43f af46 	beq.w	8006d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3770      	adds	r7, #112	@ 0x70
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_UARTEx_DisableFifoMode+0x16>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e027      	b.n	8006f1c <HAL_UARTEx_DisableFifoMode+0x66>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2224      	movs	r2, #36	@ 0x24
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006efa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e02d      	b.n	8006f9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2224      	movs	r2, #36	@ 0x24
 8006f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f84f 	bl	8007020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e02d      	b.n	8007018 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	@ 0x24
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f811 	bl	8007020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007040:	e031      	b.n	80070a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007042:	2308      	movs	r3, #8
 8007044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007046:	2308      	movs	r3, #8
 8007048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	0e5b      	lsrs	r3, r3, #25
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	0f5b      	lsrs	r3, r3, #29
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	7b3a      	ldrb	r2, [r7, #12]
 800706e:	4911      	ldr	r1, [pc, #68]	@ (80070b4 <UARTEx_SetNbDataToProcess+0x94>)
 8007070:	5c8a      	ldrb	r2, [r1, r2]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007076:	7b3a      	ldrb	r2, [r7, #12]
 8007078:	490f      	ldr	r1, [pc, #60]	@ (80070b8 <UARTEx_SetNbDataToProcess+0x98>)
 800707a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800707c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	7b7a      	ldrb	r2, [r7, #13]
 800708c:	4909      	ldr	r1, [pc, #36]	@ (80070b4 <UARTEx_SetNbDataToProcess+0x94>)
 800708e:	5c8a      	ldrb	r2, [r1, r2]
 8007090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007094:	7b7a      	ldrb	r2, [r7, #13]
 8007096:	4908      	ldr	r1, [pc, #32]	@ (80070b8 <UARTEx_SetNbDataToProcess+0x98>)
 8007098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800709a:	fb93 f3f2 	sdiv	r3, r3, r2
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	080081c0 	.word	0x080081c0
 80070b8:	080081c8 	.word	0x080081c8

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <__libc_init_array>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007104 <__libc_init_array+0x38>)
 80070d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007108 <__libc_init_array+0x3c>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	2600      	movs	r6, #0
 80070d8:	42a6      	cmp	r6, r4
 80070da:	d109      	bne.n	80070f0 <__libc_init_array+0x24>
 80070dc:	4d0b      	ldr	r5, [pc, #44]	@ (800710c <__libc_init_array+0x40>)
 80070de:	4c0c      	ldr	r4, [pc, #48]	@ (8007110 <__libc_init_array+0x44>)
 80070e0:	f001 f84a 	bl	8008178 <_init>
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	2600      	movs	r6, #0
 80070ea:	42a6      	cmp	r6, r4
 80070ec:	d105      	bne.n	80070fa <__libc_init_array+0x2e>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f4:	4798      	blx	r3
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7ee      	b.n	80070d8 <__libc_init_array+0xc>
 80070fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fe:	4798      	blx	r3
 8007100:	3601      	adds	r6, #1
 8007102:	e7f2      	b.n	80070ea <__libc_init_array+0x1e>
 8007104:	080083b0 	.word	0x080083b0
 8007108:	080083b0 	.word	0x080083b0
 800710c:	080083b0 	.word	0x080083b0
 8007110:	080083b4 	.word	0x080083b4
 8007114:	00000000 	.word	0x00000000

08007118 <sin>:
 8007118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800711a:	ec53 2b10 	vmov	r2, r3, d0
 800711e:	4826      	ldr	r0, [pc, #152]	@ (80071b8 <sin+0xa0>)
 8007120:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007124:	4281      	cmp	r1, r0
 8007126:	d807      	bhi.n	8007138 <sin+0x20>
 8007128:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80071b0 <sin+0x98>
 800712c:	2000      	movs	r0, #0
 800712e:	b005      	add	sp, #20
 8007130:	f85d eb04 	ldr.w	lr, [sp], #4
 8007134:	f000 be60 	b.w	8007df8 <__kernel_sin>
 8007138:	4820      	ldr	r0, [pc, #128]	@ (80071bc <sin+0xa4>)
 800713a:	4281      	cmp	r1, r0
 800713c:	d908      	bls.n	8007150 <sin+0x38>
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	f7f9 f997 	bl	8000474 <__aeabi_dsub>
 8007146:	ec41 0b10 	vmov	d0, r0, r1
 800714a:	b005      	add	sp, #20
 800714c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007150:	4668      	mov	r0, sp
 8007152:	f000 f835 	bl	80071c0 <__ieee754_rem_pio2>
 8007156:	f000 0003 	and.w	r0, r0, #3
 800715a:	2801      	cmp	r0, #1
 800715c:	d00c      	beq.n	8007178 <sin+0x60>
 800715e:	2802      	cmp	r0, #2
 8007160:	d011      	beq.n	8007186 <sin+0x6e>
 8007162:	b9e8      	cbnz	r0, 80071a0 <sin+0x88>
 8007164:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007168:	ed9d 0b00 	vldr	d0, [sp]
 800716c:	2001      	movs	r0, #1
 800716e:	f000 fe43 	bl	8007df8 <__kernel_sin>
 8007172:	ec51 0b10 	vmov	r0, r1, d0
 8007176:	e7e6      	b.n	8007146 <sin+0x2e>
 8007178:	ed9d 1b02 	vldr	d1, [sp, #8]
 800717c:	ed9d 0b00 	vldr	d0, [sp]
 8007180:	f000 fd72 	bl	8007c68 <__kernel_cos>
 8007184:	e7f5      	b.n	8007172 <sin+0x5a>
 8007186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800718a:	ed9d 0b00 	vldr	d0, [sp]
 800718e:	2001      	movs	r0, #1
 8007190:	f000 fe32 	bl	8007df8 <__kernel_sin>
 8007194:	ec53 2b10 	vmov	r2, r3, d0
 8007198:	4610      	mov	r0, r2
 800719a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800719e:	e7d2      	b.n	8007146 <sin+0x2e>
 80071a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071a4:	ed9d 0b00 	vldr	d0, [sp]
 80071a8:	f000 fd5e 	bl	8007c68 <__kernel_cos>
 80071ac:	e7f2      	b.n	8007194 <sin+0x7c>
 80071ae:	bf00      	nop
	...
 80071b8:	3fe921fb 	.word	0x3fe921fb
 80071bc:	7fefffff 	.word	0x7fefffff

080071c0 <__ieee754_rem_pio2>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ec57 6b10 	vmov	r6, r7, d0
 80071c8:	4bc5      	ldr	r3, [pc, #788]	@ (80074e0 <__ieee754_rem_pio2+0x320>)
 80071ca:	b08d      	sub	sp, #52	@ 0x34
 80071cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80071d0:	4598      	cmp	r8, r3
 80071d2:	4604      	mov	r4, r0
 80071d4:	9704      	str	r7, [sp, #16]
 80071d6:	d807      	bhi.n	80071e8 <__ieee754_rem_pio2+0x28>
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	ed80 0b00 	vstr	d0, [r0]
 80071e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80071e4:	2500      	movs	r5, #0
 80071e6:	e028      	b.n	800723a <__ieee754_rem_pio2+0x7a>
 80071e8:	4bbe      	ldr	r3, [pc, #760]	@ (80074e4 <__ieee754_rem_pio2+0x324>)
 80071ea:	4598      	cmp	r8, r3
 80071ec:	d878      	bhi.n	80072e0 <__ieee754_rem_pio2+0x120>
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	4dbd      	ldr	r5, [pc, #756]	@ (80074e8 <__ieee754_rem_pio2+0x328>)
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	4630      	mov	r0, r6
 80071f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	4639      	mov	r1, r7
 80071fe:	dd38      	ble.n	8007272 <__ieee754_rem_pio2+0xb2>
 8007200:	f7f9 f938 	bl	8000474 <__aeabi_dsub>
 8007204:	45a8      	cmp	r8, r5
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	d01a      	beq.n	8007242 <__ieee754_rem_pio2+0x82>
 800720c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f92f 	bl	8000474 <__aeabi_dsub>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4680      	mov	r8, r0
 800721c:	4689      	mov	r9, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f927 	bl	8000474 <__aeabi_dsub>
 8007226:	a3a2      	add	r3, pc, #648	@ (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f922 	bl	8000474 <__aeabi_dsub>
 8007230:	e9c4 8900 	strd	r8, r9, [r4]
 8007234:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007238:	2501      	movs	r5, #1
 800723a:	4628      	mov	r0, r5
 800723c:	b00d      	add	sp, #52	@ 0x34
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	a39d      	add	r3, pc, #628	@ (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f914 	bl	8000474 <__aeabi_dsub>
 800724c:	a39c      	add	r3, pc, #624	@ (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	f7f9 f90d 	bl	8000474 <__aeabi_dsub>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4680      	mov	r8, r0
 8007260:	4689      	mov	r9, r1
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f9 f905 	bl	8000474 <__aeabi_dsub>
 800726a:	a395      	add	r3, pc, #596	@ (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	e7dc      	b.n	800722c <__ieee754_rem_pio2+0x6c>
 8007272:	f7f9 f901 	bl	8000478 <__adddf3>
 8007276:	45a8      	cmp	r8, r5
 8007278:	4606      	mov	r6, r0
 800727a:	460f      	mov	r7, r1
 800727c:	d018      	beq.n	80072b0 <__ieee754_rem_pio2+0xf0>
 800727e:	a38c      	add	r3, pc, #560	@ (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f9 f8f8 	bl	8000478 <__adddf3>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 f8ee 	bl	8000474 <__aeabi_dsub>
 8007298:	a385      	add	r3, pc, #532	@ (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 f8eb 	bl	8000478 <__adddf3>
 80072a2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80072a6:	e9c4 8900 	strd	r8, r9, [r4]
 80072aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072ae:	e7c4      	b.n	800723a <__ieee754_rem_pio2+0x7a>
 80072b0:	a381      	add	r3, pc, #516	@ (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f8df 	bl	8000478 <__adddf3>
 80072ba:	a381      	add	r3, pc, #516	@ (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	f7f9 f8d8 	bl	8000478 <__adddf3>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 f8ce 	bl	8000474 <__aeabi_dsub>
 80072d8:	a379      	add	r3, pc, #484	@ (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	e7de      	b.n	800729e <__ieee754_rem_pio2+0xde>
 80072e0:	4b82      	ldr	r3, [pc, #520]	@ (80074ec <__ieee754_rem_pio2+0x32c>)
 80072e2:	4598      	cmp	r8, r3
 80072e4:	f200 80d1 	bhi.w	800748a <__ieee754_rem_pio2+0x2ca>
 80072e8:	f000 fe40 	bl	8007f6c <fabs>
 80072ec:	ec57 6b10 	vmov	r6, r7, d0
 80072f0:	a375      	add	r3, pc, #468	@ (adr r3, 80074c8 <__ieee754_rem_pio2+0x308>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f8 ff8d 	bl	8000218 <__aeabi_dmul>
 80072fe:	4b7c      	ldr	r3, [pc, #496]	@ (80074f0 <__ieee754_rem_pio2+0x330>)
 8007300:	2200      	movs	r2, #0
 8007302:	f7f9 f8b9 	bl	8000478 <__adddf3>
 8007306:	f7f9 faf5 	bl	80008f4 <__aeabi_d2iz>
 800730a:	4605      	mov	r5, r0
 800730c:	f7f9 fa00 	bl	8000710 <__aeabi_i2d>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007318:	a363      	add	r3, pc, #396	@ (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f7f8 ff7b 	bl	8000218 <__aeabi_dmul>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f9 f8a3 	bl	8000474 <__aeabi_dsub>
 800732e:	a360      	add	r3, pc, #384	@ (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	4682      	mov	sl, r0
 8007336:	468b      	mov	fp, r1
 8007338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733c:	f7f8 ff6c 	bl	8000218 <__aeabi_dmul>
 8007340:	2d1f      	cmp	r5, #31
 8007342:	4606      	mov	r6, r0
 8007344:	460f      	mov	r7, r1
 8007346:	dc0c      	bgt.n	8007362 <__ieee754_rem_pio2+0x1a2>
 8007348:	4b6a      	ldr	r3, [pc, #424]	@ (80074f4 <__ieee754_rem_pio2+0x334>)
 800734a:	1e6a      	subs	r2, r5, #1
 800734c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007350:	4543      	cmp	r3, r8
 8007352:	d006      	beq.n	8007362 <__ieee754_rem_pio2+0x1a2>
 8007354:	4632      	mov	r2, r6
 8007356:	463b      	mov	r3, r7
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	f7f9 f88a 	bl	8000474 <__aeabi_dsub>
 8007360:	e00e      	b.n	8007380 <__ieee754_rem_pio2+0x1c0>
 8007362:	463b      	mov	r3, r7
 8007364:	4632      	mov	r2, r6
 8007366:	4650      	mov	r0, sl
 8007368:	4659      	mov	r1, fp
 800736a:	f7f9 f883 	bl	8000474 <__aeabi_dsub>
 800736e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007378:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800737c:	2b10      	cmp	r3, #16
 800737e:	dc02      	bgt.n	8007386 <__ieee754_rem_pio2+0x1c6>
 8007380:	e9c4 0100 	strd	r0, r1, [r4]
 8007384:	e039      	b.n	80073fa <__ieee754_rem_pio2+0x23a>
 8007386:	a34c      	add	r3, pc, #304	@ (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007390:	f7f8 ff42 	bl	8000218 <__aeabi_dmul>
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4650      	mov	r0, sl
 800739e:	4659      	mov	r1, fp
 80073a0:	f7f9 f868 	bl	8000474 <__aeabi_dsub>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4680      	mov	r8, r0
 80073aa:	4689      	mov	r9, r1
 80073ac:	4650      	mov	r0, sl
 80073ae:	4659      	mov	r1, fp
 80073b0:	f7f9 f860 	bl	8000474 <__aeabi_dsub>
 80073b4:	4632      	mov	r2, r6
 80073b6:	463b      	mov	r3, r7
 80073b8:	f7f9 f85c 	bl	8000474 <__aeabi_dsub>
 80073bc:	a340      	add	r3, pc, #256	@ (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	4606      	mov	r6, r0
 80073c4:	460f      	mov	r7, r1
 80073c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ca:	f7f8 ff25 	bl	8000218 <__aeabi_dmul>
 80073ce:	4632      	mov	r2, r6
 80073d0:	463b      	mov	r3, r7
 80073d2:	f7f9 f84f 	bl	8000474 <__aeabi_dsub>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 f847 	bl	8000474 <__aeabi_dsub>
 80073e6:	9a05      	ldr	r2, [sp, #20]
 80073e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b31      	cmp	r3, #49	@ 0x31
 80073f0:	dc20      	bgt.n	8007434 <__ieee754_rem_pio2+0x274>
 80073f2:	e9c4 0100 	strd	r0, r1, [r4]
 80073f6:	46c2      	mov	sl, r8
 80073f8:	46cb      	mov	fp, r9
 80073fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80073fe:	4650      	mov	r0, sl
 8007400:	4642      	mov	r2, r8
 8007402:	464b      	mov	r3, r9
 8007404:	4659      	mov	r1, fp
 8007406:	f7f9 f835 	bl	8000474 <__aeabi_dsub>
 800740a:	463b      	mov	r3, r7
 800740c:	4632      	mov	r2, r6
 800740e:	f7f9 f831 	bl	8000474 <__aeabi_dsub>
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800741a:	f6bf af0e 	bge.w	800723a <__ieee754_rem_pio2+0x7a>
 800741e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007428:	f8c4 8000 	str.w	r8, [r4]
 800742c:	60a0      	str	r0, [r4, #8]
 800742e:	60e3      	str	r3, [r4, #12]
 8007430:	426d      	negs	r5, r5
 8007432:	e702      	b.n	800723a <__ieee754_rem_pio2+0x7a>
 8007434:	a326      	add	r3, pc, #152	@ (adr r3, 80074d0 <__ieee754_rem_pio2+0x310>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743e:	f7f8 feeb 	bl	8000218 <__aeabi_dmul>
 8007442:	4606      	mov	r6, r0
 8007444:	460f      	mov	r7, r1
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4640      	mov	r0, r8
 800744c:	4649      	mov	r1, r9
 800744e:	f7f9 f811 	bl	8000474 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4682      	mov	sl, r0
 8007458:	468b      	mov	fp, r1
 800745a:	4640      	mov	r0, r8
 800745c:	4649      	mov	r1, r9
 800745e:	f7f9 f809 	bl	8000474 <__aeabi_dsub>
 8007462:	4632      	mov	r2, r6
 8007464:	463b      	mov	r3, r7
 8007466:	f7f9 f805 	bl	8000474 <__aeabi_dsub>
 800746a:	a31b      	add	r3, pc, #108	@ (adr r3, 80074d8 <__ieee754_rem_pio2+0x318>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007478:	f7f8 fece 	bl	8000218 <__aeabi_dmul>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f8 fff8 	bl	8000474 <__aeabi_dsub>
 8007484:	4606      	mov	r6, r0
 8007486:	460f      	mov	r7, r1
 8007488:	e764      	b.n	8007354 <__ieee754_rem_pio2+0x194>
 800748a:	4b1b      	ldr	r3, [pc, #108]	@ (80074f8 <__ieee754_rem_pio2+0x338>)
 800748c:	4598      	cmp	r8, r3
 800748e:	d935      	bls.n	80074fc <__ieee754_rem_pio2+0x33c>
 8007490:	4632      	mov	r2, r6
 8007492:	463b      	mov	r3, r7
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f8 ffec 	bl	8000474 <__aeabi_dsub>
 800749c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074a0:	e9c4 0100 	strd	r0, r1, [r4]
 80074a4:	e69e      	b.n	80071e4 <__ieee754_rem_pio2+0x24>
 80074a6:	bf00      	nop
 80074a8:	54400000 	.word	0x54400000
 80074ac:	3ff921fb 	.word	0x3ff921fb
 80074b0:	1a626331 	.word	0x1a626331
 80074b4:	3dd0b461 	.word	0x3dd0b461
 80074b8:	1a600000 	.word	0x1a600000
 80074bc:	3dd0b461 	.word	0x3dd0b461
 80074c0:	2e037073 	.word	0x2e037073
 80074c4:	3ba3198a 	.word	0x3ba3198a
 80074c8:	6dc9c883 	.word	0x6dc9c883
 80074cc:	3fe45f30 	.word	0x3fe45f30
 80074d0:	2e000000 	.word	0x2e000000
 80074d4:	3ba3198a 	.word	0x3ba3198a
 80074d8:	252049c1 	.word	0x252049c1
 80074dc:	397b839a 	.word	0x397b839a
 80074e0:	3fe921fb 	.word	0x3fe921fb
 80074e4:	4002d97b 	.word	0x4002d97b
 80074e8:	3ff921fb 	.word	0x3ff921fb
 80074ec:	413921fb 	.word	0x413921fb
 80074f0:	3fe00000 	.word	0x3fe00000
 80074f4:	080081d0 	.word	0x080081d0
 80074f8:	7fefffff 	.word	0x7fefffff
 80074fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007500:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007504:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007508:	4630      	mov	r0, r6
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 f9f2 	bl	80008f4 <__aeabi_d2iz>
 8007510:	f7f9 f8fe 	bl	8000710 <__aeabi_i2d>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007520:	f7f8 ffa8 	bl	8000474 <__aeabi_dsub>
 8007524:	4b22      	ldr	r3, [pc, #136]	@ (80075b0 <__ieee754_rem_pio2+0x3f0>)
 8007526:	2200      	movs	r2, #0
 8007528:	f7f8 fe76 	bl	8000218 <__aeabi_dmul>
 800752c:	460f      	mov	r7, r1
 800752e:	4606      	mov	r6, r0
 8007530:	f7f9 f9e0 	bl	80008f4 <__aeabi_d2iz>
 8007534:	f7f9 f8ec 	bl	8000710 <__aeabi_i2d>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007544:	f7f8 ff96 	bl	8000474 <__aeabi_dsub>
 8007548:	4b19      	ldr	r3, [pc, #100]	@ (80075b0 <__ieee754_rem_pio2+0x3f0>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f8 fe64 	bl	8000218 <__aeabi_dmul>
 8007550:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007554:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007558:	f04f 0803 	mov.w	r8, #3
 800755c:	2600      	movs	r6, #0
 800755e:	2700      	movs	r7, #0
 8007560:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007564:	4632      	mov	r2, r6
 8007566:	463b      	mov	r3, r7
 8007568:	46c2      	mov	sl, r8
 800756a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800756e:	f7f9 f98f 	bl	8000890 <__aeabi_dcmpeq>
 8007572:	2800      	cmp	r0, #0
 8007574:	d1f4      	bne.n	8007560 <__ieee754_rem_pio2+0x3a0>
 8007576:	4b0f      	ldr	r3, [pc, #60]	@ (80075b4 <__ieee754_rem_pio2+0x3f4>)
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	2302      	movs	r3, #2
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	462a      	mov	r2, r5
 8007580:	4653      	mov	r3, sl
 8007582:	4621      	mov	r1, r4
 8007584:	a806      	add	r0, sp, #24
 8007586:	f000 f817 	bl	80075b8 <__kernel_rem_pio2>
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	4605      	mov	r5, r0
 8007590:	f6bf ae53 	bge.w	800723a <__ieee754_rem_pio2+0x7a>
 8007594:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007598:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800759c:	e9c4 2300 	strd	r2, r3, [r4]
 80075a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80075a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80075a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80075ac:	e740      	b.n	8007430 <__ieee754_rem_pio2+0x270>
 80075ae:	bf00      	nop
 80075b0:	41700000 	.word	0x41700000
 80075b4:	08008250 	.word	0x08008250

080075b8 <__kernel_rem_pio2>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ed2d 8b02 	vpush	{d8}
 80075c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80075c4:	f112 0f14 	cmn.w	r2, #20
 80075c8:	9306      	str	r3, [sp, #24]
 80075ca:	9104      	str	r1, [sp, #16]
 80075cc:	4bbe      	ldr	r3, [pc, #760]	@ (80078c8 <__kernel_rem_pio2+0x310>)
 80075ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80075d0:	9008      	str	r0, [sp, #32]
 80075d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075de:	bfa8      	it	ge
 80075e0:	1ed4      	subge	r4, r2, #3
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	bfb2      	itee	lt
 80075e6:	2400      	movlt	r4, #0
 80075e8:	2318      	movge	r3, #24
 80075ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80075ee:	f06f 0317 	mvn.w	r3, #23
 80075f2:	fb04 3303 	mla	r3, r4, r3, r3
 80075f6:	eb03 0b02 	add.w	fp, r3, r2
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	9a05      	ldr	r2, [sp, #20]
 80075fe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80078b8 <__kernel_rem_pio2+0x300>
 8007602:	eb03 0802 	add.w	r8, r3, r2
 8007606:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007608:	1aa7      	subs	r7, r4, r2
 800760a:	ae20      	add	r6, sp, #128	@ 0x80
 800760c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007610:	2500      	movs	r5, #0
 8007612:	4545      	cmp	r5, r8
 8007614:	dd13      	ble.n	800763e <__kernel_rem_pio2+0x86>
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	aa20      	add	r2, sp, #128	@ 0x80
 800761a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800761e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	4598      	cmp	r8, r3
 800762a:	dc31      	bgt.n	8007690 <__kernel_rem_pio2+0xd8>
 800762c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80078b8 <__kernel_rem_pio2+0x300>
 8007630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007634:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007638:	462f      	mov	r7, r5
 800763a:	2600      	movs	r6, #0
 800763c:	e01b      	b.n	8007676 <__kernel_rem_pio2+0xbe>
 800763e:	42ef      	cmn	r7, r5
 8007640:	d407      	bmi.n	8007652 <__kernel_rem_pio2+0x9a>
 8007642:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007646:	f7f9 f863 	bl	8000710 <__aeabi_i2d>
 800764a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800764e:	3501      	adds	r5, #1
 8007650:	e7df      	b.n	8007612 <__kernel_rem_pio2+0x5a>
 8007652:	ec51 0b18 	vmov	r0, r1, d8
 8007656:	e7f8      	b.n	800764a <__kernel_rem_pio2+0x92>
 8007658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007660:	f7f8 fdda 	bl	8000218 <__aeabi_dmul>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766c:	f7f8 ff04 	bl	8000478 <__adddf3>
 8007670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007674:	3601      	adds	r6, #1
 8007676:	9b05      	ldr	r3, [sp, #20]
 8007678:	429e      	cmp	r6, r3
 800767a:	f1a7 0708 	sub.w	r7, r7, #8
 800767e:	ddeb      	ble.n	8007658 <__kernel_rem_pio2+0xa0>
 8007680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007684:	f108 0801 	add.w	r8, r8, #1
 8007688:	ecaa 7b02 	vstmia	sl!, {d7}
 800768c:	3508      	adds	r5, #8
 800768e:	e7ca      	b.n	8007626 <__kernel_rem_pio2+0x6e>
 8007690:	9b00      	ldr	r3, [sp, #0]
 8007692:	f8dd 8000 	ldr.w	r8, [sp]
 8007696:	aa0c      	add	r2, sp, #48	@ 0x30
 8007698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800769c:	930a      	str	r3, [sp, #40]	@ 0x28
 800769e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80076a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80076a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80076aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ac:	ab98      	add	r3, sp, #608	@ 0x260
 80076ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80076b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80076bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80076be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80076c2:	46a1      	mov	r9, r4
 80076c4:	46c2      	mov	sl, r8
 80076c6:	f1ba 0f00 	cmp.w	sl, #0
 80076ca:	f1a5 0508 	sub.w	r5, r5, #8
 80076ce:	dc77      	bgt.n	80077c0 <__kernel_rem_pio2+0x208>
 80076d0:	4658      	mov	r0, fp
 80076d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80076d6:	f000 fc53 	bl	8007f80 <scalbn>
 80076da:	ec57 6b10 	vmov	r6, r7, d0
 80076de:	2200      	movs	r2, #0
 80076e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f8 fd96 	bl	8000218 <__aeabi_dmul>
 80076ec:	ec41 0b10 	vmov	d0, r0, r1
 80076f0:	f000 fcc6 	bl	8008080 <floor>
 80076f4:	4b75      	ldr	r3, [pc, #468]	@ (80078cc <__kernel_rem_pio2+0x314>)
 80076f6:	ec51 0b10 	vmov	r0, r1, d0
 80076fa:	2200      	movs	r2, #0
 80076fc:	f7f8 fd8c 	bl	8000218 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f8 feb4 	bl	8000474 <__aeabi_dsub>
 800770c:	460f      	mov	r7, r1
 800770e:	4606      	mov	r6, r0
 8007710:	f7f9 f8f0 	bl	80008f4 <__aeabi_d2iz>
 8007714:	9002      	str	r0, [sp, #8]
 8007716:	f7f8 fffb 	bl	8000710 <__aeabi_i2d>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f8 fea7 	bl	8000474 <__aeabi_dsub>
 8007726:	f1bb 0f00 	cmp.w	fp, #0
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	dd6c      	ble.n	800780a <__kernel_rem_pio2+0x252>
 8007730:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007734:	ab0c      	add	r3, sp, #48	@ 0x30
 8007736:	9d02      	ldr	r5, [sp, #8]
 8007738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800773c:	f1cb 0018 	rsb	r0, fp, #24
 8007740:	fa43 f200 	asr.w	r2, r3, r0
 8007744:	4415      	add	r5, r2
 8007746:	4082      	lsls	r2, r0
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	aa0c      	add	r2, sp, #48	@ 0x30
 800774c:	9502      	str	r5, [sp, #8]
 800774e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007752:	f1cb 0217 	rsb	r2, fp, #23
 8007756:	fa43 f902 	asr.w	r9, r3, r2
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	dd64      	ble.n	800782a <__kernel_rem_pio2+0x272>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	3301      	adds	r3, #1
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	4615      	mov	r5, r2
 800776a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800776e:	4590      	cmp	r8, r2
 8007770:	f300 80b8 	bgt.w	80078e4 <__kernel_rem_pio2+0x32c>
 8007774:	f1bb 0f00 	cmp.w	fp, #0
 8007778:	dd07      	ble.n	800778a <__kernel_rem_pio2+0x1d2>
 800777a:	f1bb 0f01 	cmp.w	fp, #1
 800777e:	f000 80bf 	beq.w	8007900 <__kernel_rem_pio2+0x348>
 8007782:	f1bb 0f02 	cmp.w	fp, #2
 8007786:	f000 80c6 	beq.w	8007916 <__kernel_rem_pio2+0x35e>
 800778a:	f1b9 0f02 	cmp.w	r9, #2
 800778e:	d14c      	bne.n	800782a <__kernel_rem_pio2+0x272>
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	494e      	ldr	r1, [pc, #312]	@ (80078d0 <__kernel_rem_pio2+0x318>)
 8007796:	2000      	movs	r0, #0
 8007798:	f7f8 fe6c 	bl	8000474 <__aeabi_dsub>
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	d042      	beq.n	800782a <__kernel_rem_pio2+0x272>
 80077a4:	4658      	mov	r0, fp
 80077a6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80078c0 <__kernel_rem_pio2+0x308>
 80077aa:	f000 fbe9 	bl	8007f80 <scalbn>
 80077ae:	4630      	mov	r0, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	ec53 2b10 	vmov	r2, r3, d0
 80077b6:	f7f8 fe5d 	bl	8000474 <__aeabi_dsub>
 80077ba:	4606      	mov	r6, r0
 80077bc:	460f      	mov	r7, r1
 80077be:	e034      	b.n	800782a <__kernel_rem_pio2+0x272>
 80077c0:	4b44      	ldr	r3, [pc, #272]	@ (80078d4 <__kernel_rem_pio2+0x31c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	f7f8 fd26 	bl	8000218 <__aeabi_dmul>
 80077cc:	f7f9 f892 	bl	80008f4 <__aeabi_d2iz>
 80077d0:	f7f8 ff9e 	bl	8000710 <__aeabi_i2d>
 80077d4:	4b40      	ldr	r3, [pc, #256]	@ (80078d8 <__kernel_rem_pio2+0x320>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	4606      	mov	r6, r0
 80077da:	460f      	mov	r7, r1
 80077dc:	f7f8 fd1c 	bl	8000218 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e8:	f7f8 fe44 	bl	8000474 <__aeabi_dsub>
 80077ec:	f7f9 f882 	bl	80008f4 <__aeabi_d2iz>
 80077f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077f4:	f849 0b04 	str.w	r0, [r9], #4
 80077f8:	4639      	mov	r1, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	f7f8 fe3c 	bl	8000478 <__adddf3>
 8007800:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007808:	e75d      	b.n	80076c6 <__kernel_rem_pio2+0x10e>
 800780a:	d107      	bne.n	800781c <__kernel_rem_pio2+0x264>
 800780c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007810:	aa0c      	add	r2, sp, #48	@ 0x30
 8007812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007816:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800781a:	e79e      	b.n	800775a <__kernel_rem_pio2+0x1a2>
 800781c:	4b2f      	ldr	r3, [pc, #188]	@ (80078dc <__kernel_rem_pio2+0x324>)
 800781e:	2200      	movs	r2, #0
 8007820:	f7f9 f854 	bl	80008cc <__aeabi_dcmpge>
 8007824:	2800      	cmp	r0, #0
 8007826:	d143      	bne.n	80078b0 <__kernel_rem_pio2+0x2f8>
 8007828:	4681      	mov	r9, r0
 800782a:	2200      	movs	r2, #0
 800782c:	2300      	movs	r3, #0
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	f7f9 f82d 	bl	8000890 <__aeabi_dcmpeq>
 8007836:	2800      	cmp	r0, #0
 8007838:	f000 80bf 	beq.w	80079ba <__kernel_rem_pio2+0x402>
 800783c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007840:	2200      	movs	r2, #0
 8007842:	9900      	ldr	r1, [sp, #0]
 8007844:	428b      	cmp	r3, r1
 8007846:	da6e      	bge.n	8007926 <__kernel_rem_pio2+0x36e>
 8007848:	2a00      	cmp	r2, #0
 800784a:	f000 8089 	beq.w	8007960 <__kernel_rem_pio2+0x3a8>
 800784e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007852:	ab0c      	add	r3, sp, #48	@ 0x30
 8007854:	f1ab 0b18 	sub.w	fp, fp, #24
 8007858:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f6      	beq.n	800784e <__kernel_rem_pio2+0x296>
 8007860:	4658      	mov	r0, fp
 8007862:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80078c0 <__kernel_rem_pio2+0x308>
 8007866:	f000 fb8b 	bl	8007f80 <scalbn>
 800786a:	f108 0301 	add.w	r3, r8, #1
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	9205      	str	r2, [sp, #20]
 8007872:	ec55 4b10 	vmov	r4, r5, d0
 8007876:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007878:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80078d4 <__kernel_rem_pio2+0x31c>
 800787c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007880:	4646      	mov	r6, r8
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	2e00      	cmp	r6, #0
 8007888:	f280 80cf 	bge.w	8007a2a <__kernel_rem_pio2+0x472>
 800788c:	4644      	mov	r4, r8
 800788e:	2c00      	cmp	r4, #0
 8007890:	f2c0 80fd 	blt.w	8007a8e <__kernel_rem_pio2+0x4d6>
 8007894:	4b12      	ldr	r3, [pc, #72]	@ (80078e0 <__kernel_rem_pio2+0x328>)
 8007896:	461f      	mov	r7, r3
 8007898:	ab70      	add	r3, sp, #448	@ 0x1c0
 800789a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800789e:	9306      	str	r3, [sp, #24]
 80078a0:	f04f 0a00 	mov.w	sl, #0
 80078a4:	f04f 0b00 	mov.w	fp, #0
 80078a8:	2600      	movs	r6, #0
 80078aa:	eba8 0504 	sub.w	r5, r8, r4
 80078ae:	e0e2      	b.n	8007a76 <__kernel_rem_pio2+0x4be>
 80078b0:	f04f 0902 	mov.w	r9, #2
 80078b4:	e754      	b.n	8007760 <__kernel_rem_pio2+0x1a8>
 80078b6:	bf00      	nop
	...
 80078c4:	3ff00000 	.word	0x3ff00000
 80078c8:	08008398 	.word	0x08008398
 80078cc:	40200000 	.word	0x40200000
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	3e700000 	.word	0x3e700000
 80078d8:	41700000 	.word	0x41700000
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	08008358 	.word	0x08008358
 80078e4:	f854 3b04 	ldr.w	r3, [r4], #4
 80078e8:	b945      	cbnz	r5, 80078fc <__kernel_rem_pio2+0x344>
 80078ea:	b123      	cbz	r3, 80078f6 <__kernel_rem_pio2+0x33e>
 80078ec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80078f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80078f4:	2301      	movs	r3, #1
 80078f6:	3201      	adds	r2, #1
 80078f8:	461d      	mov	r5, r3
 80078fa:	e738      	b.n	800776e <__kernel_rem_pio2+0x1b6>
 80078fc:	1acb      	subs	r3, r1, r3
 80078fe:	e7f7      	b.n	80078f0 <__kernel_rem_pio2+0x338>
 8007900:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007904:	ab0c      	add	r3, sp, #48	@ 0x30
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800790e:	a90c      	add	r1, sp, #48	@ 0x30
 8007910:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007914:	e739      	b.n	800778a <__kernel_rem_pio2+0x1d2>
 8007916:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800791a:	ab0c      	add	r3, sp, #48	@ 0x30
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007924:	e7f3      	b.n	800790e <__kernel_rem_pio2+0x356>
 8007926:	a90c      	add	r1, sp, #48	@ 0x30
 8007928:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800792c:	3b01      	subs	r3, #1
 800792e:	430a      	orrs	r2, r1
 8007930:	e787      	b.n	8007842 <__kernel_rem_pio2+0x28a>
 8007932:	3401      	adds	r4, #1
 8007934:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007938:	2a00      	cmp	r2, #0
 800793a:	d0fa      	beq.n	8007932 <__kernel_rem_pio2+0x37a>
 800793c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800793e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007942:	eb0d 0503 	add.w	r5, sp, r3
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	aa20      	add	r2, sp, #128	@ 0x80
 800794a:	4443      	add	r3, r8
 800794c:	f108 0701 	add.w	r7, r8, #1
 8007950:	3d98      	subs	r5, #152	@ 0x98
 8007952:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007956:	4444      	add	r4, r8
 8007958:	42bc      	cmp	r4, r7
 800795a:	da04      	bge.n	8007966 <__kernel_rem_pio2+0x3ae>
 800795c:	46a0      	mov	r8, r4
 800795e:	e6a2      	b.n	80076a6 <__kernel_rem_pio2+0xee>
 8007960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007962:	2401      	movs	r4, #1
 8007964:	e7e6      	b.n	8007934 <__kernel_rem_pio2+0x37c>
 8007966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007968:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800796c:	f7f8 fed0 	bl	8000710 <__aeabi_i2d>
 8007970:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007c38 <__kernel_rem_pio2+0x680>
 8007974:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800797c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007980:	46b2      	mov	sl, r6
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	4598      	cmp	r8, r3
 800798a:	dd05      	ble.n	8007998 <__kernel_rem_pio2+0x3e0>
 800798c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007990:	3701      	adds	r7, #1
 8007992:	eca5 7b02 	vstmia	r5!, {d7}
 8007996:	e7df      	b.n	8007958 <__kernel_rem_pio2+0x3a0>
 8007998:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800799c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80079a0:	f7f8 fc3a 	bl	8000218 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ac:	f7f8 fd64 	bl	8000478 <__adddf3>
 80079b0:	f108 0801 	add.w	r8, r8, #1
 80079b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b8:	e7e5      	b.n	8007986 <__kernel_rem_pio2+0x3ce>
 80079ba:	f1cb 0000 	rsb	r0, fp, #0
 80079be:	ec47 6b10 	vmov	d0, r6, r7
 80079c2:	f000 fadd 	bl	8007f80 <scalbn>
 80079c6:	ec55 4b10 	vmov	r4, r5, d0
 80079ca:	4b9d      	ldr	r3, [pc, #628]	@ (8007c40 <__kernel_rem_pio2+0x688>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 ff7b 	bl	80008cc <__aeabi_dcmpge>
 80079d6:	b300      	cbz	r0, 8007a1a <__kernel_rem_pio2+0x462>
 80079d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007c44 <__kernel_rem_pio2+0x68c>)
 80079da:	2200      	movs	r2, #0
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 fc1a 	bl	8000218 <__aeabi_dmul>
 80079e4:	f7f8 ff86 	bl	80008f4 <__aeabi_d2iz>
 80079e8:	4606      	mov	r6, r0
 80079ea:	f7f8 fe91 	bl	8000710 <__aeabi_i2d>
 80079ee:	4b94      	ldr	r3, [pc, #592]	@ (8007c40 <__kernel_rem_pio2+0x688>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	f7f8 fc11 	bl	8000218 <__aeabi_dmul>
 80079f6:	460b      	mov	r3, r1
 80079f8:	4602      	mov	r2, r0
 80079fa:	4629      	mov	r1, r5
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7f8 fd39 	bl	8000474 <__aeabi_dsub>
 8007a02:	f7f8 ff77 	bl	80008f4 <__aeabi_d2iz>
 8007a06:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a08:	f10b 0b18 	add.w	fp, fp, #24
 8007a0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007a10:	f108 0801 	add.w	r8, r8, #1
 8007a14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007a18:	e722      	b.n	8007860 <__kernel_rem_pio2+0x2a8>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 ff69 	bl	80008f4 <__aeabi_d2iz>
 8007a22:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007a28:	e71a      	b.n	8007860 <__kernel_rem_pio2+0x2a8>
 8007a2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a30:	f7f8 fe6e 	bl	8000710 <__aeabi_i2d>
 8007a34:	4622      	mov	r2, r4
 8007a36:	462b      	mov	r3, r5
 8007a38:	f7f8 fbee 	bl	8000218 <__aeabi_dmul>
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007a42:	465b      	mov	r3, fp
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f8 fbe6 	bl	8000218 <__aeabi_dmul>
 8007a4c:	3e01      	subs	r6, #1
 8007a4e:	4604      	mov	r4, r0
 8007a50:	460d      	mov	r5, r1
 8007a52:	e718      	b.n	8007886 <__kernel_rem_pio2+0x2ce>
 8007a54:	9906      	ldr	r1, [sp, #24]
 8007a56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007a5a:	9106      	str	r1, [sp, #24]
 8007a5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007a60:	f7f8 fbda 	bl	8000218 <__aeabi_dmul>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	f7f8 fd04 	bl	8000478 <__adddf3>
 8007a70:	3601      	adds	r6, #1
 8007a72:	4682      	mov	sl, r0
 8007a74:	468b      	mov	fp, r1
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	429e      	cmp	r6, r3
 8007a7a:	dc01      	bgt.n	8007a80 <__kernel_rem_pio2+0x4c8>
 8007a7c:	42b5      	cmp	r5, r6
 8007a7e:	dae9      	bge.n	8007a54 <__kernel_rem_pio2+0x49c>
 8007a80:	ab48      	add	r3, sp, #288	@ 0x120
 8007a82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a86:	e9c5 ab00 	strd	sl, fp, [r5]
 8007a8a:	3c01      	subs	r4, #1
 8007a8c:	e6ff      	b.n	800788e <__kernel_rem_pio2+0x2d6>
 8007a8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	dc0b      	bgt.n	8007aac <__kernel_rem_pio2+0x4f4>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dc39      	bgt.n	8007b0c <__kernel_rem_pio2+0x554>
 8007a98:	d05d      	beq.n	8007b56 <__kernel_rem_pio2+0x59e>
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	f003 0007 	and.w	r0, r3, #7
 8007aa0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007aa4:	ecbd 8b02 	vpop	{d8}
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d1f3      	bne.n	8007a9a <__kernel_rem_pio2+0x4e2>
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007ab8:	eb0d 0403 	add.w	r4, sp, r3
 8007abc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007ac0:	4625      	mov	r5, r4
 8007ac2:	46c2      	mov	sl, r8
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	f1a5 0508 	sub.w	r5, r5, #8
 8007acc:	dc6b      	bgt.n	8007ba6 <__kernel_rem_pio2+0x5ee>
 8007ace:	4645      	mov	r5, r8
 8007ad0:	2d01      	cmp	r5, #1
 8007ad2:	f1a4 0408 	sub.w	r4, r4, #8
 8007ad6:	f300 8087 	bgt.w	8007be8 <__kernel_rem_pio2+0x630>
 8007ada:	9c05      	ldr	r4, [sp, #20]
 8007adc:	ab48      	add	r3, sp, #288	@ 0x120
 8007ade:	441c      	add	r4, r3
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f1b8 0f01 	cmp.w	r8, #1
 8007ae8:	f300 809c 	bgt.w	8007c24 <__kernel_rem_pio2+0x66c>
 8007aec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007af0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	f040 80a6 	bne.w	8007c48 <__kernel_rem_pio2+0x690>
 8007afc:	9b04      	ldr	r3, [sp, #16]
 8007afe:	e9c3 7800 	strd	r7, r8, [r3]
 8007b02:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007b06:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007b0a:	e7c6      	b.n	8007a9a <__kernel_rem_pio2+0x4e2>
 8007b0c:	9d05      	ldr	r5, [sp, #20]
 8007b0e:	ab48      	add	r3, sp, #288	@ 0x120
 8007b10:	441d      	add	r5, r3
 8007b12:	4644      	mov	r4, r8
 8007b14:	2000      	movs	r0, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	da35      	bge.n	8007b88 <__kernel_rem_pio2+0x5d0>
 8007b1c:	f1b9 0f00 	cmp.w	r9, #0
 8007b20:	d038      	beq.n	8007b94 <__kernel_rem_pio2+0x5dc>
 8007b22:	4602      	mov	r2, r0
 8007b24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b28:	9c04      	ldr	r4, [sp, #16]
 8007b2a:	e9c4 2300 	strd	r2, r3, [r4]
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007b36:	f7f8 fc9d 	bl	8000474 <__aeabi_dsub>
 8007b3a:	ad4a      	add	r5, sp, #296	@ 0x128
 8007b3c:	2401      	movs	r4, #1
 8007b3e:	45a0      	cmp	r8, r4
 8007b40:	da2b      	bge.n	8007b9a <__kernel_rem_pio2+0x5e2>
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	d002      	beq.n	8007b4e <__kernel_rem_pio2+0x596>
 8007b48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007b54:	e7a1      	b.n	8007a9a <__kernel_rem_pio2+0x4e2>
 8007b56:	9c05      	ldr	r4, [sp, #20]
 8007b58:	ab48      	add	r3, sp, #288	@ 0x120
 8007b5a:	441c      	add	r4, r3
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	da09      	bge.n	8007b7a <__kernel_rem_pio2+0x5c2>
 8007b66:	f1b9 0f00 	cmp.w	r9, #0
 8007b6a:	d002      	beq.n	8007b72 <__kernel_rem_pio2+0x5ba>
 8007b6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b70:	4619      	mov	r1, r3
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	e9c3 0100 	strd	r0, r1, [r3]
 8007b78:	e78f      	b.n	8007a9a <__kernel_rem_pio2+0x4e2>
 8007b7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b7e:	f7f8 fc7b 	bl	8000478 <__adddf3>
 8007b82:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b86:	e7eb      	b.n	8007b60 <__kernel_rem_pio2+0x5a8>
 8007b88:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007b8c:	f7f8 fc74 	bl	8000478 <__adddf3>
 8007b90:	3c01      	subs	r4, #1
 8007b92:	e7c1      	b.n	8007b18 <__kernel_rem_pio2+0x560>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e7c6      	b.n	8007b28 <__kernel_rem_pio2+0x570>
 8007b9a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007b9e:	f7f8 fc6b 	bl	8000478 <__adddf3>
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	e7cb      	b.n	8007b3e <__kernel_rem_pio2+0x586>
 8007ba6:	ed95 7b00 	vldr	d7, [r5]
 8007baa:	ed8d 7b00 	vstr	d7, [sp]
 8007bae:	ed95 7b02 	vldr	d7, [r5, #8]
 8007bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb6:	ec53 2b17 	vmov	r2, r3, d7
 8007bba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bbe:	f7f8 fc5b 	bl	8000478 <__adddf3>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460f      	mov	r7, r1
 8007bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bce:	f7f8 fc51 	bl	8000474 <__aeabi_dsub>
 8007bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bd6:	f7f8 fc4f 	bl	8000478 <__adddf3>
 8007bda:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007bde:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007be2:	e9c5 6700 	strd	r6, r7, [r5]
 8007be6:	e76d      	b.n	8007ac4 <__kernel_rem_pio2+0x50c>
 8007be8:	ed94 7b00 	vldr	d7, [r4]
 8007bec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007bf0:	ec51 0b17 	vmov	r0, r1, d7
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	ed8d 7b00 	vstr	d7, [sp]
 8007bfc:	f7f8 fc3c 	bl	8000478 <__adddf3>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c0c:	f7f8 fc32 	bl	8000474 <__aeabi_dsub>
 8007c10:	4652      	mov	r2, sl
 8007c12:	465b      	mov	r3, fp
 8007c14:	f7f8 fc30 	bl	8000478 <__adddf3>
 8007c18:	3d01      	subs	r5, #1
 8007c1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c1e:	e9c4 6700 	strd	r6, r7, [r4]
 8007c22:	e755      	b.n	8007ad0 <__kernel_rem_pio2+0x518>
 8007c24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c28:	f7f8 fc26 	bl	8000478 <__adddf3>
 8007c2c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007c30:	e758      	b.n	8007ae4 <__kernel_rem_pio2+0x52c>
 8007c32:	bf00      	nop
 8007c34:	f3af 8000 	nop.w
	...
 8007c40:	41700000 	.word	0x41700000
 8007c44:	3e700000 	.word	0x3e700000
 8007c48:	9b04      	ldr	r3, [sp, #16]
 8007c4a:	9a04      	ldr	r2, [sp, #16]
 8007c4c:	601f      	str	r7, [r3, #0]
 8007c4e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007c52:	605c      	str	r4, [r3, #4]
 8007c54:	609d      	str	r5, [r3, #8]
 8007c56:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c5a:	60d3      	str	r3, [r2, #12]
 8007c5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c60:	6110      	str	r0, [r2, #16]
 8007c62:	6153      	str	r3, [r2, #20]
 8007c64:	e719      	b.n	8007a9a <__kernel_rem_pio2+0x4e2>
 8007c66:	bf00      	nop

08007c68 <__kernel_cos>:
 8007c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ec57 6b10 	vmov	r6, r7, d0
 8007c70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007c74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007c78:	ed8d 1b00 	vstr	d1, [sp]
 8007c7c:	d206      	bcs.n	8007c8c <__kernel_cos+0x24>
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	f7f8 fe37 	bl	80008f4 <__aeabi_d2iz>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f000 8088 	beq.w	8007d9c <__kernel_cos+0x134>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	463b      	mov	r3, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 fac0 	bl	8000218 <__aeabi_dmul>
 8007c98:	4b51      	ldr	r3, [pc, #324]	@ (8007de0 <__kernel_cos+0x178>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	f7f8 faba 	bl	8000218 <__aeabi_dmul>
 8007ca4:	a340      	add	r3, pc, #256	@ (adr r3, 8007da8 <__kernel_cos+0x140>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	4682      	mov	sl, r0
 8007cac:	468b      	mov	fp, r1
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 fab1 	bl	8000218 <__aeabi_dmul>
 8007cb6:	a33e      	add	r3, pc, #248	@ (adr r3, 8007db0 <__kernel_cos+0x148>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fbdc 	bl	8000478 <__adddf3>
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	f7f8 faa8 	bl	8000218 <__aeabi_dmul>
 8007cc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007db8 <__kernel_cos+0x150>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 fbd1 	bl	8000474 <__aeabi_dsub>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	f7f8 fa9f 	bl	8000218 <__aeabi_dmul>
 8007cda:	a339      	add	r3, pc, #228	@ (adr r3, 8007dc0 <__kernel_cos+0x158>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fbca 	bl	8000478 <__adddf3>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f7f8 fa96 	bl	8000218 <__aeabi_dmul>
 8007cec:	a336      	add	r3, pc, #216	@ (adr r3, 8007dc8 <__kernel_cos+0x160>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fbbf 	bl	8000474 <__aeabi_dsub>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	f7f8 fa8d 	bl	8000218 <__aeabi_dmul>
 8007cfe:	a334      	add	r3, pc, #208	@ (adr r3, 8007dd0 <__kernel_cos+0x168>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fbb8 	bl	8000478 <__adddf3>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f7f8 fa84 	bl	8000218 <__aeabi_dmul>
 8007d10:	4622      	mov	r2, r4
 8007d12:	462b      	mov	r3, r5
 8007d14:	f7f8 fa80 	bl	8000218 <__aeabi_dmul>
 8007d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fa78 	bl	8000218 <__aeabi_dmul>
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7f8 fba0 	bl	8000474 <__aeabi_dsub>
 8007d34:	4b2b      	ldr	r3, [pc, #172]	@ (8007de4 <__kernel_cos+0x17c>)
 8007d36:	4598      	cmp	r8, r3
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	d810      	bhi.n	8007d60 <__kernel_cos+0xf8>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	f7f8 fb95 	bl	8000474 <__aeabi_dsub>
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4926      	ldr	r1, [pc, #152]	@ (8007de8 <__kernel_cos+0x180>)
 8007d4e:	4602      	mov	r2, r0
 8007d50:	2000      	movs	r0, #0
 8007d52:	f7f8 fb8f 	bl	8000474 <__aeabi_dsub>
 8007d56:	ec41 0b10 	vmov	d0, r0, r1
 8007d5a:	b003      	add	sp, #12
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <__kernel_cos+0x184>)
 8007d62:	4921      	ldr	r1, [pc, #132]	@ (8007de8 <__kernel_cos+0x180>)
 8007d64:	4598      	cmp	r8, r3
 8007d66:	bf8c      	ite	hi
 8007d68:	4d21      	ldrhi	r5, [pc, #132]	@ (8007df0 <__kernel_cos+0x188>)
 8007d6a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007d6e:	2400      	movs	r4, #0
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	2000      	movs	r0, #0
 8007d76:	f7f8 fb7d 	bl	8000474 <__aeabi_dsub>
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	462b      	mov	r3, r5
 8007d82:	4650      	mov	r0, sl
 8007d84:	4659      	mov	r1, fp
 8007d86:	f7f8 fb75 	bl	8000474 <__aeabi_dsub>
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	f7f8 fb71 	bl	8000474 <__aeabi_dsub>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	e7da      	b.n	8007d52 <__kernel_cos+0xea>
 8007d9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007dd8 <__kernel_cos+0x170>
 8007da0:	e7db      	b.n	8007d5a <__kernel_cos+0xf2>
 8007da2:	bf00      	nop
 8007da4:	f3af 8000 	nop.w
 8007da8:	be8838d4 	.word	0xbe8838d4
 8007dac:	bda8fae9 	.word	0xbda8fae9
 8007db0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007db4:	3e21ee9e 	.word	0x3e21ee9e
 8007db8:	809c52ad 	.word	0x809c52ad
 8007dbc:	3e927e4f 	.word	0x3e927e4f
 8007dc0:	19cb1590 	.word	0x19cb1590
 8007dc4:	3efa01a0 	.word	0x3efa01a0
 8007dc8:	16c15177 	.word	0x16c15177
 8007dcc:	3f56c16c 	.word	0x3f56c16c
 8007dd0:	5555554c 	.word	0x5555554c
 8007dd4:	3fa55555 	.word	0x3fa55555
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	3ff00000 	.word	0x3ff00000
 8007de0:	3fe00000 	.word	0x3fe00000
 8007de4:	3fd33332 	.word	0x3fd33332
 8007de8:	3ff00000 	.word	0x3ff00000
 8007dec:	3fe90000 	.word	0x3fe90000
 8007df0:	3fd20000 	.word	0x3fd20000
 8007df4:	00000000 	.word	0x00000000

08007df8 <__kernel_sin>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	ec55 4b10 	vmov	r4, r5, d0
 8007e00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007e04:	b085      	sub	sp, #20
 8007e06:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007e0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007e0e:	4680      	mov	r8, r0
 8007e10:	d205      	bcs.n	8007e1e <__kernel_sin+0x26>
 8007e12:	4620      	mov	r0, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7f8 fd6d 	bl	80008f4 <__aeabi_d2iz>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d052      	beq.n	8007ec4 <__kernel_sin+0xcc>
 8007e1e:	4622      	mov	r2, r4
 8007e20:	462b      	mov	r3, r5
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 f9f7 	bl	8000218 <__aeabi_dmul>
 8007e2a:	4682      	mov	sl, r0
 8007e2c:	468b      	mov	fp, r1
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f7f8 f9ef 	bl	8000218 <__aeabi_dmul>
 8007e3a:	a342      	add	r3, pc, #264	@ (adr r3, 8007f44 <__kernel_sin+0x14c>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	e9cd 0100 	strd	r0, r1, [sp]
 8007e44:	4650      	mov	r0, sl
 8007e46:	4659      	mov	r1, fp
 8007e48:	f7f8 f9e6 	bl	8000218 <__aeabi_dmul>
 8007e4c:	a33f      	add	r3, pc, #252	@ (adr r3, 8007f4c <__kernel_sin+0x154>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fb0f 	bl	8000474 <__aeabi_dsub>
 8007e56:	4652      	mov	r2, sl
 8007e58:	465b      	mov	r3, fp
 8007e5a:	f7f8 f9dd 	bl	8000218 <__aeabi_dmul>
 8007e5e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007f54 <__kernel_sin+0x15c>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fb08 	bl	8000478 <__adddf3>
 8007e68:	4652      	mov	r2, sl
 8007e6a:	465b      	mov	r3, fp
 8007e6c:	f7f8 f9d4 	bl	8000218 <__aeabi_dmul>
 8007e70:	a33a      	add	r3, pc, #232	@ (adr r3, 8007f5c <__kernel_sin+0x164>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fafd 	bl	8000474 <__aeabi_dsub>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f8 f9cb 	bl	8000218 <__aeabi_dmul>
 8007e82:	a338      	add	r3, pc, #224	@ (adr r3, 8007f64 <__kernel_sin+0x16c>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 faf6 	bl	8000478 <__adddf3>
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	460f      	mov	r7, r1
 8007e90:	f1b8 0f00 	cmp.w	r8, #0
 8007e94:	d11b      	bne.n	8007ece <__kernel_sin+0xd6>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 f9bb 	bl	8000218 <__aeabi_dmul>
 8007ea2:	a325      	add	r3, pc, #148	@ (adr r3, 8007f38 <__kernel_sin+0x140>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 fae4 	bl	8000474 <__aeabi_dsub>
 8007eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb0:	f7f8 f9b2 	bl	8000218 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 fadc 	bl	8000478 <__adddf3>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	ec45 4b10 	vmov	d0, r4, r5
 8007ec8:	b005      	add	sp, #20
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f40 <__kernel_sin+0x148>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f7f8 f99f 	bl	8000218 <__aeabi_dmul>
 8007eda:	4632      	mov	r2, r6
 8007edc:	4680      	mov	r8, r0
 8007ede:	4689      	mov	r9, r1
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ee6:	f7f8 f997 	bl	8000218 <__aeabi_dmul>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 fabf 	bl	8000474 <__aeabi_dsub>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	465b      	mov	r3, fp
 8007efa:	f7f8 f98d 	bl	8000218 <__aeabi_dmul>
 8007efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f02:	f7f8 fab7 	bl	8000474 <__aeabi_dsub>
 8007f06:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f38 <__kernel_sin+0x140>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	460f      	mov	r7, r1
 8007f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f14:	f7f8 f980 	bl	8000218 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f7f8 faaa 	bl	8000478 <__adddf3>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 faa2 	bl	8000474 <__aeabi_dsub>
 8007f30:	e7c6      	b.n	8007ec0 <__kernel_sin+0xc8>
 8007f32:	bf00      	nop
 8007f34:	f3af 8000 	nop.w
 8007f38:	55555549 	.word	0x55555549
 8007f3c:	3fc55555 	.word	0x3fc55555
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	5acfd57c 	.word	0x5acfd57c
 8007f48:	3de5d93a 	.word	0x3de5d93a
 8007f4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f50:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f54:	57b1fe7d 	.word	0x57b1fe7d
 8007f58:	3ec71de3 	.word	0x3ec71de3
 8007f5c:	19c161d5 	.word	0x19c161d5
 8007f60:	3f2a01a0 	.word	0x3f2a01a0
 8007f64:	1110f8a6 	.word	0x1110f8a6
 8007f68:	3f811111 	.word	0x3f811111

08007f6c <fabs>:
 8007f6c:	ec51 0b10 	vmov	r0, r1, d0
 8007f70:	4602      	mov	r2, r0
 8007f72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f76:	ec43 2b10 	vmov	d0, r2, r3
 8007f7a:	4770      	bx	lr
 8007f7c:	0000      	movs	r0, r0
	...

08007f80 <scalbn>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	ec55 4b10 	vmov	r4, r5, d0
 8007f86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	b991      	cbnz	r1, 8007fb6 <scalbn+0x36>
 8007f90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007f94:	4323      	orrs	r3, r4
 8007f96:	d03d      	beq.n	8008014 <scalbn+0x94>
 8007f98:	4b35      	ldr	r3, [pc, #212]	@ (8008070 <scalbn+0xf0>)
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f7f8 f93a 	bl	8000218 <__aeabi_dmul>
 8007fa4:	4b33      	ldr	r3, [pc, #204]	@ (8008074 <scalbn+0xf4>)
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	da0f      	bge.n	8007fce <scalbn+0x4e>
 8007fae:	a328      	add	r3, pc, #160	@ (adr r3, 8008050 <scalbn+0xd0>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	e01e      	b.n	8007ff4 <scalbn+0x74>
 8007fb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	d10b      	bne.n	8007fd6 <scalbn+0x56>
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7f8 fa58 	bl	8000478 <__adddf3>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	e022      	b.n	8008014 <scalbn+0x94>
 8007fce:	460b      	mov	r3, r1
 8007fd0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007fd4:	3936      	subs	r1, #54	@ 0x36
 8007fd6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007fda:	4296      	cmp	r6, r2
 8007fdc:	dd0d      	ble.n	8007ffa <scalbn+0x7a>
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008058 <scalbn+0xd8>)
 8007fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe6:	da02      	bge.n	8007fee <scalbn+0x6e>
 8007fe8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008060 <scalbn+0xe0>)
 8007fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fee:	a31a      	add	r3, pc, #104	@ (adr r3, 8008058 <scalbn+0xd8>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 f910 	bl	8000218 <__aeabi_dmul>
 8007ff8:	e7e6      	b.n	8007fc8 <scalbn+0x48>
 8007ffa:	1872      	adds	r2, r6, r1
 8007ffc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008000:	428a      	cmp	r2, r1
 8008002:	dcec      	bgt.n	8007fde <scalbn+0x5e>
 8008004:	2a00      	cmp	r2, #0
 8008006:	dd08      	ble.n	800801a <scalbn+0x9a>
 8008008:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800800c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008010:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008014:	ec45 4b10 	vmov	d0, r4, r5
 8008018:	bd70      	pop	{r4, r5, r6, pc}
 800801a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800801e:	da08      	bge.n	8008032 <scalbn+0xb2>
 8008020:	2d00      	cmp	r5, #0
 8008022:	a10b      	add	r1, pc, #44	@ (adr r1, 8008050 <scalbn+0xd0>)
 8008024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008028:	dac1      	bge.n	8007fae <scalbn+0x2e>
 800802a:	a10f      	add	r1, pc, #60	@ (adr r1, 8008068 <scalbn+0xe8>)
 800802c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008030:	e7bd      	b.n	8007fae <scalbn+0x2e>
 8008032:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008036:	3236      	adds	r2, #54	@ 0x36
 8008038:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800803c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008040:	4620      	mov	r0, r4
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <scalbn+0xf8>)
 8008044:	4629      	mov	r1, r5
 8008046:	2200      	movs	r2, #0
 8008048:	e7d4      	b.n	8007ff4 <scalbn+0x74>
 800804a:	bf00      	nop
 800804c:	f3af 8000 	nop.w
 8008050:	c2f8f359 	.word	0xc2f8f359
 8008054:	01a56e1f 	.word	0x01a56e1f
 8008058:	8800759c 	.word	0x8800759c
 800805c:	7e37e43c 	.word	0x7e37e43c
 8008060:	8800759c 	.word	0x8800759c
 8008064:	fe37e43c 	.word	0xfe37e43c
 8008068:	c2f8f359 	.word	0xc2f8f359
 800806c:	81a56e1f 	.word	0x81a56e1f
 8008070:	43500000 	.word	0x43500000
 8008074:	ffff3cb0 	.word	0xffff3cb0
 8008078:	3c900000 	.word	0x3c900000
 800807c:	00000000 	.word	0x00000000

08008080 <floor>:
 8008080:	ec51 0b10 	vmov	r0, r1, d0
 8008084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008090:	2e13      	cmp	r6, #19
 8008092:	460c      	mov	r4, r1
 8008094:	4605      	mov	r5, r0
 8008096:	4680      	mov	r8, r0
 8008098:	dc34      	bgt.n	8008104 <floor+0x84>
 800809a:	2e00      	cmp	r6, #0
 800809c:	da17      	bge.n	80080ce <floor+0x4e>
 800809e:	a332      	add	r3, pc, #200	@ (adr r3, 8008168 <floor+0xe8>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f9e8 	bl	8000478 <__adddf3>
 80080a8:	2200      	movs	r2, #0
 80080aa:	2300      	movs	r3, #0
 80080ac:	f7f8 fc18 	bl	80008e0 <__aeabi_dcmpgt>
 80080b0:	b150      	cbz	r0, 80080c8 <floor+0x48>
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	da55      	bge.n	8008162 <floor+0xe2>
 80080b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80080ba:	432c      	orrs	r4, r5
 80080bc:	2500      	movs	r5, #0
 80080be:	42ac      	cmp	r4, r5
 80080c0:	4c2b      	ldr	r4, [pc, #172]	@ (8008170 <floor+0xf0>)
 80080c2:	bf08      	it	eq
 80080c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80080c8:	4621      	mov	r1, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	e023      	b.n	8008116 <floor+0x96>
 80080ce:	4f29      	ldr	r7, [pc, #164]	@ (8008174 <floor+0xf4>)
 80080d0:	4137      	asrs	r7, r6
 80080d2:	ea01 0307 	and.w	r3, r1, r7
 80080d6:	4303      	orrs	r3, r0
 80080d8:	d01d      	beq.n	8008116 <floor+0x96>
 80080da:	a323      	add	r3, pc, #140	@ (adr r3, 8008168 <floor+0xe8>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f9ca 	bl	8000478 <__adddf3>
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f7f8 fbfa 	bl	80008e0 <__aeabi_dcmpgt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d0eb      	beq.n	80080c8 <floor+0x48>
 80080f0:	2c00      	cmp	r4, #0
 80080f2:	bfbe      	ittt	lt
 80080f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80080f8:	4133      	asrlt	r3, r6
 80080fa:	18e4      	addlt	r4, r4, r3
 80080fc:	ea24 0407 	bic.w	r4, r4, r7
 8008100:	2500      	movs	r5, #0
 8008102:	e7e1      	b.n	80080c8 <floor+0x48>
 8008104:	2e33      	cmp	r6, #51	@ 0x33
 8008106:	dd0a      	ble.n	800811e <floor+0x9e>
 8008108:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800810c:	d103      	bne.n	8008116 <floor+0x96>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	f7f8 f9b1 	bl	8000478 <__adddf3>
 8008116:	ec41 0b10 	vmov	d0, r0, r1
 800811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008122:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008126:	40df      	lsrs	r7, r3
 8008128:	4207      	tst	r7, r0
 800812a:	d0f4      	beq.n	8008116 <floor+0x96>
 800812c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008168 <floor+0xe8>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f9a1 	bl	8000478 <__adddf3>
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	f7f8 fbd1 	bl	80008e0 <__aeabi_dcmpgt>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0c2      	beq.n	80080c8 <floor+0x48>
 8008142:	2c00      	cmp	r4, #0
 8008144:	da0a      	bge.n	800815c <floor+0xdc>
 8008146:	2e14      	cmp	r6, #20
 8008148:	d101      	bne.n	800814e <floor+0xce>
 800814a:	3401      	adds	r4, #1
 800814c:	e006      	b.n	800815c <floor+0xdc>
 800814e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008152:	2301      	movs	r3, #1
 8008154:	40b3      	lsls	r3, r6
 8008156:	441d      	add	r5, r3
 8008158:	4545      	cmp	r5, r8
 800815a:	d3f6      	bcc.n	800814a <floor+0xca>
 800815c:	ea25 0507 	bic.w	r5, r5, r7
 8008160:	e7b2      	b.n	80080c8 <floor+0x48>
 8008162:	2500      	movs	r5, #0
 8008164:	462c      	mov	r4, r5
 8008166:	e7af      	b.n	80080c8 <floor+0x48>
 8008168:	8800759c 	.word	0x8800759c
 800816c:	7e37e43c 	.word	0x7e37e43c
 8008170:	bff00000 	.word	0xbff00000
 8008174:	000fffff 	.word	0x000fffff

08008178 <_init>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr

08008184 <_fini>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr
