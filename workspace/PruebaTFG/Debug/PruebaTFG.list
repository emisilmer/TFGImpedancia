
PruebaTFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b4  080032b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080032b4  080032b4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032b4  080032b4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080032bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000090  0800334c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800334c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e19b  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218d  00000000  00000000  0002e29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b23  00000000  00000000  000312b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256af  00000000  00000000  00031dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f900  00000000  00000000  00057482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a08  00000000  00000000  00066d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cd4  00000000  00000000  0015c78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00160460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800328c 	.word	0x0800328c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800328c 	.word	0x0800328c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all
   *  peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fac4 	bl	80007aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f83b 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000226:	f000 f933 	bl	8000490 <MX_DMA_Init>
  MX_GPIO_Init();
 800022a:	f000 f95b 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800022e:	f000 f8e1 	bl	80003f4 <MX_TIM3_Init>
  MX_DAC3_Init();
 8000232:	f000 f87f 	bl	8000334 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 8000236:	f000 f8b7 	bl	80003a8 <MX_OPAMP6_Init>
  /* USER CODE BEGIN 2 */
  /*Probar sin IT*/
  HAL_TIM_Base_Start(&htim3);
 800023a:	4813      	ldr	r0, [pc, #76]	; (8000288 <main+0x70>)
 800023c:	f002 faa2 	bl	8002784 <HAL_TIM_Base_Start>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1,(uint32_t*)lut,lut_size,DAC_ALIGN_12B_R);

  if(HAL_OK != HAL_OPAMP_Start(&hopamp6)) { Error_Handler();}
 8000240:	4812      	ldr	r0, [pc, #72]	; (800028c <main+0x74>)
 8000242:	f001 fc69 	bl	8001b18 <HAL_OPAMP_Start>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <main+0x38>
 800024c:	f000 f962 	bl	8000514 <Error_Handler>

  //En el ejemplo es dac3
  if(HAL_DACEx_DualSetValue(&hdac3, DAC_ALIGN_12B_R, 0, 0) != HAL_OK) { Error_Handler();}
 8000250:	2300      	movs	r3, #0
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	480e      	ldr	r0, [pc, #56]	; (8000290 <main+0x78>)
 8000258:	f000 ff1e 	bl	8001098 <HAL_DACEx_DualSetValue>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <main+0x4e>
 8000262:	f000 f957 	bl	8000514 <Error_Handler>
  if(HAL_DACEx_DualStart_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)lut,lut_size,DAC_ALIGN_12B_R))
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <main+0x7c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2200      	movs	r2, #0
 800026c:	9200      	str	r2, [sp, #0]
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <main+0x80>)
 8000270:	2100      	movs	r1, #0
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x78>)
 8000274:	f000 fe5a 	bl	8000f2c <HAL_DACEx_DualStart_DMA>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d000      	beq.n	8000280 <main+0x68>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027e:	e7fe      	b.n	800027e <main+0x66>
 8000280:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000015c 	.word	0x2000015c
 800028c:	20000120 	.word	0x20000120
 8000290:	200000ac 	.word	0x200000ac
 8000294:	20000080 	.word	0x20000080
 8000298:	20000000 	.word	0x20000000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2238      	movs	r2, #56	; 0x38
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 ffc2 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002be:	2000      	movs	r0, #0
 80002c0:	f001 fc5c 	bl	8001b7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	2302      	movs	r3, #2
 80002c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2340      	movs	r3, #64	; 0x40
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002da:	2304      	movs	r3, #4
 80002dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002de:	2355      	movs	r3, #85	; 0x55
 80002e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e2:	2302      	movs	r3, #2
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fce6 	bl	8001cc4 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002fe:	f000 f909 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2303      	movs	r3, #3
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2104      	movs	r1, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f001 ffe9 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000328:	f000 f8f4 	bl	8000514 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3750      	adds	r7, #80	; 0x50
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	; 0x30
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800033a:	463b      	mov	r3, r7
 800033c:	2230      	movs	r2, #48	; 0x30
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f002 ff77 	bl	8003234 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_DAC3_Init+0x6c>)
 8000348:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <MX_DAC3_Init+0x70>)
 800034a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800034c:	4814      	ldr	r0, [pc, #80]	; (80003a0 <MX_DAC3_Init+0x6c>)
 800034e:	f000 fbce 	bl	8000aee <HAL_DAC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000358:	f000 f8dc 	bl	8000514 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800035c:	2302      	movs	r3, #2
 800035e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000360:	2300      	movs	r3, #0
 8000362:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 800036c:	2322      	movs	r3, #34	; 0x22
 800036e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000374:	2302      	movs	r3, #2
 8000376:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_DAC3_Init+0x6c>)
 8000388:	f000 fbf2 	bl	8000b70 <HAL_DAC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000392:	f000 f8bf 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3730      	adds	r7, #48	; 0x30
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000ac 	.word	0x200000ac
 80003a4:	50001000 	.word	0x50001000

080003a8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003ae:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <MX_OPAMP6_Init+0x48>)
 80003b0:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003ba:	2260      	movs	r2, #96	; 0x60
 80003bc:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003c0:	220c      	movs	r2, #12
 80003c2:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_OPAMP6_Init+0x44>)
 80003d8:	f001 face 	bl	8001978 <HAL_OPAMP_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80003e2:	f000 f897 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000120 	.word	0x20000120
 80003f0:	40010314 	.word	0x40010314

080003f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_TIM3_Init+0x94>)
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <MX_TIM3_Init+0x98>)
 8000416:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM3_Init+0x94>)
 800041a:	2201      	movs	r2, #1
 800041c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_TIM3_Init+0x94>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_TIM3_Init+0x94>)
 8000426:	2234      	movs	r2, #52	; 0x34
 8000428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_TIM3_Init+0x94>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_TIM3_Init+0x94>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <MX_TIM3_Init+0x94>)
 8000438:	f002 f94c 	bl	80026d4 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f867 	bl	8000514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM3_Init+0x94>)
 8000454:	f002 fb86 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 f859 	bl	8000514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000462:	2320      	movs	r3, #32
 8000464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_TIM3_Init+0x94>)
 8000470:	f002 fe04 	bl	800307c <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800047a:	f000 f84b 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000015c 	.word	0x2000015c
 800048c:	40000400 	.word	0x40000400

08000490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_DMA_Init+0x50>)
 8000498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <MX_DMA_Init+0x50>)
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	6493      	str	r3, [r2, #72]	; 0x48
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_DMA_Init+0x50>)
 80004a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004a6:	f003 0304 	and.w	r3, r3, #4
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_DMA_Init+0x50>)
 80004b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b2:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <MX_DMA_Init+0x50>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6493      	str	r3, [r2, #72]	; 0x48
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_DMA_Init+0x50>)
 80004bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	200b      	movs	r0, #11
 80004cc:	f000 fadb 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d0:	200b      	movs	r0, #11
 80004d2:	f000 faf2 	bl	8000aba <HAL_NVIC_EnableIRQ>

}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6613      	str	r3, [r2, #96]	; 0x60
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	6593      	str	r3, [r2, #88]	; 0x58
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <HAL_DAC_MspInit+0x8c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d137      	bne.n	80005ea <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_DAC_MspInit+0x90>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <HAL_DAC_MspInit+0x90>)
 8000580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_DAC_MspInit+0x90>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <HAL_DAC_MspInit+0x94>)
 8000594:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <HAL_DAC_MspInit+0x98>)
 8000596:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_DAC_MspInit+0x94>)
 800059a:	2266      	movs	r2, #102	; 0x66
 800059c:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005a0:	2210      	movs	r2, #16
 80005a2:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b6:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005be:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005c2:	2220      	movs	r2, #32
 80005c4:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005d0:	f000 fdde 	bl	8001190 <HAL_DMA_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 80005da:	f7ff ff9b 	bl	8000514 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <HAL_DAC_MspInit+0x94>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	50001000 	.word	0x50001000
 80005f8:	40021000 	.word	0x40021000
 80005fc:	200000c0 	.word	0x200000c0
 8000600:	40020008 	.word	0x40020008

08000604 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP6)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <HAL_OPAMP_MspInit+0x5c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d118      	bne.n	8000658 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP6_MspInit 0 */

  /* USER CODE END OPAMP6_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_OPAMP_MspInit+0x60>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_OPAMP_MspInit+0x60>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_OPAMP_MspInit+0x60>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP6 GPIO Configuration
    PB11     ------> OPAMP6_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800063e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000644:	2303      	movs	r3, #3
 8000646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <HAL_OPAMP_MspInit+0x64>)
 8000654:	f001 f80e 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010314 	.word	0x40010314
 8000664:	40021000 	.word	0x40021000
 8000668:	48000400 	.word	0x48000400

0800066c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <HAL_TIM_Base_MspInit+0x44>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d113      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_TIM_Base_MspInit+0x48>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <HAL_TIM_Base_MspInit+0x48>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_TIM_Base_MspInit+0x48>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	201d      	movs	r0, #29
 800069c:	f000 f9f3 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006a0:	201d      	movs	r0, #29
 80006a2:	f000 fa0a 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40000400 	.word	0x40000400
 80006b4:	40021000 	.word	0x40021000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8a4 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel1_IRQHandler+0x10>)
 8000712:	f000 fe60 	bl	80013d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000c0 	.word	0x200000c0

08000720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <TIM3_IRQHandler+0x10>)
 8000726:	f002 f89d 	bl	8002864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000015c 	.word	0x2000015c

08000734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0b      	ldr	r4, [pc, #44]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000782:	f7ff ffd7 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000786:	f002 fd5d 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078a:	f7ff fd45 	bl	8000218 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800079c:	080032bc 	.word	0x080032bc
  ldr r2, =_sbss
 80007a0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80007a4:	200001ac 	.word	0x200001ac

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>

080007aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b0:	2300      	movs	r3, #0
 80007b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f95b 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f80e 	bl	80007dc <HAL_InitTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	e001      	b.n	80007d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007cc:	f7ff fea8 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007d0:	79fb      	ldrb	r3, [r7, #7]

}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_InitTick+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d022      	beq.n	8000836 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_InitTick+0x6c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <HAL_InitTick+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000800:	fbb2 f3f3 	udiv	r3, r2, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f966 	bl	8000ad6 <HAL_SYSTICK_Config>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10f      	bne.n	8000830 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	d809      	bhi.n	800082a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000816:	2200      	movs	r2, #0
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	f04f 30ff 	mov.w	r0, #4294967295
 800081e:	f000 f932 	bl	8000a86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_InitTick+0x70>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e007      	b.n	800083a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e004      	b.n	800083a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e001      	b.n	800083a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000008c 	.word	0x2000008c
 8000848:	20000084 	.word	0x20000084
 800084c:	20000088 	.word	0x20000088

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x1c>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x20>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4413      	add	r3, r2
 800085e:	4a03      	ldr	r2, [pc, #12]	; (800086c <HAL_IncTick+0x1c>)
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	200001a8 	.word	0x200001a8
 8000870:	2000008c 	.word	0x2000008c

08000874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_GetTick+0x14>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	200001a8 	.word	0x200001a8

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff ffee 	bl	8000874 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d004      	beq.n	80008b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_Delay+0x40>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b0:	bf00      	nop
 80008b2:	f7ff ffdf 	bl	8000874 <HAL_GetTick>
 80008b6:	4602      	mov	r2, r0
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d8f7      	bhi.n	80008b2 <HAL_Delay+0x26>
  {
  }
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000008c 	.word	0x2000008c

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff8e 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff29 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff40 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff90 	bl	80009c4 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5f 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff33 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa4 	bl	8000a2c <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e014      	b.n	8000b2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fd29 	bl	8000568 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	795b      	ldrb	r3, [r3, #5]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <HAL_DAC_ConfigChannel+0x18>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e192      	b.n	8000eae <HAL_DAC_ConfigChannel+0x33e>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2202      	movs	r2, #2
 8000b92:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d174      	bne.n	8000c86 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b9c:	f7ff fe6a 	bl	8000874 <HAL_GetTick>
 8000ba0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d134      	bne.n	8000c12 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ba8:	e011      	b.n	8000bce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000baa:	f7ff fe63 	bl	8000874 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d90a      	bls.n	8000bce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	f043 0208 	orr.w	r2, r3, #8
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e16f      	b.n	8000eae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e6      	bne.n	8000baa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fe55 	bl	800088c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40
 8000bec:	e01e      	b.n	8000c2c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bee:	f7ff fe41 	bl	8000874 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d90a      	bls.n	8000c12 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	f043 0208 	orr.w	r2, r3, #8
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e14d      	b.n	8000eae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dbe8      	blt.n	8000bee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff fe35 	bl	800088c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c2a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	ea02 0103 	and.w	r1, r2, r3
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	409a      	lsls	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	ea02 0103 	and.w	r1, r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d11d      	bne.n	8000cca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	221f      	movs	r2, #31
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2207      	movs	r2, #7
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d102      	bne.n	8000cf4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	e00f      	b.n	8000d14 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d102      	bne.n	8000d02 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	e008      	b.n	8000d14 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
 8000d0e:	e001      	b.n	8000d14 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d36:	4013      	ands	r3, r2
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	791b      	ldrb	r3, [r3, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_DAC_ConfigChannel+0x1d8>
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	e000      	b.n	8000d4a <HAL_DAC_ConfigChannel+0x1da>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d62:	4013      	ands	r3, r2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d102      	bne.n	8000d74 <HAL_DAC_ConfigChannel+0x204>
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	e000      	b.n	8000d76 <HAL_DAC_ConfigChannel+0x206>
 8000d74:	2300      	movs	r3, #0
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d114      	bne.n	8000db6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d8c:	f001 fc50 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8000d90:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <HAL_DAC_ConfigChannel+0x348>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d904      	bls.n	8000da4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
 8000da2:	e00f      	b.n	8000dc4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <HAL_DAC_ConfigChannel+0x34c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d90a      	bls.n	8000dc2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
 8000db4:	e006      	b.n	8000dc4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc0:	e000      	b.n	8000dc4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000dc2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e16:	4013      	ands	r3, r2
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	22c0      	movs	r2, #192	; 0xc0
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	400a      	ands	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	f003 030f 	and.w	r3, r3, #15
 8000e60:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	f640 710f 	movw	r1, #3855	; 0xf0f
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	ea02 0103 	and.w	r1, r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	09896800 	.word	0x09896800
 8000ebc:	04c4b400 	.word	0x04c4b400

08000ec0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff fe2f 	bl	8000b32 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	711a      	strb	r2, [r3, #4]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff fe28 	bl	8000b46 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f043 0204 	orr.w	r2, r3, #4
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff fe1e 	bl	8000b5a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	711a      	strb	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0UL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  /* Ensure Channel 2 exists for this particular DAC instance */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, DAC_CHANNEL_2));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	795b      	ldrb	r3, [r3, #5]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_DACEx_DualStart_DMA+0x1e>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e095      	b.n	8001076 <HAL_DACEx_DualStart_DMA+0x14a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2202      	movs	r2, #2
 8000f54:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d114      	bne.n	8000f86 <HAL_DACEx_DualStart_DMA+0x5a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_DACEx_DualStart_DMA+0x154>)
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4a46      	ldr	r2, [pc, #280]	; (8001084 <HAL_DACEx_DualStart_DMA+0x158>)
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_DACEx_DualStart_DMA+0x15c>)
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e013      	b.n	8000fae <HAL_DACEx_DualStart_DMA+0x82>
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_DACEx_DualStart_DMA+0x160>)
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a3f      	ldr	r2, [pc, #252]	; (8001090 <HAL_DACEx_DualStart_DMA+0x164>)
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <HAL_DACEx_DualStart_DMA+0x168>)
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fac:	601a      	str	r2, [r3, #0]
  }

  switch (Alignment)
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d013      	beq.n	8000fdc <HAL_DACEx_DualStart_DMA+0xb0>
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d815      	bhi.n	8000fe6 <HAL_DACEx_DualStart_DMA+0xba>
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_DACEx_DualStart_DMA+0x9c>
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d005      	beq.n	8000fd2 <HAL_DACEx_DualStart_DMA+0xa6>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
      break;
    default:
      break;
 8000fc6:	e00e      	b.n	8000fe6 <HAL_DACEx_DualStart_DMA+0xba>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3320      	adds	r3, #32
 8000fce:	613b      	str	r3, [r7, #16]
      break;
 8000fd0:	e00a      	b.n	8000fe8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3324      	adds	r3, #36	; 0x24
 8000fd8:	613b      	str	r3, [r7, #16]
      break;
 8000fda:	e005      	b.n	8000fe8 <HAL_DACEx_DualStart_DMA+0xbc>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3328      	adds	r3, #40	; 0x28
 8000fe2:	613b      	str	r3, [r7, #16]
      break;
 8000fe4:	e000      	b.n	8000fe8 <HAL_DACEx_DualStart_DMA+0xbc>
      break;
 8000fe6:	bf00      	nop
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d111      	bne.n	8001012 <HAL_DACEx_DualStart_DMA+0xe6>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6898      	ldr	r0, [r3, #8]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	f000 f96a 	bl	80012e0 <HAL_DMA_Start_IT>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
 8001010:	e010      	b.n	8001034 <HAL_DACEx_DualStart_DMA+0x108>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001020:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68d8      	ldr	r0, [r3, #12]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f000 f958 	bl	80012e0 <HAL_DMA_Start_IT>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d113      	bne.n	8001068 <HAL_DACEx_DualStart_DMA+0x13c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800105e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fc13 	bl	800088c <HAL_Delay>
 8001066:	e005      	b.n	8001074 <HAL_DACEx_DualStart_DMA+0x148>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	f043 0204 	orr.w	r2, r3, #4
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	08000ec1 	.word	0x08000ec1
 8001084:	08000ee3 	.word	0x08000ee3
 8001088:	08000eff 	.word	0x08000eff
 800108c:	08001123 	.word	0x08001123
 8001090:	08001145 	.word	0x08001145
 8001094:	08001161 	.word	0x08001161

08001098 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d105      	bne.n	80010b8 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e004      	b.n	80010c2 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4413      	add	r3, r2
 80010ce:	3320      	adds	r3, #32
 80010d0:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff ffd8 	bl	80010e6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	711a      	strb	r2, [r3, #4]
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff ffd1 	bl	80010fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f043 0204 	orr.w	r2, r3, #4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff ffc7 	bl	800110e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	711a      	strb	r2, [r3, #4]
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e08d      	b.n	80012be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <HAL_DMA_Init+0x138>)
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d80f      	bhi.n	80011ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <HAL_DMA_Init+0x13c>)
 80011b6:	4413      	add	r3, r2
 80011b8:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_DMA_Init+0x140>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	009a      	lsls	r2, r3, #2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <HAL_DMA_Init+0x144>)
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
 80011cc:	e00e      	b.n	80011ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <HAL_DMA_Init+0x148>)
 80011d6:	4413      	add	r3, r2
 80011d8:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_DMA_Init+0x140>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	009a      	lsls	r2, r3, #2
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <HAL_DMA_Init+0x14c>)
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001206:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9b6 	bl	80015b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800124c:	d102      	bne.n	8001254 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001268:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d010      	beq.n	8001294 <HAL_DMA_Init+0x104>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d80c      	bhi.n	8001294 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f9d6 	bl	800162c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	e008      	b.n	80012a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020407 	.word	0x40020407
 80012cc:	bffdfff8 	.word	0xbffdfff8
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	40020000 	.word	0x40020000
 80012d8:	bffdfbf8 	.word	0xbffdfbf8
 80012dc:	40020400 	.word	0x40020400

080012e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_DMA_Start_IT+0x20>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e066      	b.n	80013ce <HAL_DMA_Start_IT+0xee>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d155      	bne.n	80013c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 f8fb 	bl	8001534 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 020e 	orr.w	r2, r2, #14
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e00f      	b.n	8001378 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0204 	bic.w	r2, r2, #4
 8001366:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 020a 	orr.w	r2, r2, #10
 8001376:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001394:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e005      	b.n	80013cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80013c8:	2302      	movs	r3, #2
 80013ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2204      	movs	r2, #4
 80013f8:	409a      	lsls	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d026      	beq.n	8001450 <HAL_DMA_IRQHandler+0x7a>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d021      	beq.n	8001450 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0204 	bic.w	r2, r2, #4
 8001428:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 021f 	and.w	r2, r3, #31
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2104      	movs	r1, #4
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	2b00      	cmp	r3, #0
 8001444:	d071      	beq.n	800152a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800144e:	e06c      	b.n	800152a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	2202      	movs	r2, #2
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d02e      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d029      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020a 	bic.w	r2, r2, #10
 800148a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	2102      	movs	r1, #2
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d038      	beq.n	800152a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014c0:	e033      	b.n	800152a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2208      	movs	r2, #8
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d02a      	beq.n	800152c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d025      	beq.n	800152c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 020e 	bic.w	r2, r2, #14
 80014ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800152a:	bf00      	nop
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800154a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800155c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 021f 	and.w	r2, r3, #31
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d108      	bne.n	8001594 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001592:	e007      	b.n	80015a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d802      	bhi.n	80015ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e001      	b.n	80015ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80015cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3b08      	subs	r3, #8
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4413      	add	r3, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2201      	movs	r2, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	651a      	str	r2, [r3, #80]	; 0x50
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40020407 	.word	0x40020407
 800161c:	40020800 	.word	0x40020800
 8001620:	40020820 	.word	0x40020820
 8001624:	cccccccd 	.word	0xcccccccd
 8001628:	40020880 	.word	0x40020880

0800162c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800164e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3b01      	subs	r3, #1
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2201      	movs	r2, #1
 800165a:	409a      	lsls	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	1000823f 	.word	0x1000823f
 8001670:	40020940 	.word	0x40020940

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001682:	e15a      	b.n	800193a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 814c 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a6 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	4a5a      	ldr	r2, [pc, #360]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6613      	str	r3, [r2, #96]	; 0x60
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d01f      	beq.n	800186c <HAL_GPIO_Init+0x1f8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x2ec>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d019      	beq.n	8001868 <HAL_GPIO_Init+0x1f4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x2f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1f0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x2f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001854:	2305      	movs	r3, #5
 8001856:	e00a      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001858:	2306      	movs	r3, #6
 800185a:	e008      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800185c:	2304      	movs	r3, #4
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001860:	2303      	movs	r3, #3
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800186c:	2300      	movs	r3, #0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187e:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_GPIO_Init+0x300>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b0:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x300>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f ae9d 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0bb      	b.n	8001b06 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b05      	cmp	r3, #5
 8001998:	d101      	bne.n	800199e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0b3      	b.n	8001b06 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d101      	bne.n	80019ae <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0ab      	b.n	8001b06 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_OPAMP_Init+0x198>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_OPAMP_Init+0x198>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_OPAMP_Init+0x198>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fe12 	bl	8000604 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d003      	beq.n	80019f0 <HAL_OPAMP_Init+0x78>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b60      	cmp	r3, #96	; 0x60
 80019ee:	d133      	bne.n	8001a58 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0110 	bic.w	r1, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_OPAMP_Init+0x19c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6851      	ldr	r1, [r2, #4]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6892      	ldr	r2, [r2, #8]
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6912      	ldr	r2, [r2, #16]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	7d09      	ldrb	r1, [r1, #20]
 8001a24:	2901      	cmp	r1, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_OPAMP_Init+0xb6>
 8001a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2c:	e000      	b.n	8001a30 <HAL_OPAMP_Init+0xb8>
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4311      	orrs	r1, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a42:	04d2      	lsls	r2, r2, #19
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4a:	0612      	lsls	r2, r2, #24
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e035      	b.n	8001ac4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0110 	bic.w	r1, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_OPAMP_Init+0x19c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6851      	ldr	r1, [r2, #4]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6892      	ldr	r2, [r2, #8]
 8001a80:	4311      	orrs	r1, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6912      	ldr	r2, [r2, #16]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	7d09      	ldrb	r1, [r1, #20]
 8001a92:	2901      	cmp	r1, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_OPAMP_Init+0x124>
 8001a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9a:	e000      	b.n	8001a9e <HAL_OPAMP_Init+0x126>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab0:	04d2      	lsls	r2, r2, #19
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab8:	0612      	lsls	r2, r2, #24
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db10      	blt.n	8001af0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	e0003e11 	.word	0xe0003e11

08001b18 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e01d      	b.n	8001b6c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d102      	bne.n	8001b42 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e014      	b.n	8001b6c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10c      	bne.n	8001b68 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b66:	e001      	b.n	8001b6c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d141      	bne.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b96:	d131      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b98:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b9e:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba8:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb0:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2232      	movs	r2, #50	; 0x32
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a3f      	ldr	r2, [pc, #252]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	0c9b      	lsrs	r3, r3, #18
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bce:	e002      	b.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be2:	d102      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f2      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d158      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e057      	b.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c0c:	e04d      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c14:	d141      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d131      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c2a:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2232      	movs	r2, #50	; 0x32
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	0c9b      	lsrs	r3, r3, #18
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5a:	e002      	b.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6e:	d102      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d112      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e011      	b.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c98:	e007      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	20000084 	.word	0x20000084
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e306      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d075      	beq.n	8001dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b97      	ldr	r3, [pc, #604]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cec:	4b94      	ldr	r3, [pc, #592]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3e>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_OscConfig+0x44>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d157      	bne.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e2e1      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x74>
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a84      	ldr	r2, [pc, #528]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7e      	ldr	r2, [pc, #504]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7b      	ldr	r2, [pc, #492]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a77      	ldr	r2, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a74      	ldr	r2, [pc, #464]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fd7a 	bl	8000874 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7fe fd76 	bl	8000874 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e2a6      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fd66 	bl	8000874 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7fe fd62 	bl	8000874 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e292      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dbe:	4b60      	ldr	r3, [pc, #384]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x136>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_OscConfig+0x13c>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11f      	bne.n	8001e40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x154>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e265      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	4946      	ldr	r1, [pc, #280]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fcd3 	bl	80007dc <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d043      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e251      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe fd0e 	bl	8000874 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7fe fd0a 	bl	8000874 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e23a      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6e:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	492d      	ldr	r1, [pc, #180]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e01a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fcea 	bl	8000874 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fce6 	bl	8000874 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e216      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1e0>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d041      	beq.n	8001f56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7fe fcc3 	bl	8000874 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fcbf 	bl	8000874 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1ef      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0ef      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x22e>
 8001f12:	e020      	b.n	8001f56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7fe fca6 	bl	8000874 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fca2 	bl	8000874 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d906      	bls.n	8001f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1d2      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f48:	4b8c      	ldr	r3, [pc, #560]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ea      	bne.n	8001f2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a6 	beq.w	80020b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2b4>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x2b6>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a7e      	ldr	r2, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9a:	4b79      	ldr	r3, [pc, #484]	; (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fc5f 	bl	8000874 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe fc5b 	bl	8000874 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e18b      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x4bc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x32e>
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff0:	e024      	b.n	800203c <HAL_RCC_OscConfig+0x378>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d110      	bne.n	800201c <HAL_RCC_OscConfig+0x358>
 8001ffa:	4b60      	ldr	r3, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	4a5e      	ldr	r2, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201a:	e00f      	b.n	800203c <HAL_RCC_OscConfig+0x378>
 800201c:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d016      	beq.n	8002072 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fc16 	bl	8000874 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe fc12 	bl	8000874 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e140      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ed      	beq.n	800204c <HAL_RCC_OscConfig+0x388>
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe fbff 	bl	8000874 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe fbfb 	bl	8000874 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e129      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ed      	bne.n	800207a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03c      	beq.n	8002136 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01c      	beq.n	80020fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ca:	4a2c      	ldr	r2, [pc, #176]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7fe fbce 	bl	8000874 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020dc:	f7fe fbca 	bl	8000874 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0fa      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCC_OscConfig+0x418>
 80020fc:	e01b      	b.n	8002136 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe fbb1 	bl	8000874 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002116:	f7fe fbad 	bl	8000874 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0dd      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ef      	bne.n	8002116 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d1 	beq.w	80022e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b0c      	cmp	r3, #12
 800214a:	f000 808b 	beq.w	8002264 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d15e      	bne.n	8002214 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fb87 	bl	8000874 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	e00c      	b.n	8002184 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fb83 	bl	8000874 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d905      	bls.n	8002184 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0b3      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ec      	bne.n	800216a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b56      	ldr	r3, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x62c>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6a11      	ldr	r1, [r2, #32]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021aa:	0212      	lsls	r2, r2, #8
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021b2:	0852      	lsrs	r2, r2, #1
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0552      	lsls	r2, r2, #21
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021be:	0852      	lsrs	r2, r2, #1
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0652      	lsls	r2, r2, #25
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ca:	06d2      	lsls	r2, r2, #27
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4947      	ldr	r1, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a44      	ldr	r2, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fb42 	bl	8000874 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fb3e 	bl	8000874 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e06e      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x530>
 8002212:	e066      	b.n	80022e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 800221a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002232:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fb1a 	bl	8000874 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fb16 	bl	8000874 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e046      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x580>
 8002262:	e03e      	b.n	80022e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e039      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x628>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	429a      	cmp	r2, r3
 8002282:	d12c      	bne.n	80022de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	3b01      	subs	r3, #1
 8002290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d123      	bne.n	80022de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11b      	bne.n	80022de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d113      	bne.n	80022de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d109      	bne.n	80022de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	019f800c 	.word	0x019f800c

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e11e      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 020f 	bic.w	r2, r3, #15
 8002322:	498c      	ldr	r1, [pc, #560]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e106      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d073      	beq.n	8002430 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d129      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0f4      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002360:	f000 f972 	bl	8002648 <RCC_GetSysClockFreqFromPLLSource>
 8002364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4a7c      	ldr	r2, [pc, #496]	; (800255c <HAL_RCC_ClockConfig+0x268>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d93f      	bls.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002382:	2b00      	cmp	r3, #0
 8002384:	d033      	beq.n	80023ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12f      	bne.n	80023ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e024      	b.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0c6      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0be      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023cc:	f000 f8ce 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4a61      	ldr	r2, [pc, #388]	; (800255c <HAL_RCC_ClockConfig+0x268>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d909      	bls.n	80023ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e2:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4957      	ldr	r1, [pc, #348]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002400:	f7fe fa38 	bl	8000874 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fa34 	bl	8000874 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e095      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800244e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002452:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002468:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800246a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
 8002482:	e008      	b.n	8002496 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	d105      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a32      	ldr	r2, [pc, #200]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002494:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d21d      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 020f 	bic.w	r2, r3, #15
 80024ac:	4929      	ldr	r1, [pc, #164]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024b4:	f7fe f9de 	bl	8000874 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe f9da 	bl	8000874 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e03b      	b.n	800254a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1ed      	bne.n	80024bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4917      	ldr	r1, [pc, #92]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490f      	ldr	r1, [pc, #60]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251e:	f000 f825 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCC_ClockConfig+0x264>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490c      	ldr	r1, [pc, #48]	; (8002560 <HAL_RCC_ClockConfig+0x26c>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x270>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f94a 	bl	80007dc <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	04c4b400 	.word	0x04c4b400
 8002560:	080032a4 	.word	0x080032a4
 8002564:	20000084 	.word	0x20000084
 8002568:	20000088 	.word	0x20000088

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d102      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e047      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d102      	bne.n	8002596 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e03e      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d136      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3301      	adds	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10c      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ca:	68d2      	ldr	r2, [r2, #12]
 80025cc:	0a12      	lsrs	r2, r2, #8
 80025ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
      break;
 80025d8:	e00c      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e4:	68d2      	ldr	r2, [r2, #12]
 80025e6:	0a12      	lsrs	r2, r2, #8
 80025e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
      break;
 80025f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0e5b      	lsrs	r3, r3, #25
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e001      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002614:	693b      	ldr	r3, [r7, #16]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200

08002630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000084 	.word	0x20000084

08002648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d10c      	bne.n	8002686 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002676:	68d2      	ldr	r2, [r2, #12]
 8002678:	0a12      	lsrs	r2, r2, #8
 800267a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
    break;
 8002684:	e00c      	b.n	80026a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	0a12      	lsrs	r2, r2, #8
 8002694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    break;
 800269e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0e5b      	lsrs	r3, r3, #25
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200
 80026d0:	00f42400 	.word	0x00f42400

080026d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e049      	b.n	800277a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fd ffb6 	bl	800066c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f000 fb6e 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d001      	beq.n	800279c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04c      	b.n	8002836 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_TIM_Base_Start+0xc0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d01d      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_TIM_Base_Start+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d018      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_TIM_Base_Start+0xc8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_TIM_Base_Start+0xcc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00e      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_TIM_Base_Start+0xd0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_TIM_Base_Start+0xd4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_TIM_Base_Start+0x70>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_TIM_Base_Start+0xd8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d115      	bne.n	8002820 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_TIM_Base_Start+0xdc>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d015      	beq.n	8002832 <HAL_TIM_Base_Start+0xae>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d011      	beq.n	8002832 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	e008      	b.n	8002832 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e000      	b.n	8002834 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40013400 	.word	0x40013400
 8002858:	40014000 	.word	0x40014000
 800285c:	40015000 	.word	0x40015000
 8002860:	00010007 	.word	0x00010007

08002864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0202 	mvn.w	r2, #2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa86 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa78 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fa89 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0204 	mvn.w	r2, #4
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa5c 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa4e 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa5f 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b08      	cmp	r3, #8
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b08      	cmp	r3, #8
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0208 	mvn.w	r2, #8
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa32 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa24 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fa35 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b10      	cmp	r3, #16
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b10      	cmp	r3, #16
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0210 	mvn.w	r2, #16
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2208      	movs	r2, #8
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa08 	bl	8002db8 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9fa 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa0b 	bl	8002dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0201 	mvn.w	r2, #1
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9d4 	bl	8002d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d10e      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d107      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fbd4 	bl	80031bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a22:	d10e      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d107      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fbc7 	bl	80031d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d10e      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9b9 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d10e      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0220 	mvn.w	r2, #32
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fb87 	bl	80031a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa8:	d10f      	bne.n	8002aca <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ab8:	d107      	bne.n	8002aca <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb8d 	bl	80031e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad8:	d10f      	bne.n	8002afa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fb7f 	bl	80031f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b08:	d10f      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb71 	bl	800320c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b38:	d10f      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b48:	d107      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb63 	bl	8003220 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIM_ConfigClockSource+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0f6      	b.n	8002d6e <HAL_TIM_ConfigClockSource+0x20a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <HAL_TIM_ConfigClockSource+0x214>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f000 80c1 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002bc0:	4a6d      	ldr	r2, [pc, #436]	; (8002d78 <HAL_TIM_ConfigClockSource+0x214>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f200 80c6 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bc8:	4a6c      	ldr	r2, [pc, #432]	; (8002d7c <HAL_TIM_ConfigClockSource+0x218>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f000 80b9 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002bd0:	4a6a      	ldr	r2, [pc, #424]	; (8002d7c <HAL_TIM_ConfigClockSource+0x218>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	f200 80be 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bd8:	4a69      	ldr	r2, [pc, #420]	; (8002d80 <HAL_TIM_ConfigClockSource+0x21c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	f000 80b1 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002be0:	4a67      	ldr	r2, [pc, #412]	; (8002d80 <HAL_TIM_ConfigClockSource+0x21c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f200 80b6 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002be8:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <HAL_TIM_ConfigClockSource+0x220>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f000 80a9 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002bf0:	4a64      	ldr	r2, [pc, #400]	; (8002d84 <HAL_TIM_ConfigClockSource+0x220>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f200 80ae 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bf8:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_TIM_ConfigClockSource+0x224>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f000 80a1 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c00:	4a61      	ldr	r2, [pc, #388]	; (8002d88 <HAL_TIM_ConfigClockSource+0x224>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f200 80a6 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c08:	4a60      	ldr	r2, [pc, #384]	; (8002d8c <HAL_TIM_ConfigClockSource+0x228>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f000 8099 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c10:	4a5e      	ldr	r2, [pc, #376]	; (8002d8c <HAL_TIM_ConfigClockSource+0x228>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	f200 809e 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c1c:	f000 8091 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c24:	f200 8096 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2c:	f000 8089 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c34:	f200 808e 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	d03e      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0x158>
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	f200 8087 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	f000 8086 	beq.w	8002d5a <HAL_TIM_ConfigClockSource+0x1f6>
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d87f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c54:	2b70      	cmp	r3, #112	; 0x70
 8002c56:	d01a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x12a>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d87b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c5c:	2b60      	cmp	r3, #96	; 0x60
 8002c5e:	d050      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x19e>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d877      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c64:	2b50      	cmp	r3, #80	; 0x50
 8002c66:	d03c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x17e>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d873      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d058      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x1be>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d86f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	d064      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d86b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d060      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d867      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05c      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d05a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x1de>
 8002c8c:	e062      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f000 f9cd 	bl	800303c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
      break;
 8002cba:	e04f      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f000 f9b6 	bl	800303c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cde:	609a      	str	r2, [r3, #8]
      break;
 8002ce0:	e03c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 f928 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2150      	movs	r1, #80	; 0x50
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f981 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e02c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f947 	bl	8002fa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2160      	movs	r1, #96	; 0x60
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f971 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e01c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f908 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f961 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 f958 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	00100070 	.word	0x00100070
 8002d7c:	00100060 	.word	0x00100060
 8002d80:	00100050 	.word	0x00100050
 8002d84:	00100040 	.word	0x00100040
 8002d88:	00100030 	.word	0x00100030
 8002d8c:	00100020 	.word	0x00100020

08002d90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a46      	ldr	r2, [pc, #280]	; (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d017      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d013      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00f      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <TIM_Base_SetConfig+0x134>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a41      	ldr	r2, [pc, #260]	; (8002f2c <TIM_Base_SetConfig+0x138>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <TIM_Base_SetConfig+0x13c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x48>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3f      	ldr	r2, [pc, #252]	; (8002f34 <TIM_Base_SetConfig+0x140>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d023      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d01f      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <TIM_Base_SetConfig+0x130>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01b      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <TIM_Base_SetConfig+0x134>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d017      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <TIM_Base_SetConfig+0x138>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <TIM_Base_SetConfig+0x13c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00f      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <TIM_Base_SetConfig+0x144>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <TIM_Base_SetConfig+0x148>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <TIM_Base_SetConfig+0x14c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_Base_SetConfig+0xaa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <TIM_Base_SetConfig+0x140>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <TIM_Base_SetConfig+0x12c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <TIM_Base_SetConfig+0x110>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <TIM_Base_SetConfig+0x13c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00f      	beq.n	8002f04 <TIM_Base_SetConfig+0x110>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <TIM_Base_SetConfig+0x144>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <TIM_Base_SetConfig+0x110>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <TIM_Base_SetConfig+0x148>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d007      	beq.n	8002f04 <TIM_Base_SetConfig+0x110>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <TIM_Base_SetConfig+0x14c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d003      	beq.n	8002f04 <TIM_Base_SetConfig+0x110>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <TIM_Base_SetConfig+0x140>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40015000 	.word	0x40015000
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400
 8002f40:	40014800 	.word	0x40014800

08002f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 030a 	bic.w	r3, r3, #10
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b087      	sub	sp, #28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0210 	bic.w	r2, r3, #16
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 0307 	orr.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	431a      	orrs	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003090:	2302      	movs	r3, #2
 8003092:	e074      	b.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a33      	ldr	r2, [pc, #204]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d01d      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10c      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40015000 	.word	0x40015000
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40014000 	.word	0x40014000

080031a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f000 f818 	bl	800328c <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	080032b4 	.word	0x080032b4
 8003280:	080032b4 	.word	0x080032b4
 8003284:	080032b4 	.word	0x080032b4
 8003288:	080032b8 	.word	0x080032b8

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
